{"version":3,"file":"main.js","sources":["../../packages/api/injected.js","../../packages/loot-core/src/platform/server/fs/shared.ts","../../packages/loot-core/src/platform/server/fs/index.electron.ts","../../packages/loot-core/src/platform/server/asyncStorage/index.electron.ts","../../packages/loot-core/src/platform/server/connection/index.api.ts","../../packages/loot-core/src/shared/normalisation.ts","../../packages/loot-core/src/platform/server/sqlite/normalise.ts","../../packages/loot-core/src/platform/server/sqlite/unicodeLike.ts","../../packages/loot-core/src/platform/server/sqlite/index.electron.ts","../../packages/loot-core/src/shared/query.ts","../../packages/loot-core/src/platform/exceptions/index.ts","../../packages/loot-core/src/shared/environment.ts","../../packages/loot-core/src/shared/platform.electron.ts","../../packages/loot-core/src/shared/months.ts","../../packages/loot-core/src/shared/util.ts","../../packages/loot-core/src/server/app.ts","../../packages/crdt/src/proto/sync_pb.js","../../packages/crdt/src/crdt/merkle.ts","../../packages/crdt/src/crdt/timestamp.ts","../../packages/crdt/src/index.ts","../../packages/loot-core/src/server/aql/compiler.ts","../../packages/loot-core/src/server/errors.ts","../../packages/loot-core/src/server/models.ts","../../packages/loot-core/src/server/aql/schema-helpers.ts","../../packages/loot-core/src/server/aql/exec.ts","../../packages/loot-core/src/server/aql/schema/index.ts","../../packages/loot-core/src/server/db/util.ts","../../packages/loot-core/src/server/aql/schema/executors.ts","../../packages/loot-core/src/server/aql/views.ts","../../packages/loot-core/src/server/aql/index.ts","../../packages/loot-core/src/platform/server/log/index.ts","../../packages/loot-core/src/shared/async.ts","../../packages/loot-core/src/server/spreadsheet/graph-data-structure.ts","../../packages/loot-core/src/server/spreadsheet/util.ts","../../packages/loot-core/src/server/spreadsheet/spreadsheet.ts","../../packages/loot-core/src/server/sheet.ts","../../packages/loot-core/src/shared/locale.ts","../../packages/loot-core/src/server/budget/actions.ts","../../packages/loot-core/src/server/spreadsheet/globals.ts","../../packages/loot-core/src/server/budget/util.ts","../../packages/loot-core/src/server/budget/envelope.ts","../../packages/loot-core/src/server/budget/report.ts","../../packages/loot-core/src/server/budget/base.ts","../../packages/loot-core/src/server/main-app.ts","../../packages/loot-core/src/server/mutators.ts","../../packages/loot-core/src/platform/server/fetch/index.api.ts","../../packages/loot-core/src/server/post.ts","../../packages/loot-core/src/server/prefs.ts","../../packages/loot-core/src/server/server-config.ts","../../packages/loot-core/src/server/undo.ts","../../packages/loot-core/src/server/encryption/encryption-internals.ts","../../packages/loot-core/src/server/encryption/index.ts","../../packages/loot-core/src/server/sync/encoder.ts","../../packages/loot-core/src/server/sync/repair.ts","../../packages/loot-core/src/server/sync/utils.ts","../../packages/loot-core/src/server/sync/make-test-message.ts","../../packages/loot-core/src/server/cloud-storage.ts","../../packages/loot-core/src/server/sync/reset.ts","../../packages/loot-core/src/server/sync/index.ts","../../packages/loot-core/src/server/db/sort.ts","../../packages/loot-core/src/server/db/index.ts","../../packages/loot-core/src/server/accounts/link.ts","../../packages/loot-core/src/server/accounts/payees.ts","../../packages/loot-core/src/shared/transactions.ts","../../packages/loot-core/src/shared/rules.ts","../../packages/loot-core/src/server/db/mappings.ts","../../packages/loot-core/src/shared/schedules.ts","../../packages/loot-core/src/server/rules/index.ts","../../packages/loot-core/src/server/transactions/transaction-rules.ts","../../packages/loot-core/src/server/transactions/transfer.ts","../../packages/loot-core/src/server/transactions/index.ts","../../packages/loot-core/src/server/util/custom-sync-mapping.ts","../../packages/loot-core/src/server/accounts/title/lower-case.ts","../../packages/loot-core/src/server/accounts/title/specials.ts","../../packages/loot-core/src/server/accounts/title/index.ts","../../packages/loot-core/src/server/accounts/sync.ts","../../packages/loot-core/src/server/accounts/app.ts","../../packages/loot-core/src/server/admin/app.ts","../../packages/loot-core/src/shared/errors.ts","../../packages/loot-core/src/server/api-models.ts","../../packages/loot-core/src/server/api.ts","../../packages/loot-core/src/server/auth/app.ts","../../packages/loot-core/src/server/budget/cleanup-template.pegjs","../../packages/loot-core/src/server/budget/cleanup-template.ts","../../packages/loot-core/src/server/schedules/find-schedules.ts","../../packages/loot-core/src/server/schedules/app.ts","../../packages/loot-core/src/server/budget/schedule-template.ts","../../packages/loot-core/src/server/budget/goal-template.pegjs","../../packages/loot-core/src/server/budget/template-notes.ts","../../packages/loot-core/src/server/budget/statements.ts","../../packages/loot-core/src/server/budget/category-template-context.ts","../../packages/loot-core/src/server/budget/goal-template.ts","../../packages/loot-core/src/server/budget/app.ts","../../packages/loot-core/src/mocks/random.ts","../../packages/loot-core/src/mocks/budget.ts","../../packages/loot-core/src/server/importers/actual.ts","../../packages/api/methods.ts","../../packages/api/utils.js","../../packages/loot-core/src/server/importers/ynab4.ts","../../packages/loot-core/src/server/importers/ynab5.ts","../../packages/loot-core/src/server/importers/index.ts","../../packages/loot-core/src/server/sync/migrate.ts","../../packages/loot-core/migrations/1632571489012_remove_cache.js","../../packages/loot-core/migrations/1722717601000_reports_move_selected_categories.js","../../packages/loot-core/migrations/1722804019000_create_dashboard_table.js","../../packages/loot-core/migrations/1723665565000_prefs.js","../../packages/loot-core/src/server/migrate/migrations.ts","../../packages/loot-core/src/server/update.ts","../../packages/loot-core/src/server/util/budget-name.ts","../../packages/loot-core/src/server/budgetfiles/backups.ts","../../packages/loot-core/src/server/budgetfiles/app.ts","../../packages/loot-core/src/shared/dashboard.ts","../../packages/loot-core/src/server/reports/app.ts","../../packages/loot-core/src/server/dashboard/app.ts","../../packages/loot-core/src/server/encryption/app.ts","../../packages/loot-core/src/server/filters/app.ts","../../packages/loot-core/src/server/notes/app.ts","../../packages/loot-core/src/server/payees/app.ts","../../packages/loot-core/src/server/preferences/app.ts","../../packages/loot-core/src/server/rules/app.ts","../../packages/loot-core/src/server/spreadsheet/app.ts","../../packages/loot-core/src/server/sync/app.ts","../../packages/loot-core/src/server/tags/app.ts","../../packages/loot-core/src/server/tools/app.ts","../../packages/loot-core/src/server/transactions/export/export-to-csv.ts","../../packages/loot-core/src/server/transactions/import/ofx2json.ts","../../packages/loot-core/src/server/transactions/import/qif2json.ts","../../packages/loot-core/src/server/transactions/import/xmlcamt2json.ts","../../packages/loot-core/src/server/transactions/import/parse-file.ts","../../packages/loot-core/src/server/transactions/merge.ts","../../packages/loot-core/src/server/transactions/app.ts","../../packages/loot-core/src/server/main.ts"],"sourcesContent":["// TODO: comment on why it works this way\n\nexport let send;\n\nexport function override(sendImplementation) {\n  send = sendImplementation;\n}\n","// @ts-strict-ignore\nimport { join } from './path-join';\n\nimport type * as T from '.';\n\nlet documentDir;\nexport const _setDocumentDir: T._SetDocumentDir = dir => (documentDir = dir);\n\nexport const getDocumentDir = () => {\n  if (!documentDir) {\n    throw new Error('Document directory is not set');\n  }\n  return documentDir;\n};\n\nexport const getBudgetDir = id => {\n  if (!id) {\n    throw new Error('getDocumentDir: id is falsy: ' + id);\n  }\n\n  // TODO: This should be better\n  //\n  // A cheesy safe guard. The id is generated from the budget name,\n  // so it provides an entry point for the user to accidentally (or\n  // intentionally) access other parts of the system. Always\n  // restrict it to only access files within the budget directory by\n  // never allowing slashes.\n  if (id.match(/[^A-Za-z0-9\\-_]/)) {\n    throw new Error(\n      `Invalid budget id “${id}”. Check the id of your budget in the Advanced section of the settings page.`,\n    );\n  }\n\n  return join(getDocumentDir(), id);\n};\n","// @ts-strict-ignore\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport promiseRetry from 'promise-retry';\n\nimport type * as T from '.';\n\nexport { getDocumentDir, getBudgetDir, _setDocumentDir } from './shared';\n\nlet rootPath = path.join(__dirname, '..', '..', '..', '..');\n\nswitch (path.basename(__filename)) {\n  case 'bundle.api.js': // api bundle uses the electron bundle - account for its file structure\n    rootPath = path.join(__dirname, '..');\n    break;\n  case 'bundle.desktop.js': // electron app\n    rootPath = path.join(__dirname, '..', '..');\n    break;\n  default:\n    break;\n}\n\nexport const init = () => {\n  // Nothing to do\n};\n\nexport const getDataDir = () => {\n  if (!process.env.ACTUAL_DATA_DIR) {\n    throw new Error('ACTUAL_DATA_DIR env variable is required');\n  }\n  return process.env.ACTUAL_DATA_DIR;\n};\n\nexport const bundledDatabasePath = path.join(rootPath, 'default-db.sqlite');\n\nexport const migrationsPath = path.join(rootPath, 'migrations');\n\nexport const demoBudgetPath = path.join(rootPath, 'demo-budget');\n\nexport const join = path.join;\n\nexport const basename = filepath => path.basename(filepath);\n\nexport const listDir: T.ListDir = filepath =>\n  new Promise((resolve, reject) => {\n    fs.readdir(filepath, (err, files) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(files);\n      }\n    });\n  });\n\nexport const exists = filepath =>\n  new Promise(resolve => {\n    fs.access(filepath, fs.constants.F_OK, err => {\n      return resolve(!err);\n    });\n  });\n\nexport const mkdir = filepath =>\n  new Promise((resolve, reject) => {\n    fs.mkdir(filepath, err => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(undefined);\n      }\n    });\n  });\n\nexport const size = filepath =>\n  new Promise((resolve, reject) => {\n    fs.stat(filepath, (err, stats) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(stats.size);\n      }\n    });\n  });\n\nexport const copyFile: T.CopyFile = (frompath, topath) => {\n  return new Promise<boolean>((resolve, reject) => {\n    const readStream = fs.createReadStream(frompath);\n    const writeStream = fs.createWriteStream(topath);\n\n    readStream.on('error', reject);\n    writeStream.on('error', reject);\n\n    writeStream.on('open', () => readStream.pipe(writeStream));\n    writeStream.once('close', () => resolve(true));\n  });\n};\n\nexport const readFile: T.ReadFile = (\n  filepath: string,\n  encoding: 'utf8' | 'binary' | null = 'utf8',\n) => {\n  if (encoding === 'binary') {\n    // `binary` is not actually a valid encoding, you pass `null` into node if\n    // you want a buffer\n    encoding = null;\n  }\n  // `any` as cannot refine return with two function overrides\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new Promise<any>((resolve, reject) => {\n    fs.readFile(filepath, encoding, (err, data) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(data);\n      }\n    });\n  });\n};\n\nexport const writeFile: T.WriteFile = async (filepath, contents) => {\n  try {\n    await promiseRetry(\n      (retry, attempt) => {\n        return new Promise((resolve, reject) => {\n          // @ts-expect-error contents type needs refining\n          fs.writeFile(filepath, contents, 'utf8', err => {\n            if (err) {\n              console.error(\n                `Failed to write to ${filepath}. Attempted ${attempt} times. Something is locking the file - potentially a virus scanner or backup software.`,\n              );\n              reject(err);\n            } else {\n              if (attempt > 1) {\n                console.info(\n                  `Successfully recovered from file lock. It took ${attempt} retries`,\n                );\n              }\n              resolve(undefined);\n            }\n          });\n        }).catch(retry);\n      },\n      {\n        retries: 20,\n        minTimeout: 100,\n        maxTimeout: 500,\n        factor: 1.5,\n      },\n    );\n\n    return undefined;\n  } catch (err) {\n    console.error(`Unable to recover from file lock on file ${filepath}`);\n    throw err;\n  }\n};\n\nexport const removeFile = filepath => {\n  return new Promise(function (resolve, reject) {\n    fs.unlink(filepath, err => {\n      return err ? reject(err) : resolve(undefined);\n    });\n  });\n};\n\nexport const removeDir = dirpath => {\n  return new Promise(function (resolve, reject) {\n    fs.rmdir(dirpath, err => {\n      return err ? reject(err) : resolve(undefined);\n    });\n  });\n};\n\nexport const removeDirRecursively = async dirpath => {\n  if (await exists(dirpath)) {\n    for (const file of await listDir(dirpath)) {\n      const fullpath = join(dirpath, file);\n      if (fs.statSync(fullpath).isDirectory()) {\n        await removeDirRecursively(fullpath);\n      } else {\n        await removeFile(fullpath);\n      }\n    }\n\n    await removeDir(dirpath);\n  }\n};\n\nexport const getModifiedTime = filepath => {\n  return new Promise(function (resolve, reject) {\n    fs.stat(filepath, (err, stats) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(new Date(stats.mtime));\n      }\n    });\n  });\n};\n","// @ts-strict-ignore\nimport * as fs from 'fs';\nimport { join } from 'path';\n\nimport { GlobalPrefsJson } from '../../../types/prefs';\nimport * as lootFs from '../fs';\n\nimport * as T from './index-types';\n\nconst getStorePath = () => join(lootFs.getDataDir(), 'global-store.json');\nlet store: GlobalPrefsJson;\nlet persisted = true;\n\nexport const init: T.Init = function ({ persist = true } = {}) {\n  if (persist) {\n    try {\n      store = JSON.parse(fs.readFileSync(getStorePath(), 'utf8'));\n    } catch (e) {\n      store = {};\n    }\n  } else {\n    store = {};\n  }\n\n  persisted = persist;\n};\n\nfunction _saveStore(): Promise<void> {\n  if (persisted) {\n    return new Promise(function (resolve, reject) {\n      fs.writeFile(\n        getStorePath(),\n        JSON.stringify(store),\n        'utf8',\n        function (err) {\n          return err ? reject(err) : resolve();\n        },\n      );\n    });\n  }\n}\n\nexport const getItem: T.GetItem = function (key) {\n  return new Promise(function (resolve) {\n    return resolve(store[key]);\n  });\n};\n\nexport const setItem: T.SetItem = function (key, value) {\n  store[key] = value;\n  return _saveStore();\n};\n\nexport const removeItem: T.RemoveItem = function (key) {\n  delete store[key];\n  return _saveStore();\n};\n\nexport async function multiGet<K extends readonly (keyof GlobalPrefsJson)[]>(\n  keys: K,\n): Promise<{ [P in K[number]]: GlobalPrefsJson[P] }> {\n  const results = keys.map(key => [key, store[key]]) as {\n    [P in keyof K]: [K[P], GlobalPrefsJson[K[P]]];\n  };\n\n  // Convert the array of tuples to an object with properly typed properties\n  return results.reduce(\n    (acc, [key, value]) => {\n      acc[key] = value;\n      return acc;\n    },\n    {} as { [P in K[number]]: GlobalPrefsJson[P] },\n  );\n}\n\nexport const multiSet: T.MultiSet = function (keyValues) {\n  keyValues.forEach(function ([key, value]) {\n    store[key] = value;\n  });\n  return _saveStore();\n};\n\nexport const multiRemove: T.MultiRemove = function (keys) {\n  keys.forEach(function (key) {\n    delete store[key];\n  });\n  return _saveStore();\n};\n","import type * as T from './index-types';\n\nexport const init: T.Init = function () {};\n\nexport const send: T.Send = function () {\n  // Nothing\n};\n\nexport const getNumClients: T.GetNumClients = function () {\n  return 1;\n};\n","export function getNormalisedString(value: string) {\n  return value\n    .toLowerCase()\n    .normalize('NFD')\n    .replace(/\\p{Diacritic}/gu, '');\n}\n","import { getNormalisedString } from '../../../shared/normalisation';\n\nexport function normalise(value: string | null): string | null {\n  if (!value) {\n    return null;\n  }\n\n  return getNormalisedString(value);\n}\n","import { LRUCache } from 'lru-cache';\n\nconst likePatternCache = new LRUCache<string, RegExp>({ max: 500 });\n\nexport function unicodeLike(\n  pattern: string | null,\n  value: string | null,\n): number {\n  if (!pattern) {\n    return 0;\n  }\n\n  if (!value) {\n    value = '';\n  }\n\n  let cachedRegExp = likePatternCache.get(pattern);\n  if (!cachedRegExp) {\n    // we don't escape ? and % because we don't know\n    // whether they originate from the user input or from our query compiler.\n    // Maybe improve the query compiler to correctly process these characters?\n    const processedPattern = pattern\n      .replace(/[.*+^${}()|[\\]\\\\]/g, '\\\\$&')\n      .replaceAll('?', '.')\n      .replaceAll('%', '.*');\n    cachedRegExp = new RegExp(processedPattern, 'i');\n    likePatternCache.set(pattern, cachedRegExp);\n  }\n\n  return cachedRegExp.test(value) ? 1 : 0;\n}\n","// @ts-strict-ignore\nimport SQL from 'better-sqlite3';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { removeFile, readFile } from '../fs';\n\nimport { normalise } from './normalise';\nimport { unicodeLike } from './unicodeLike';\n\nfunction verifyParamTypes(sql, arr) {\n  arr.forEach(val => {\n    if (typeof val !== 'string' && typeof val !== 'number' && val !== null) {\n      console.log(sql, arr);\n      throw new Error('Invalid field type ' + val + ' for sql ' + sql);\n    }\n  });\n}\n\nexport async function init() {}\n\nexport function prepare(db, sql) {\n  return db.prepare(sql);\n}\n\nexport function runQuery(\n  db: SQL.Database,\n  sql: string | SQL.Statement,\n  params: (string | number)[] = [],\n  fetchAll = false,\n) {\n  if (params) {\n    verifyParamTypes(sql, params);\n  }\n\n  let stmt: SQL.Statement;\n  try {\n    stmt = typeof sql === 'string' ? db.prepare(sql) : sql;\n  } catch (e) {\n    console.log('error', sql);\n    throw e;\n  }\n\n  if (fetchAll) {\n    try {\n      const result = stmt.all(...params);\n      return result;\n    } catch (e) {\n      console.log('error', sql);\n      throw e;\n    }\n  } else {\n    try {\n      const info = stmt.run(...params);\n      return { changes: info.changes, insertId: info.lastInsertRowid };\n    } catch (e) {\n      // console.log('error', sql);\n      throw e;\n    }\n  }\n}\n\nexport function execQuery(db: SQL.Database, sql: string) {\n  db.exec(sql);\n}\n\nexport function transaction(db: SQL.Database, fn: () => void) {\n  db.transaction(fn)();\n}\n\n// **Important**: this is an unsafe function since sqlite executes\n// executes statements sequentially. It would be easy for other code\n// to run statements in between our transaction and get caught up in\n// it. This is rarely used, and only needed for specific cases (like\n// batch importing a bunch of data). Don't use this.\nlet transactionDepth = 0;\nexport async function asyncTransaction(\n  db: SQL.Database,\n  fn: () => Promise<void>,\n) {\n  // Support nested transactions by \"coalescing\" them into the parent\n  // one if one is already started\n  if (transactionDepth === 0) {\n    db.exec('BEGIN TRANSACTION');\n  }\n  transactionDepth++;\n\n  try {\n    await fn();\n  } finally {\n    transactionDepth--;\n    // We always commit because rollback is more dangerous - any\n    // queries that ran *in-between* this async function would be\n    // lost. Right now we are only using transactions for speed\n    // purposes unfortunately\n    if (transactionDepth === 0) {\n      db.exec('COMMIT');\n    }\n  }\n}\n\nfunction regexp(regex: string, text: string | null) {\n  return new RegExp(regex).test(text || '') ? 1 : 0;\n}\n\nexport function openDatabase(pathOrBuffer: string | Buffer) {\n  const db = new SQL(pathOrBuffer);\n  // Define Unicode-aware LOWER, UPPER, and LIKE implementation.\n  // This is necessary because better-sqlite3 uses SQLite build without ICU support.\n  db.function('UNICODE_LOWER', { deterministic: true }, (arg: string | null) =>\n    arg?.toLowerCase(),\n  );\n  db.function('UNICODE_UPPER', { deterministic: true }, (arg: string | null) =>\n    arg?.toUpperCase(),\n  );\n  db.function('UNICODE_LIKE', { deterministic: true }, unicodeLike);\n  db.function('REGEXP', { deterministic: true }, regexp);\n  db.function('NORMALISE', { deterministic: true }, normalise);\n  return db;\n}\n\nexport function closeDatabase(db: SQL.Database) {\n  return db.close();\n}\n\nexport async function exportDatabase(db: SQL.Database) {\n  // electron does not support better-sqlite serialize since v21\n  // save to file and read in the raw data.\n  const name = `${process.env.ACTUAL_DATA_DIR}/backup-for-export-${uuidv4()}.db`;\n\n  await db.backup(name);\n\n  const data = await readFile(name, 'binary');\n  await removeFile(name);\n\n  return data;\n}\n","import { WithRequired } from '../types/util';\n\ntype ObjectExpression = {\n  [key: string]: ObjectExpression | unknown;\n};\n\nexport type QueryState = {\n  get table(): string;\n  get tableOptions(): Readonly<Record<string, unknown>>;\n  get filterExpressions(): ReadonlyArray<ObjectExpression>;\n  get selectExpressions(): ReadonlyArray<ObjectExpression | string | '*'>;\n  get groupExpressions(): ReadonlyArray<ObjectExpression | string>;\n  get orderExpressions(): ReadonlyArray<ObjectExpression | string>;\n  get calculation(): boolean;\n  get rawMode(): boolean;\n  get withDead(): boolean;\n  get validateRefs(): boolean;\n  get limit(): number | null;\n  get offset(): number | null;\n};\n\nexport class Query {\n  state: QueryState;\n\n  constructor(state: WithRequired<Partial<QueryState>, 'table'>) {\n    this.state = {\n      tableOptions: state.tableOptions || {},\n      filterExpressions: state.filterExpressions || [],\n      selectExpressions: state.selectExpressions || [],\n      groupExpressions: state.groupExpressions || [],\n      orderExpressions: state.orderExpressions || [],\n      calculation: false,\n      rawMode: false,\n      withDead: false,\n      validateRefs: true,\n      limit: null,\n      offset: null,\n      ...state,\n    };\n  }\n\n  filter(expr: ObjectExpression) {\n    return new Query({\n      ...this.state,\n      filterExpressions: [...this.state.filterExpressions, expr],\n    });\n  }\n\n  unfilter(exprs?: Array<keyof ObjectExpression>) {\n    // Remove all filters if no arguments are passed\n    if (!exprs) {\n      return new Query({\n        ...this.state,\n        filterExpressions: [],\n      });\n    }\n\n    const exprSet = new Set(exprs);\n    return new Query({\n      ...this.state,\n      filterExpressions: this.state.filterExpressions.filter(\n        expr => !exprSet.has(Object.keys(expr)[0]),\n      ),\n    });\n  }\n\n  select(\n    exprs:\n      | Array<ObjectExpression | string>\n      | ObjectExpression\n      | string\n      | '*'\n      | ['*'] = [],\n  ) {\n    if (!Array.isArray(exprs)) {\n      exprs = [exprs];\n    }\n\n    return new Query({\n      ...this.state,\n      selectExpressions: exprs,\n      calculation: false,\n    });\n  }\n\n  calculate(expr: ObjectExpression | string) {\n    return new Query({\n      ...this.state,\n      selectExpressions: [{ result: expr }],\n      calculation: true,\n    });\n  }\n\n  groupBy(exprs: ObjectExpression | string | Array<ObjectExpression | string>) {\n    if (!Array.isArray(exprs)) {\n      exprs = [exprs];\n    }\n\n    return new Query({\n      ...this.state,\n      groupExpressions: [...this.state.groupExpressions, ...exprs],\n    });\n  }\n\n  orderBy(exprs: ObjectExpression | string | Array<ObjectExpression | string>) {\n    if (!Array.isArray(exprs)) {\n      exprs = [exprs];\n    }\n\n    return new Query({\n      ...this.state,\n      orderExpressions: [...this.state.orderExpressions, ...exprs],\n    });\n  }\n\n  limit(num: number) {\n    return new Query({ ...this.state, limit: num });\n  }\n\n  offset(num: number) {\n    return new Query({ ...this.state, offset: num });\n  }\n\n  raw() {\n    return new Query({ ...this.state, rawMode: true });\n  }\n\n  withDead() {\n    return new Query({ ...this.state, withDead: true });\n  }\n\n  withoutValidatedRefs() {\n    return new Query({ ...this.state, validateRefs: false });\n  }\n\n  options(opts: Record<string, unknown>) {\n    return new Query({ ...this.state, tableOptions: opts });\n  }\n\n  reset() {\n    return q(this.state.table);\n  }\n\n  serialize() {\n    return this.state;\n  }\n\n  serializeAsString() {\n    return JSON.stringify(this.serialize());\n  }\n}\n\nexport function getPrimaryOrderBy(\n  query: Query,\n  defaultOrderBy: ObjectExpression | null,\n) {\n  const orderExprs = query.serialize().orderExpressions;\n  if (orderExprs.length === 0) {\n    if (defaultOrderBy) {\n      return { order: 'asc', ...defaultOrderBy };\n    }\n    return null;\n  }\n\n  const firstOrder = orderExprs[0];\n  if (typeof firstOrder === 'string') {\n    return { field: firstOrder, order: 'asc' };\n  }\n  // Handle this form: { field: 'desc' }\n  const [field] = Object.keys(firstOrder);\n  return { field, order: firstOrder[field] };\n}\n\nexport function q(table: QueryState['table']) {\n  return new Query({ table });\n}\n","export const captureException = function (exc: Error) {\n  console.error('[Exception]', exc);\n};\n\n// eslint-disable-next-line\nexport const captureBreadcrumb = function (crumb: unknown) {};\n","export function isPreviewEnvironment() {\n  return String(process.env.REACT_APP_NETLIFY) === 'true';\n}\n\nexport function isDevelopmentEnvironment() {\n  return process.env.NODE_ENV === 'development';\n}\n\nexport function isNonProductionEnvironment() {\n  return isPreviewEnvironment() || isDevelopmentEnvironment();\n}\n\nexport function isElectron() {\n  if (navigator.userAgent.indexOf('Electron') >= 0) {\n    return true;\n  }\n  return false;\n}\n","const os = require('os');\n\nconst isWindows = os.platform() === 'win32';\nconst isMac = os.platform() === 'darwin';\nconst isLinux = os.platform() === 'linux';\n\nexport const isPlaywright = false;\n\nexport const OS: 'windows' | 'mac' | 'linux' | 'unknown' = isWindows\n  ? 'windows'\n  : isMac\n    ? 'mac'\n    : isLinux\n      ? 'linux'\n      : 'unknown';\nexport const env: 'web' | 'mobile' | 'unknown' = 'unknown';\nexport const isBrowser = false;\n\nexport const isIOSAgent = false;\n","// @ts-strict-ignore\nimport * as d from 'date-fns';\nimport { Locale } from 'date-fns';\nimport memoizeOne from 'memoize-one';\n\nimport { type SyncedPrefs } from '../types/prefs';\n\nimport * as Platform from './platform';\n\ntype DateLike = string | Date;\ntype Day = 0 | 1 | 2 | 3 | 4 | 5 | 6;\n\nexport function _parse(value: DateLike): Date {\n  if (typeof value === 'string') {\n    // Dates are hard. We just want to deal with months in the format\n    // 2020-01 and days in the format 2020-01-01, but life is never\n    // simple. We want to rely on native dates for date logic because\n    // days are complicated (leap years, etc). But relying on native\n    // dates mean we're exposed to craziness.\n    //\n    // The biggest problem is that JS dates work with local time by\n    // default. We could try to only work with UTC, but there's not an\n    // easy way to make `format` avoid local time, and not sure if we\n    // want that anyway (`currentMonth` should surely print the local\n    // time). We need to embrace local time, and as long as inputs to\n    // date logic and outputs from format are local time, it should\n    // work.\n    //\n    // To make sure we're in local time, always give Date integer\n    // values. If you pass in a string to parse, different string\n    // formats produce different results.\n    //\n    // A big problem is daylight savings, however. Usually, when\n    // giving the time to the Date constructor, you get back a date\n    // specifically for that time in your local timezone. However, if\n    // daylight savings occurs on that exact time, you will get back\n    // something different:\n    //\n    // This is fine:\n    // > new Date(2017, 2, 12, 1).toString()\n    // > 'Sun Mar 12 2017 01:00:00 GMT-0500 (Eastern Standard Time)'\n    //\n    // But wait, we got back a different time (3AM instead of 2AM):\n    // > new Date(2017, 2, 12, 2).toString()\n    // > 'Sun Mar 12 2017 03:00:00 GMT-0400 (Eastern Daylight Time)'\n    //\n    // The time is \"correctly\" adjusted via DST, but we _really_\n    // wanted 2AM. The problem is that time simply doesn't exist.\n    //\n    // Why is this a problem? Well, consider a case where the DST\n    // shift happens *at midnight* and it goes back an hour. You think\n    // you have a date object for the next day, but when formatted it\n    // actually shows the previous day. A more likely scenario: buggy\n    // timezone data makes JS dates do this shift when it shouldn't,\n    // so using midnight at the time for date logic gives back the\n    // last day. See the time range of Sep 30 15:00 - Oct 1 1:00 for\n    // the AEST timezone when nodejs-mobile incorrectly gives you back\n    // a time an hour *before* you specified. Since this happens on\n    // Oct 1, doing `addMonths(September, 1)` still gives you back\n    // September. Issue here:\n    // https://github.com/JaneaSystems/nodejs-mobile/issues/251\n    //\n    // The fix is simple once you understand this. Always use the 12th\n    // hour of the day. That's it. There is no DST that shifts more\n    // than 12 hours (god let's hope not) so no matter how far DST has\n    // shifted backwards or forwards, doing date logic will stay\n    // within the day we want.\n\n    const [year, month, day] = value.split('-');\n    if (day != null) {\n      return new Date(parseInt(year), parseInt(month) - 1, parseInt(day), 12);\n    } else if (month != null) {\n      return new Date(parseInt(year), parseInt(month) - 1, 1, 12);\n    } else {\n      return new Date(parseInt(year), 0, 1, 12);\n    }\n  }\n  if (typeof value === 'number') {\n    return new Date(value);\n  }\n  return value;\n}\n\nexport const parseDate = _parse;\n\nexport function yearFromDate(date: DateLike): string {\n  return d.format(_parse(date), 'yyyy');\n}\n\nexport function monthFromDate(date: DateLike): string {\n  return d.format(_parse(date), 'yyyy-MM');\n}\n\nexport function weekFromDate(\n  date: DateLike,\n  firstDayOfWeekIdx: SyncedPrefs['firstDayOfWeekIdx'],\n): string {\n  const converted = parseInt(firstDayOfWeekIdx || '0') as Day;\n  return d.format(\n    _parse(d.startOfWeek(_parse(date), { weekStartsOn: converted })),\n    'yyyy-MM-dd',\n  );\n}\n\nexport function firstDayOfMonth(date: DateLike): string {\n  return dayFromDate(d.startOfMonth(_parse(date)));\n}\n\nexport function lastDayOfMonth(date: DateLike): string {\n  return dayFromDate(d.endOfMonth(_parse(date)));\n}\n\nexport function dayFromDate(date: DateLike): string {\n  return d.format(_parse(date), 'yyyy-MM-dd');\n}\n\nexport function currentMonth(): string {\n  if (global.IS_TESTING || Platform.isPlaywright) {\n    return global.currentMonth || '2017-01';\n  } else {\n    return d.format(new Date(), 'yyyy-MM');\n  }\n}\n\nexport function currentWeek(\n  firstDayOfWeekIdx?: SyncedPrefs['firstDayOfWeekIdx'],\n): string {\n  if (global.IS_TESTING || Platform.isPlaywright) {\n    return global.currentWeek || '2017-01-01';\n  } else {\n    const converted = parseInt(firstDayOfWeekIdx || '0') as Day;\n    return d.format(\n      _parse(d.startOfWeek(new Date(), { weekStartsOn: converted })),\n      'yyyy-MM-dd',\n    );\n  }\n}\n\nexport function currentYear(): string {\n  if (global.IS_TESTING || Platform.isPlaywright) {\n    return global.currentMonth || '2017';\n  } else {\n    return d.format(new Date(), 'yyyy');\n  }\n}\n\nexport function currentDate(): Date {\n  if (global.IS_TESTING || Platform.isPlaywright) {\n    return d.parse(currentDay(), 'yyyy-MM-dd', new Date());\n  }\n\n  return new Date();\n}\n\nexport function currentDay(): string {\n  if (global.IS_TESTING || Platform.isPlaywright) {\n    return '2017-01-01';\n  } else {\n    return d.format(new Date(), 'yyyy-MM-dd');\n  }\n}\n\nexport function nextMonth(month: DateLike): string {\n  return d.format(d.addMonths(_parse(month), 1), 'yyyy-MM');\n}\n\nexport function prevYear(month: DateLike): string {\n  return d.format(d.subMonths(_parse(month), 12), 'yyyy-MM');\n}\n\nexport function prevMonth(month: DateLike): string {\n  return d.format(d.subMonths(_parse(month), 1), 'yyyy-MM');\n}\n\nexport function addYears(year: DateLike, n: number): string {\n  return d.format(d.addYears(_parse(year), n), 'yyyy');\n}\n\nexport function addMonths(month: DateLike, n: number): string {\n  return d.format(d.addMonths(_parse(month), n), 'yyyy-MM');\n}\n\nexport function addWeeks(date: DateLike, n: number): string {\n  return d.format(d.addWeeks(_parse(date), n), 'yyyy-MM-dd');\n}\n\nexport function differenceInCalendarMonths(\n  month1: DateLike,\n  month2: DateLike,\n): number {\n  return d.differenceInCalendarMonths(_parse(month1), _parse(month2));\n}\n\nexport function differenceInCalendarDays(\n  month1: DateLike,\n  month2: DateLike,\n): number {\n  return d.differenceInCalendarDays(_parse(month1), _parse(month2));\n}\n\nexport function subMonths(month: string | Date, n: number) {\n  return d.format(d.subMonths(_parse(month), n), 'yyyy-MM');\n}\n\nexport function subWeeks(date: DateLike, n: number): string {\n  return d.format(d.subWeeks(_parse(date), n), 'yyyy-MM-dd');\n}\n\nexport function subYears(year: string | Date, n: number) {\n  return d.format(d.subYears(_parse(year), n), 'yyyy');\n}\n\nexport function addDays(day: DateLike, n: number): string {\n  return d.format(d.addDays(_parse(day), n), 'yyyy-MM-dd');\n}\n\nexport function subDays(day: DateLike, n: number): string {\n  return d.format(d.subDays(_parse(day), n), 'yyyy-MM-dd');\n}\n\nexport function isBefore(month1: DateLike, month2: DateLike): boolean {\n  return d.isBefore(_parse(month1), _parse(month2));\n}\n\nexport function isAfter(month1: DateLike, month2: DateLike): boolean {\n  return d.isAfter(_parse(month1), _parse(month2));\n}\n\nexport function isCurrentMonth(month: DateLike): boolean {\n  return month === currentMonth();\n}\n\nexport function isCurrentDay(day: DateLike): boolean {\n  return day === currentDay();\n}\n\n// TODO: This doesn't really fit in this module anymore, should\n// probably live elsewhere\nexport function bounds(month: DateLike): { start: number; end: number } {\n  return {\n    start: parseInt(d.format(d.startOfMonth(_parse(month)), 'yyyyMMdd')),\n    end: parseInt(d.format(d.endOfMonth(_parse(month)), 'yyyyMMdd')),\n  };\n}\n\nexport function _yearRange(\n  start: DateLike,\n  end: DateLike,\n  inclusive = false,\n): string[] {\n  const years: string[] = [];\n  let year = yearFromDate(start);\n  const endYear = yearFromDate(end);\n  while (d.isBefore(_parse(year), _parse(endYear))) {\n    years.push(year);\n    year = addYears(year, 1);\n  }\n\n  if (inclusive) {\n    years.push(year);\n  }\n\n  return years;\n}\n\nexport function yearRangeInclusive(start: DateLike, end: DateLike): string[] {\n  return _yearRange(start, end, true);\n}\n\nexport function _weekRange(\n  start: DateLike,\n  end: DateLike,\n  inclusive = false,\n  firstDayOfWeekIdx?: SyncedPrefs['firstDayOfWeekIdx'],\n): string[] {\n  const weeks: string[] = [];\n  let week = weekFromDate(start, firstDayOfWeekIdx);\n  const endWeek = weekFromDate(end, firstDayOfWeekIdx);\n  while (d.isBefore(_parse(week), _parse(endWeek))) {\n    weeks.push(week);\n    week = addWeeks(week, 1);\n  }\n\n  if (inclusive) {\n    weeks.push(week);\n  }\n\n  return weeks;\n}\n\nexport function weekRangeInclusive(\n  start: DateLike,\n  end: DateLike,\n  firstDayOfWeekIdx?: SyncedPrefs['firstDayOfWeekIdx'],\n): string[] {\n  return _weekRange(start, end, true, firstDayOfWeekIdx);\n}\n\nexport function _range(\n  start: DateLike,\n  end: DateLike,\n  inclusive = false,\n): string[] {\n  const months: string[] = [];\n  let month = monthFromDate(start);\n  const endMonth = monthFromDate(end);\n  while (d.isBefore(_parse(month), _parse(endMonth))) {\n    months.push(month);\n    month = addMonths(month, 1);\n  }\n\n  if (inclusive) {\n    months.push(month);\n  }\n\n  return months;\n}\n\nexport function range(start: DateLike, end: DateLike): string[] {\n  return _range(start, end);\n}\n\nexport function rangeInclusive(start: DateLike, end: DateLike): string[] {\n  return _range(start, end, true);\n}\n\nexport function _dayRange(\n  start: DateLike,\n  end: DateLike,\n  inclusive = false,\n): string[] {\n  const days: string[] = [];\n  let day = start;\n  while (d.isBefore(_parse(day), _parse(end))) {\n    days.push(dayFromDate(day));\n    day = addDays(day, 1);\n  }\n\n  if (inclusive) {\n    days.push(dayFromDate(day));\n  }\n\n  return days;\n}\n\nexport function dayRange(start: DateLike, end: DateLike) {\n  return _dayRange(start, end);\n}\n\nexport function dayRangeInclusive(start: DateLike, end: DateLike) {\n  return _dayRange(start, end, true);\n}\n\nexport function getMonthFromIndex(year: string, monthIndex: number) {\n  const formatMonth = `${monthIndex + 1}`.padStart(2, '0');\n  return `${year}-${formatMonth}`;\n}\n\nexport function getMonthIndex(month: string): number {\n  return parseInt(month.slice(5, 7)) - 1;\n}\n\nexport function getYear(month: string): string {\n  return month.slice(0, 4);\n}\n\nexport function getMonth(day: string): string {\n  return day.slice(0, 7);\n}\n\nexport function getDay(day: string): number {\n  return Number(d.format(_parse(day), 'dd'));\n}\n\nexport function getMonthEnd(day: string): string {\n  return subDays(nextMonth(day.slice(0, 7)) + '-01', 1);\n}\n\nexport function getWeekEnd(\n  date: DateLike,\n  firstDayOfWeekIdx?: SyncedPrefs['firstDayOfWeekIdx'],\n): string {\n  const converted = parseInt(firstDayOfWeekIdx || '0') as Day;\n  return d.format(\n    _parse(d.endOfWeek(_parse(date), { weekStartsOn: converted })),\n    'yyyy-MM-dd',\n  );\n}\n\nexport function getYearStart(month: string): string {\n  return getYear(month) + '-01';\n}\n\nexport function getYearEnd(month: string): string {\n  return getYear(month) + '-12';\n}\n\nexport function sheetForMonth(month: string): string {\n  return 'budget' + month.replace('-', '');\n}\n\nexport function nameForMonth(month: DateLike, locale?: Locale): string {\n  return d.format(_parse(month), 'MMMM ‘yy', { locale });\n}\n\nexport function format(\n  month: DateLike,\n  format: string,\n  locale?: Locale,\n): string {\n  return d.format(_parse(month), format, { locale });\n}\n\nexport function formatDistance(\n  date1: DateLike,\n  date2: DateLike,\n  locale?: Locale,\n  options?: { addSuffix?: boolean; includeSeconds?: boolean },\n): string {\n  return d.formatDistance(_parse(date1), _parse(date2), {\n    locale,\n    ...options,\n  });\n}\n\nexport const getDateFormatRegex = memoizeOne((format: string) => {\n  return new RegExp(\n    format\n      .replace(/d+/g, '\\\\d{1,2}')\n      .replace(/M+/g, '\\\\d{1,2}')\n      .replace(/y+/g, '\\\\d{4}'),\n  );\n});\n\nexport const getDayMonthFormat = memoizeOne((format: string) => {\n  return format\n    .replace(/y+/g, '')\n    .replace(/[^\\w]$/, '')\n    .replace(/^[^\\w]/, '');\n});\n\nexport const getDayMonthRegex = memoizeOne((format: string) => {\n  const regex = format\n    .replace(/y+/g, '')\n    .replace(/[^\\w]$/, '')\n    .replace(/^[^\\w]/, '')\n    .replace(/d+/g, '\\\\d{1,2}')\n    .replace(/M+/g, '\\\\d{1,2}');\n  return new RegExp('^' + regex + '$');\n});\n\nexport const getMonthYearFormat = memoizeOne((format: string) => {\n  return format\n    .replace(/d+/g, '')\n    .replace(/[^\\w]$/, '')\n    .replace(/^[^\\w]/, '')\n    .replace(/\\/\\//, '/')\n    .replace(/\\.\\./, '.')\n    .replace(/--/, '-');\n});\n\nexport const getMonthYearRegex = memoizeOne((format: string) => {\n  const regex = format\n    .replace(/d+/g, '')\n    .replace(/[^\\w]$/, '')\n    .replace(/^[^\\w]/, '')\n    .replace(/\\/\\//, '/')\n    .replace(/M+/g, '\\\\d{1,2}')\n    .replace(/y+/g, '\\\\d{2,4}');\n  return new RegExp('^' + regex + '$');\n});\n\nexport const getShortYearFormat = memoizeOne((format: string) => {\n  return format.replace(/y+/g, 'yy');\n});\n\nexport const getShortYearRegex = memoizeOne((format: string) => {\n  const regex = format\n    .replace(/[^\\w]$/, '')\n    .replace(/^[^\\w]/, '')\n    .replace(/d+/g, '\\\\d{1,2}')\n    .replace(/M+/g, '\\\\d{1,2}')\n    .replace(/y+/g, '\\\\d{2}');\n  return new RegExp('^' + regex + '$');\n});\n","// @ts-strict-ignore\nimport { type Locale, formatDistanceToNow } from 'date-fns';\n\nexport function last<T>(arr: Array<T>) {\n  return arr[arr.length - 1];\n}\n\nexport function getChangedValues<T extends { id?: string }>(obj1: T, obj2: T) {\n  const diff: Partial<T> = {};\n  const keys = Object.keys(obj2);\n  let hasChanged = false;\n\n  // Keep the id field because this is mostly used to diff database\n  // objects\n  if (obj1.id) {\n    diff.id = obj1.id;\n  }\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n\n    if (obj1[key] !== obj2[key]) {\n      diff[key] = obj2[key];\n      hasChanged = true;\n    }\n  }\n\n  return hasChanged ? diff : null;\n}\n\nexport function hasFieldsChanged<T extends object>(\n  obj1: T,\n  obj2: T,\n  fields: Array<keyof T>,\n) {\n  let changed = false;\n  for (let i = 0; i < fields.length; i++) {\n    const field = fields[i];\n    if (obj1[field] !== obj2[field]) {\n      changed = true;\n      break;\n    }\n  }\n  return changed;\n}\n\nexport type Diff<T extends { id: string }> = {\n  added: T[];\n  updated: Partial<T>[];\n  deleted: Pick<T, 'id'>[];\n};\n\nexport function applyChanges<T extends { id: string }>(\n  changes: Diff<T>,\n  items: T[],\n) {\n  items = [...items];\n\n  if (changes.added) {\n    changes.added.forEach(add => {\n      items.push(add);\n    });\n  }\n\n  if (changes.updated) {\n    changes.updated.forEach(({ id, ...fields }) => {\n      const idx = items.findIndex(t => t.id === id);\n      items[idx] = {\n        ...items[idx],\n        ...fields,\n      };\n    });\n  }\n\n  if (changes.deleted) {\n    changes.deleted.forEach(t => {\n      const idx = items.findIndex(t2 => t.id === t2.id);\n      if (idx !== -1) {\n        items.splice(idx, 1);\n      }\n    });\n  }\n\n  return items;\n}\n\nexport function partitionByField<T, K extends keyof T>(data: T[], field: K) {\n  const res = new Map();\n  for (let i = 0; i < data.length; i++) {\n    const item = data[i];\n    const key = item[field];\n\n    const items = res.get(key) || [];\n    items.push(item);\n\n    res.set(key, items);\n  }\n  return res;\n}\n\nexport function groupBy<T, K extends keyof T>(data: T[], field: K) {\n  const res = new Map<T[K], T[]>();\n  for (let i = 0; i < data.length; i++) {\n    const item = data[i];\n    const key = item[field];\n    const existing = res.get(key) || [];\n    res.set(key, existing.concat([item]));\n  }\n  return res;\n}\n\n// This should replace the existing `groupById` function, since a\n// `Map` is better, but we can't swap it out because `Map` has a\n// different API and we need to go through and update everywhere that\n// uses it.\nfunction _groupById<T extends { id: string }>(data: T[]) {\n  const res = new Map<string, T>();\n  for (let i = 0; i < data.length; i++) {\n    const item = data[i];\n    res.set(item.id, item);\n  }\n  return res;\n}\n\nexport function diffItems<T extends { id: string }>(\n  items: T[],\n  newItems: T[],\n): Diff<T> {\n  const grouped = _groupById(items);\n  const newGrouped = _groupById(newItems);\n  const added: T[] = [];\n  const updated: Partial<T>[] = [];\n\n  const deleted: Pick<T, 'id'>[] = items\n    .filter(item => !newGrouped.has(item.id))\n    .map(item => ({ id: item.id }));\n\n  newItems.forEach(newItem => {\n    const item = grouped.get(newItem.id);\n    if (!item) {\n      added.push(newItem);\n    } else {\n      const changes = getChangedValues(item, newItem);\n      if (changes) {\n        updated.push(changes);\n      }\n    }\n  });\n\n  return { added, updated, deleted };\n}\n\nexport function groupById<T extends { id: string }>(\n  data: T[] | null | undefined,\n): Record<string, T> {\n  if (!data) {\n    return {};\n  }\n  const res: { [key: string]: T } = {};\n  for (let i = 0; i < data.length; i++) {\n    const item = data[i];\n    res[item.id] = item;\n  }\n  return res;\n}\n\nexport function setIn(\n  map: Map<string, unknown>,\n  keys: string[],\n  item: unknown,\n): void {\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n\n    if (i === keys.length - 1) {\n      map.set(key, item);\n    } else {\n      if (!map.has(key)) {\n        map.set(key, new Map<string, unknown>());\n      }\n\n      map = map.get(key) as Map<string, unknown>;\n    }\n  }\n}\n\nexport function getIn(map, keys) {\n  let item = map;\n  for (let i = 0; i < keys.length; i++) {\n    item = item.get(keys[i]);\n\n    if (item == null) {\n      return item;\n    }\n  }\n  return item;\n}\n\nexport function fastSetMerge<T>(set1: Set<T>, set2: Set<T>) {\n  const finalSet = new Set(set1);\n  const iter = set2.values();\n  let value = iter.next();\n  while (!value.done) {\n    finalSet.add(value.value);\n    value = iter.next();\n  }\n  return finalSet;\n}\n\nexport function titleFirst(str: string | null | undefined) {\n  if (!str || str.length <= 1) {\n    return str?.toUpperCase() ?? '';\n  }\n  return str[0].toUpperCase() + str.slice(1);\n}\n\nexport function reapplyThousandSeparators(amountText: string) {\n  if (!amountText || typeof amountText !== 'string') {\n    return amountText;\n  }\n\n  const { decimalSeparator, thousandsSeparator } = getNumberFormat();\n  const [integerPartRaw, decimalPart = ''] = amountText.split(decimalSeparator);\n\n  const numericValue = Number(\n    integerPartRaw.replaceAll(thousandsSeparator, ''),\n  );\n  if (isNaN(numericValue)) {\n    return amountText; // Return original if parsing fails\n  }\n\n  const integerPart = numericValue\n    .toLocaleString('en-US')\n    .replaceAll(',', thousandsSeparator);\n  return decimalPart\n    ? integerPart + decimalSeparator + decimalPart\n    : integerPart;\n}\n\nexport function appendDecimals(\n  amountText: string,\n  hideDecimals = false,\n): string {\n  const { decimalSeparator: separator } = getNumberFormat();\n  let result = amountText;\n  if (result.slice(-1) === separator) {\n    result = result.slice(0, -1);\n  }\n  if (!hideDecimals) {\n    result = result.replaceAll(/[,.]/g, '');\n    result = result.replace(/^0+(?!$)/, '');\n    result = result.padStart(3, '0');\n    result = result.slice(0, -2) + separator + result.slice(-2);\n  }\n  return amountToCurrency(currencyToAmount(result));\n}\n\nconst NUMBER_FORMATS = [\n  'comma-dot',\n  'dot-comma',\n  'space-comma',\n  'apostrophe-dot',\n  'comma-dot',\n  'comma-dot-in',\n] as const;\n\ntype NumberFormats = (typeof NUMBER_FORMATS)[number];\n\nfunction isNumberFormat(input: string = ''): input is NumberFormats {\n  return (NUMBER_FORMATS as readonly string[]).includes(input);\n}\n\nexport const numberFormats: Array<{\n  value: NumberFormats;\n  label: string;\n  labelNoFraction: string;\n}> = [\n  { value: 'comma-dot', label: '1,000.33', labelNoFraction: '1,000' },\n  { value: 'dot-comma', label: '1.000,33', labelNoFraction: '1.000' },\n  { value: 'space-comma', label: '1\\xa0000,33', labelNoFraction: '1\\xa0000' },\n  { value: 'apostrophe-dot', label: '1’000.33', labelNoFraction: '1’000' },\n  { value: 'comma-dot-in', label: '1,00,000.33', labelNoFraction: '1,00,000' },\n];\n\nlet numberFormatConfig: {\n  format: NumberFormats;\n  hideFraction: boolean;\n} = {\n  format: 'comma-dot',\n  hideFraction: false,\n};\n\nexport function parseNumberFormat({\n  format,\n  hideFraction,\n}: {\n  format?: string;\n  hideFraction?: string | boolean;\n}) {\n  return {\n    format: isNumberFormat(format) ? format : 'comma-dot',\n    hideFraction: String(hideFraction) === 'true',\n  };\n}\n\nexport function setNumberFormat(config: typeof numberFormatConfig) {\n  numberFormatConfig = config;\n}\n\nexport function getNumberFormat({\n  format = numberFormatConfig.format,\n  hideFraction = numberFormatConfig.hideFraction,\n  decimalPlaces,\n}: {\n  format?: NumberFormats;\n  hideFraction?: boolean;\n  decimalPlaces?: number;\n} = numberFormatConfig) {\n  let locale, thousandsSeparator, decimalSeparator;\n\n  const currentFormat = format || numberFormatConfig.format;\n  const currentHideFraction =\n    typeof hideFraction === 'boolean'\n      ? hideFraction\n      : numberFormatConfig.hideFraction;\n\n  switch (format) {\n    case 'space-comma':\n      locale = 'en-SE';\n      thousandsSeparator = '\\xa0';\n      decimalSeparator = ',';\n      break;\n    case 'dot-comma':\n      locale = 'de-DE';\n      thousandsSeparator = '.';\n      decimalSeparator = ',';\n      break;\n    case 'apostrophe-dot':\n      locale = 'de-CH';\n      thousandsSeparator = '’';\n      decimalSeparator = '.';\n      break;\n    case 'comma-dot-in':\n      locale = 'en-IN';\n      thousandsSeparator = ',';\n      decimalSeparator = '.';\n      break;\n    case 'comma-dot':\n    default:\n      locale = 'en-US';\n      thousandsSeparator = ',';\n      decimalSeparator = '.';\n  }\n\n  const fractionDigitsOptions: {\n    minimumFractionDigits: number;\n    maximumFractionDigits: number;\n  } =\n    typeof decimalPlaces === 'number'\n      ? {\n          minimumFractionDigits: decimalPlaces,\n          maximumFractionDigits: decimalPlaces,\n        }\n      : {\n          minimumFractionDigits: currentHideFraction ? 0 : 2,\n          maximumFractionDigits: currentHideFraction ? 0 : 2,\n        };\n\n  return {\n    value: currentFormat,\n    thousandsSeparator,\n    decimalSeparator,\n    formatter: new Intl.NumberFormat(locale, fractionDigitsOptions),\n  };\n}\n\n// Number utilities\n\n/**\n * The exact amount.\n */\nexport type Amount = number;\n/**\n * The exact amount that is formatted based on the configured number format.\n * For example, 123.45 would be '123.45' or '123,45'.\n */\nexport type CurrencyAmount = string;\n/**\n * The amount with the decimal point removed.\n * For example, 123.45 would be 12345.\n */\nexport type IntegerAmount = number;\n\n// We dont use `Number.MAX_SAFE_NUMBER` and such here because those\n// numbers are so large that it's not safe to convert them to floats\n// (i.e. N / 100). For example, `9007199254740987 / 100 ===\n// 90071992547409.88`. While the internal arithemetic would be correct\n// because we always do that on numbers, the app would potentially\n// display wrong numbers. Instead of `2**53` we use `2**51` which\n// gives division more room to be correct\nconst MAX_SAFE_NUMBER = 2 ** 51 - 1;\nconst MIN_SAFE_NUMBER = -MAX_SAFE_NUMBER;\n\nexport function safeNumber(value: number) {\n  if (!Number.isInteger(value)) {\n    throw new Error(\n      'safeNumber: number is not an integer: ' + JSON.stringify(value),\n    );\n  }\n  if (value > MAX_SAFE_NUMBER || value < MIN_SAFE_NUMBER) {\n    throw new Error(\n      'safeNumber: can’t safely perform arithmetic with number: ' + value,\n    );\n  }\n  return value;\n}\n\nexport function toRelaxedNumber(currencyAmount: CurrencyAmount): Amount {\n  return integerToAmount(currencyToInteger(currencyAmount) || 0);\n}\n\nexport function integerToCurrency(\n  integerAmount: IntegerAmount,\n  formatter = getNumberFormat().formatter,\n  decimalPlaces: number = 2,\n) {\n  const divisor = Math.pow(10, decimalPlaces);\n  const amount = safeNumber(integerAmount) / divisor;\n\n  return formatter.format(amount);\n}\n\nexport function amountToCurrency(amount: Amount): CurrencyAmount {\n  return getNumberFormat().formatter.format(amount);\n}\n\nexport function amountToCurrencyNoDecimal(amount: Amount): CurrencyAmount {\n  return getNumberFormat({\n    ...numberFormatConfig,\n    hideFraction: true,\n  }).formatter.format(amount);\n}\n\nexport function currencyToAmount(currencyAmount: string): Amount | null {\n  let integer, fraction;\n\n  // match the last dot or comma in the string\n  const match = currencyAmount.match(/[,.](?=[^.,]*$)/);\n\n  if (\n    !match ||\n    (match[0] === getNumberFormat().thousandsSeparator &&\n      match.index + 4 <= currencyAmount.length)\n  ) {\n    fraction = null;\n    integer = currencyAmount.replace(/[^\\d-]/g, '');\n  } else {\n    integer = currencyAmount.slice(0, match.index).replace(/[^\\d-]/g, '');\n    fraction = currencyAmount.slice(match.index + 1);\n  }\n\n  const amount = parseFloat(integer + '.' + fraction);\n  return isNaN(amount) ? null : amount;\n}\n\nexport function currencyToInteger(\n  currencyAmount: CurrencyAmount,\n): IntegerAmount | null {\n  const amount = currencyToAmount(currencyAmount);\n  return amount == null ? null : amountToInteger(amount);\n}\n\nexport function stringToInteger(str: string): number | null {\n  const amount = parseInt(str.replace(/[^-0-9.,]/g, ''));\n  if (!isNaN(amount)) {\n    return amount;\n  }\n  return null;\n}\n\nexport function amountToInteger(\n  amount: Amount,\n  decimalPlaces: number = 2,\n): IntegerAmount {\n  const multiplier = Math.pow(10, decimalPlaces);\n  return Math.round(amount * multiplier);\n}\n\nexport function integerToAmount(\n  integerAmount: IntegerAmount,\n  decimalPlaces: number = 2,\n): Amount {\n  const divisor = Math.pow(10, decimalPlaces);\n  return integerAmount / divisor;\n}\n\n// This is used when the input format could be anything (from\n// financial files and we don't want to parse based on the user's\n// number format, because the user could be importing from many\n// currencies. We extract out the numbers and just ignore separators.\nexport function looselyParseAmount(amount: string) {\n  function safeNumber(v: number): null | number {\n    if (isNaN(v)) {\n      return null;\n    }\n\n    const value = v * 100;\n    if (value > MAX_SAFE_NUMBER || value < MIN_SAFE_NUMBER) {\n      return null;\n    }\n\n    return v;\n  }\n\n  function extractNumbers(v: string): string {\n    return v.replace(/[^0-9-]/g, '');\n  }\n\n  if (amount.startsWith('(') && amount.endsWith(')')) {\n    amount = amount.replace('(', '-').replace(')', '');\n  }\n\n  // Look for a decimal marker, then look for either 1-2 or 4-9 decimal places.\n  // This avoids matching against 3 places which may not actually be decimal\n  const m = amount.match(/[.,]([^.,]{4,9}|[^.,]{1,2})$/);\n  if (!m || m.index === undefined) {\n    return safeNumber(parseFloat(extractNumbers(amount)));\n  }\n\n  const left = extractNumbers(amount.slice(0, m.index));\n  const right = extractNumbers(amount.slice(m.index + 1));\n\n  return safeNumber(parseFloat(left + '.' + right));\n}\n\nexport function sortByKey<T>(arr: T[], key: keyof T): T[] {\n  return [...arr].sort((item1, item2) => {\n    if (item1[key] < item2[key]) {\n      return -1;\n    } else if (item1[key] > item2[key]) {\n      return 1;\n    }\n    return 0;\n  });\n}\n\n// Date utilities\n\nexport function tsToRelativeTime(\n  ts: string | null,\n  locale: Locale,\n  options: {\n    capitalize: boolean;\n  } = { capitalize: false },\n): string {\n  if (!ts) return 'Unknown';\n\n  const parsed = new Date(parseInt(ts, 10));\n\n  let distance = formatDistanceToNow(parsed, { addSuffix: true, locale });\n\n  if (options.capitalize) {\n    distance = distance.charAt(0).toUpperCase() + distance.slice(1);\n  }\n\n  return distance;\n}\n","// @ts-strict-ignore\nimport mitt, { type Emitter } from 'mitt';\n\nimport { captureException } from '../platform/exceptions';\nimport { ServerEvents } from '../types/server-events';\n\n// This is a simple helper abstraction for defining methods exposed to\n// the client. It doesn't do much, but checks for naming conflicts and\n// makes it cleaner to combine methods. We call a group of related\n// methods an \"app\".\n\ntype Events = {\n  sync: ServerEvents['sync-event'];\n  'load-budget': { id: string };\n};\n\ntype UnlistenService = () => void;\ntype Service = () => UnlistenService;\n\nclass App<Handlers> {\n  events: Emitter<Events>;\n  handlers: Handlers;\n  services: Service[];\n  unlistenServices: UnlistenService[];\n\n  constructor() {\n    this.handlers = {} as Handlers;\n    this.services = [];\n    this.events = mitt<Events>();\n    this.unlistenServices = [];\n  }\n\n  method<Name extends string & keyof Handlers>(\n    name: Name,\n    func: Handlers[Name],\n  ) {\n    if (this.handlers[name] != null) {\n      throw new Error(\n        'Conflicting method name, names must be globally unique: ' + name,\n      );\n    }\n    this.handlers[name] = func;\n  }\n\n  service(func: Service) {\n    this.services.push(func);\n  }\n\n  combine(...apps) {\n    for (const app of apps) {\n      Object.keys(app.handlers).forEach(name => {\n        this.method(name as string & keyof Handlers, app.handlers[name]);\n      });\n\n      app.services.forEach(service => {\n        this.service(service);\n      });\n\n      for (const [name, listeners] of app.events.all.entries()) {\n        for (const listener of listeners) {\n          this.events.on(name, listener);\n        }\n      }\n    }\n  }\n\n  startServices() {\n    if (this.unlistenServices.length > 0) {\n      captureException(\n        new Error(\n          'App: startServices called while services are already running',\n        ),\n      );\n    }\n    this.unlistenServices = this.services.map(service => service());\n  }\n\n  stopServices() {\n    this.unlistenServices.forEach(unlisten => {\n      if (unlisten) {\n        unlisten();\n      }\n    });\n    this.unlistenServices = [];\n  }\n}\n\nexport function createApp<T>() {\n  return new App<T>();\n}\n","// source: sync.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = globalThis;\n\ngoog.exportSymbol('proto.EncryptedData', null, global);\ngoog.exportSymbol('proto.Message', null, global);\ngoog.exportSymbol('proto.MessageEnvelope', null, global);\ngoog.exportSymbol('proto.SyncRequest', null, global);\ngoog.exportSymbol('proto.SyncResponse', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.EncryptedData = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.EncryptedData, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.EncryptedData.displayName = 'proto.EncryptedData';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Message = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Message, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.Message.displayName = 'proto.Message';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.MessageEnvelope = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.MessageEnvelope, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.MessageEnvelope.displayName = 'proto.MessageEnvelope';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.SyncRequest = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.SyncRequest.repeatedFields_, null);\n};\ngoog.inherits(proto.SyncRequest, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.SyncRequest.displayName = 'proto.SyncRequest';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.SyncResponse = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.SyncResponse.repeatedFields_, null);\n};\ngoog.inherits(proto.SyncResponse, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.SyncResponse.displayName = 'proto.SyncResponse';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.EncryptedData.prototype.toObject = function(opt_includeInstance) {\n  return proto.EncryptedData.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.EncryptedData} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.EncryptedData.toObject = function(includeInstance, msg) {\n  var f, obj = {\niv: msg.getIv_asB64(),\nauthtag: msg.getAuthtag_asB64(),\ndata: msg.getData_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.EncryptedData}\n */\nproto.EncryptedData.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.EncryptedData;\n  return proto.EncryptedData.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.EncryptedData} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.EncryptedData}\n */\nproto.EncryptedData.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setIv(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setAuthtag(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setData(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.EncryptedData.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.EncryptedData.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.EncryptedData} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.EncryptedData.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getIv_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getAuthtag_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n  f = message.getData_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes iv = 1;\n * @return {!(string|Uint8Array)}\n */\nproto.EncryptedData.prototype.getIv = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes iv = 1;\n * This is a type-conversion wrapper around `getIv()`\n * @return {string}\n */\nproto.EncryptedData.prototype.getIv_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getIv()));\n};\n\n\n/**\n * optional bytes iv = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getIv()`\n * @return {!Uint8Array}\n */\nproto.EncryptedData.prototype.getIv_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getIv()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.EncryptedData} returns this\n */\nproto.EncryptedData.prototype.setIv = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional bytes authTag = 2;\n * @return {!(string|Uint8Array)}\n */\nproto.EncryptedData.prototype.getAuthtag = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes authTag = 2;\n * This is a type-conversion wrapper around `getAuthtag()`\n * @return {string}\n */\nproto.EncryptedData.prototype.getAuthtag_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getAuthtag()));\n};\n\n\n/**\n * optional bytes authTag = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getAuthtag()`\n * @return {!Uint8Array}\n */\nproto.EncryptedData.prototype.getAuthtag_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getAuthtag()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.EncryptedData} returns this\n */\nproto.EncryptedData.prototype.setAuthtag = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n/**\n * optional bytes data = 3;\n * @return {!(string|Uint8Array)}\n */\nproto.EncryptedData.prototype.getData = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes data = 3;\n * This is a type-conversion wrapper around `getData()`\n * @return {string}\n */\nproto.EncryptedData.prototype.getData_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getData()));\n};\n\n\n/**\n * optional bytes data = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getData()`\n * @return {!Uint8Array}\n */\nproto.EncryptedData.prototype.getData_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getData()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.EncryptedData} returns this\n */\nproto.EncryptedData.prototype.setData = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Message.prototype.toObject = function(opt_includeInstance) {\n  return proto.Message.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Message} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Message.toObject = function(includeInstance, msg) {\n  var f, obj = {\ndataset: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\nrow: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\ncolumn: jspb.Message.getFieldWithDefault(msg, 3, \"\"),\nvalue: jspb.Message.getFieldWithDefault(msg, 4, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Message}\n */\nproto.Message.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Message;\n  return proto.Message.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Message} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Message}\n */\nproto.Message.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setDataset(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setRow(value);\n      break;\n    case 3:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setColumn(value);\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setValue(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Message.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Message.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Message} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Message.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getDataset();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getRow();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getColumn();\n  if (f.length > 0) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f = message.getValue();\n  if (f.length > 0) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string dataset = 1;\n * @return {string}\n */\nproto.Message.prototype.getDataset = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.Message} returns this\n */\nproto.Message.prototype.setDataset = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string row = 2;\n * @return {string}\n */\nproto.Message.prototype.getRow = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.Message} returns this\n */\nproto.Message.prototype.setRow = function(value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional string column = 3;\n * @return {string}\n */\nproto.Message.prototype.getColumn = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.Message} returns this\n */\nproto.Message.prototype.setColumn = function(value) {\n  return jspb.Message.setProto3StringField(this, 3, value);\n};\n\n\n/**\n * optional string value = 4;\n * @return {string}\n */\nproto.Message.prototype.getValue = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.Message} returns this\n */\nproto.Message.prototype.setValue = function(value) {\n  return jspb.Message.setProto3StringField(this, 4, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.MessageEnvelope.prototype.toObject = function(opt_includeInstance) {\n  return proto.MessageEnvelope.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.MessageEnvelope} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.MessageEnvelope.toObject = function(includeInstance, msg) {\n  var f, obj = {\ntimestamp: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\nisencrypted: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),\ncontent: msg.getContent_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.MessageEnvelope}\n */\nproto.MessageEnvelope.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.MessageEnvelope;\n  return proto.MessageEnvelope.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.MessageEnvelope} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.MessageEnvelope}\n */\nproto.MessageEnvelope.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setTimestamp(value);\n      break;\n    case 2:\n      var value = /** @type {boolean} */ (reader.readBool());\n      msg.setIsencrypted(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setContent(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.MessageEnvelope.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.MessageEnvelope.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.MessageEnvelope} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.MessageEnvelope.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getTimestamp();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getIsencrypted();\n  if (f) {\n    writer.writeBool(\n      2,\n      f\n    );\n  }\n  f = message.getContent_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string timestamp = 1;\n * @return {string}\n */\nproto.MessageEnvelope.prototype.getTimestamp = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.MessageEnvelope} returns this\n */\nproto.MessageEnvelope.prototype.setTimestamp = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional bool isEncrypted = 2;\n * @return {boolean}\n */\nproto.MessageEnvelope.prototype.getIsencrypted = function() {\n  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));\n};\n\n\n/**\n * @param {boolean} value\n * @return {!proto.MessageEnvelope} returns this\n */\nproto.MessageEnvelope.prototype.setIsencrypted = function(value) {\n  return jspb.Message.setProto3BooleanField(this, 2, value);\n};\n\n\n/**\n * optional bytes content = 3;\n * @return {!(string|Uint8Array)}\n */\nproto.MessageEnvelope.prototype.getContent = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes content = 3;\n * This is a type-conversion wrapper around `getContent()`\n * @return {string}\n */\nproto.MessageEnvelope.prototype.getContent_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getContent()));\n};\n\n\n/**\n * optional bytes content = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getContent()`\n * @return {!Uint8Array}\n */\nproto.MessageEnvelope.prototype.getContent_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getContent()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.MessageEnvelope} returns this\n */\nproto.MessageEnvelope.prototype.setContent = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.SyncRequest.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.SyncRequest.prototype.toObject = function(opt_includeInstance) {\n  return proto.SyncRequest.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.SyncRequest} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.SyncRequest.toObject = function(includeInstance, msg) {\n  var f, obj = {\nmessagesList: jspb.Message.toObjectList(msg.getMessagesList(),\n    proto.MessageEnvelope.toObject, includeInstance),\nfileid: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\ngroupid: jspb.Message.getFieldWithDefault(msg, 3, \"\"),\nkeyid: jspb.Message.getFieldWithDefault(msg, 5, \"\"),\nsince: jspb.Message.getFieldWithDefault(msg, 6, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.SyncRequest}\n */\nproto.SyncRequest.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.SyncRequest;\n  return proto.SyncRequest.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.SyncRequest} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.SyncRequest}\n */\nproto.SyncRequest.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.MessageEnvelope;\n      reader.readMessage(value,proto.MessageEnvelope.deserializeBinaryFromReader);\n      msg.addMessages(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setFileid(value);\n      break;\n    case 3:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setGroupid(value);\n      break;\n    case 5:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setKeyid(value);\n      break;\n    case 6:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setSince(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.SyncRequest.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.SyncRequest.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.SyncRequest} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.SyncRequest.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getMessagesList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      1,\n      f,\n      proto.MessageEnvelope.serializeBinaryToWriter\n    );\n  }\n  f = message.getFileid();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getGroupid();\n  if (f.length > 0) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f = message.getKeyid();\n  if (f.length > 0) {\n    writer.writeString(\n      5,\n      f\n    );\n  }\n  f = message.getSince();\n  if (f.length > 0) {\n    writer.writeString(\n      6,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated MessageEnvelope messages = 1;\n * @return {!Array<!proto.MessageEnvelope>}\n */\nproto.SyncRequest.prototype.getMessagesList = function() {\n  return /** @type{!Array<!proto.MessageEnvelope>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.MessageEnvelope, 1));\n};\n\n\n/**\n * @param {!Array<!proto.MessageEnvelope>} value\n * @return {!proto.SyncRequest} returns this\n*/\nproto.SyncRequest.prototype.setMessagesList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n\n\n/**\n * @param {!proto.MessageEnvelope=} opt_value\n * @param {number=} opt_index\n * @return {!proto.MessageEnvelope}\n */\nproto.SyncRequest.prototype.addMessages = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.MessageEnvelope, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.SyncRequest} returns this\n */\nproto.SyncRequest.prototype.clearMessagesList = function() {\n  return this.setMessagesList([]);\n};\n\n\n/**\n * optional string fileId = 2;\n * @return {string}\n */\nproto.SyncRequest.prototype.getFileid = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.SyncRequest} returns this\n */\nproto.SyncRequest.prototype.setFileid = function(value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional string groupId = 3;\n * @return {string}\n */\nproto.SyncRequest.prototype.getGroupid = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.SyncRequest} returns this\n */\nproto.SyncRequest.prototype.setGroupid = function(value) {\n  return jspb.Message.setProto3StringField(this, 3, value);\n};\n\n\n/**\n * optional string keyId = 5;\n * @return {string}\n */\nproto.SyncRequest.prototype.getKeyid = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.SyncRequest} returns this\n */\nproto.SyncRequest.prototype.setKeyid = function(value) {\n  return jspb.Message.setProto3StringField(this, 5, value);\n};\n\n\n/**\n * optional string since = 6;\n * @return {string}\n */\nproto.SyncRequest.prototype.getSince = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.SyncRequest} returns this\n */\nproto.SyncRequest.prototype.setSince = function(value) {\n  return jspb.Message.setProto3StringField(this, 6, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.SyncResponse.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.SyncResponse.prototype.toObject = function(opt_includeInstance) {\n  return proto.SyncResponse.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.SyncResponse} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.SyncResponse.toObject = function(includeInstance, msg) {\n  var f, obj = {\nmessagesList: jspb.Message.toObjectList(msg.getMessagesList(),\n    proto.MessageEnvelope.toObject, includeInstance),\nmerkle: jspb.Message.getFieldWithDefault(msg, 2, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.SyncResponse}\n */\nproto.SyncResponse.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.SyncResponse;\n  return proto.SyncResponse.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.SyncResponse} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.SyncResponse}\n */\nproto.SyncResponse.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.MessageEnvelope;\n      reader.readMessage(value,proto.MessageEnvelope.deserializeBinaryFromReader);\n      msg.addMessages(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setMerkle(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.SyncResponse.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.SyncResponse.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.SyncResponse} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.SyncResponse.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getMessagesList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      1,\n      f,\n      proto.MessageEnvelope.serializeBinaryToWriter\n    );\n  }\n  f = message.getMerkle();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated MessageEnvelope messages = 1;\n * @return {!Array<!proto.MessageEnvelope>}\n */\nproto.SyncResponse.prototype.getMessagesList = function() {\n  return /** @type{!Array<!proto.MessageEnvelope>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.MessageEnvelope, 1));\n};\n\n\n/**\n * @param {!Array<!proto.MessageEnvelope>} value\n * @return {!proto.SyncResponse} returns this\n*/\nproto.SyncResponse.prototype.setMessagesList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n\n\n/**\n * @param {!proto.MessageEnvelope=} opt_value\n * @param {number=} opt_index\n * @return {!proto.MessageEnvelope}\n */\nproto.SyncResponse.prototype.addMessages = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.MessageEnvelope, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.SyncResponse} returns this\n */\nproto.SyncResponse.prototype.clearMessagesList = function() {\n  return this.setMessagesList([]);\n};\n\n\n/**\n * optional string merkle = 2;\n * @return {string}\n */\nproto.SyncResponse.prototype.getMerkle = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.SyncResponse} returns this\n */\nproto.SyncResponse.prototype.setMerkle = function(value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\ngoog.object.extend(exports, proto);\n","// TODO: Ok, several problems:\n//\n// * If nothing matches between two merkle trees, we should fallback\n// * to the last window instead the front one (use 0 instead of the\n// * key)\n//\n// * Need to check to make sure if account exists when handling\n// * transaction changes in syncing\n\nimport { Timestamp } from './timestamp';\n\n/**\n * Represents a node within a trinary radix trie.\n */\nexport type TrieNode = {\n  '0'?: TrieNode;\n  '1'?: TrieNode;\n  '2'?: TrieNode;\n  hash?: number;\n};\n\ntype NumberTrieNodeKey = keyof Omit<TrieNode, 'hash'>;\n\nexport function emptyTrie(): TrieNode {\n  return { hash: 0 };\n}\n\nfunction isNumberTrieNodeKey(input: string): input is NumberTrieNodeKey {\n  return ['0', '1', '2'].includes(input);\n}\n\nexport function getKeys(trie: TrieNode): NumberTrieNodeKey[] {\n  return Object.keys(trie).filter(isNumberTrieNodeKey);\n}\n\nexport function keyToTimestamp(key: string): number {\n  // 16 is the length of the base 3 value of the current time in\n  // minutes. Ensure it's padded to create the full value\n  const fullkey = key + '0'.repeat(16 - key.length);\n\n  // Parse the base 3 representation\n  return parseInt(fullkey, 3) * 1000 * 60;\n}\n\n/**\n * Mutates `trie` to insert a node at `timestamp`\n */\nexport function insert(trie: TrieNode, timestamp: Timestamp) {\n  const hash = timestamp.hash();\n  const key = Number(Math.floor(timestamp.millis() / 1000 / 60)).toString(3);\n\n  trie = Object.assign({}, trie, { hash: (trie.hash || 0) ^ hash });\n  return insertKey(trie, key, hash);\n}\n\nfunction insertKey(trie: TrieNode, key: string, hash: number): TrieNode {\n  if (key.length === 0) {\n    return trie;\n  }\n  const c = key[0];\n  const t = isNumberTrieNodeKey(c) ? trie[c] : undefined;\n  const n = t || {};\n  return Object.assign({}, trie, {\n    [c]: Object.assign({}, n, insertKey(n, key.slice(1), hash), {\n      hash: (n.hash || 0) ^ hash,\n    }),\n  });\n}\n\nexport function build(timestamps: Timestamp[]) {\n  const trie = emptyTrie();\n  for (const timestamp of timestamps) {\n    insert(trie, timestamp);\n  }\n  return trie;\n}\n\nexport function diff(trie1: TrieNode, trie2: TrieNode): number | null {\n  if (trie1.hash === trie2.hash) {\n    return null;\n  }\n\n  let node1 = trie1;\n  let node2 = trie2;\n  let k = '';\n\n  // This loop will eventually stop when it traverses down to find\n  // where the hashes differ, or otherwise when there are no leaves\n  // left (this shouldn't happen, if that's the case the hash check at\n  // the top of this function should pass)\n  while (1) {\n    const keyset = new Set([...getKeys(node1), ...getKeys(node2)]);\n    const keys = [...keyset.values()];\n    keys.sort();\n\n    let diffkey: null | '0' | '1' | '2' = null;\n\n    // Traverse down the trie through keys that aren't the same. We\n    // traverse down the keys in order. Stop in two cases: either one\n    // of the nodes doesn't have the key, or a different key isn't\n    // found. For the former case, we have to that because pruning is\n    // lossy. We don't know if we've pruned off a changed key so we\n    // can't traverse down anymore. For the latter case, it means two\n    // things: either we've hit the bottom of the tree, or the changed\n    // key has been pruned off. In the latter case we have a \"partial\"\n    // key and will fill the rest with 0s. Note that if multiple older\n    // messages were added into one trie, it's possible we will\n    // generate a time that only encompasses *some* of the those\n    // messages. Pruning is lossy, and we traverse down the left-most\n    // changed time that we know of, because of pruning it might take\n    // multiple passes to sync up a trie.\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n\n      const next1 = node1[key];\n      const next2 = node2[key];\n\n      if (!next1 || !next2) {\n        break;\n      }\n\n      if (next1.hash !== next2.hash) {\n        diffkey = key;\n        break;\n      }\n    }\n\n    if (!diffkey) {\n      return keyToTimestamp(k);\n    }\n\n    k += diffkey;\n    node1 = node1[diffkey] || emptyTrie();\n    node2 = node2[diffkey] || emptyTrie();\n  }\n\n  // eslint-disable-next-line no-unreachable\n  return null;\n}\n\nexport function prune(trie: TrieNode, n = 2): TrieNode {\n  // Do nothing if empty\n  if (!trie.hash) {\n    return trie;\n  }\n\n  const keys = getKeys(trie);\n  keys.sort();\n\n  const next: TrieNode = { hash: trie.hash };\n\n  // Prune child nodes.\n  for (const k of keys.slice(-n)) {\n    const node = trie[k];\n\n    if (!node) {\n      throw new Error(`TrieNode for key ${k} could not be found`);\n    }\n\n    next[k] = prune(node, n);\n  }\n\n  return next;\n}\n\nexport function debug(trie: TrieNode, k = '', indent = 0): string {\n  const str =\n    ' '.repeat(indent) +\n    (k !== '' ? `k: ${k} ` : '') +\n    `hash: ${trie.hash || '(empty)'}\\n`;\n  return (\n    str +\n    getKeys(trie)\n      .map(key => {\n        const node = trie[key];\n        if (!node) return '';\n        return debug(node, key, indent + 2);\n      })\n      .join('')\n  );\n}\n","import murmurhash from 'murmurhash';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { TrieNode } from './merkle';\n\n/**\n * Hybrid Unique Logical Clock (HULC) timestamp generator\n *\n * Globally-unique, monotonic timestamps are generated from the\n *    combination of the unreliable system time, a counter, and an\n *    identifier for the current node (instance, machine, process, etc.).\n *    These timestamps can accommodate clock stuttering (duplicate values),\n *    regression, and node differences within the configured maximum drift.\n *\n * In order to generate timestamps locally or for transmission to another\n *    node, use the send() method. For global causality, timestamps must\n *    be included in each message processed by the system. Whenever a\n *    message is received, its timestamp must be passed to the recv()\n *    method.\n *\n * Timestamps serialize into a 46-character collatable string\n *    example: 2015-04-24T22:23:42.123Z-1000-0123456789ABCDEF\n *    example: 2015-04-24T22:23:42.123Z-1000-A219E7A71CC18912\n *\n * The 64-bit hybrid clock is based on the HLC specification,\n * http://www.cse.buffalo.edu/tech-reports/2014-04.pdf\n */\n\nexport type Clock = {\n  timestamp: MutableTimestamp;\n  merkle: TrieNode;\n};\n\n// A mutable global clock\nlet clock: Clock;\n\nexport function setClock(clock_: Clock): void {\n  clock = clock_;\n}\n\nexport function getClock(): Clock {\n  return clock;\n}\n\nexport function makeClock(timestamp: Timestamp, merkle: TrieNode = {}) {\n  return { timestamp: MutableTimestamp.from(timestamp), merkle };\n}\n\nexport function serializeClock(clock: Clock): string {\n  return JSON.stringify({\n    timestamp: clock.timestamp.toString(),\n    merkle: clock.merkle,\n  });\n}\n\nexport function deserializeClock(clock: string): Clock {\n  let data;\n  try {\n    data = JSON.parse(clock);\n  } catch (e) {\n    data = {\n      timestamp: '1970-01-01T00:00:00.000Z-0000-' + makeClientId(),\n      merkle: {},\n    };\n  }\n\n  const ts = Timestamp.parse(data.timestamp);\n\n  if (!ts) {\n    throw new Timestamp.InvalidError(data.timestamp);\n  }\n\n  return {\n    timestamp: MutableTimestamp.from(ts),\n    merkle: data.merkle,\n  };\n}\n\nexport function makeClientId() {\n  return uuidv4().replace(/-/g, '').slice(-16);\n}\n\nconst config = {\n  // Allow 5 minutes of clock drift\n  maxDrift: 5 * 60 * 1000,\n};\n\nconst MAX_COUNTER = parseInt('0xFFFF');\nconst MAX_NODE_LENGTH = 16;\n\n/**\n * timestamp instance class\n */\nexport class Timestamp {\n  _state: { millis: number; counter: number; node: string };\n\n  constructor(millis: number, counter: number, node: string) {\n    this._state = {\n      millis,\n      counter,\n      node,\n    };\n  }\n\n  valueOf() {\n    return this.toString();\n  }\n\n  toString() {\n    return [\n      new Date(this.millis()).toISOString(),\n      ('0000' + this.counter().toString(16).toUpperCase()).slice(-4),\n      ('0000000000000000' + this.node()).slice(-16),\n    ].join('-');\n  }\n\n  millis() {\n    return this._state.millis;\n  }\n\n  counter() {\n    return this._state.counter;\n  }\n\n  node() {\n    return this._state.node;\n  }\n\n  hash() {\n    return murmurhash.v3(this.toString());\n  }\n\n  // Timestamp generator initialization\n  // * sets the node ID to an arbitrary value\n  // * useful for mocking/unit testing\n  static init(options: { maxDrift?: number; node?: string } = {}) {\n    if (options.maxDrift) {\n      config.maxDrift = options.maxDrift;\n    }\n\n    setClock(\n      makeClock(\n        new Timestamp(\n          0,\n          0,\n          options.node\n            ? ('0000000000000000' + options.node).toString().slice(-16)\n            : '',\n        ),\n      ),\n    );\n  }\n\n  /**\n   * maximum timestamp\n   */\n\n  static max = Timestamp.parse(\n    '9999-12-31T23:59:59.999Z-FFFF-FFFFFFFFFFFFFFFF',\n  )!;\n\n  /**\n   * timestamp parsing\n   * converts a fixed-length string timestamp to the structured value\n   */\n  static parse(timestamp: string | Timestamp): Timestamp | null {\n    if (timestamp instanceof Timestamp) {\n      return timestamp;\n    }\n    if (typeof timestamp === 'string') {\n      const parts = timestamp.split('-');\n      if (parts && parts.length === 5) {\n        const millis = Date.parse(parts.slice(0, 3).join('-')).valueOf();\n        const counter = parseInt(parts[3], 16);\n        const node = parts[4];\n        if (\n          !isNaN(millis) &&\n          millis >= 0 &&\n          !isNaN(counter) &&\n          counter <= MAX_COUNTER &&\n          typeof node === 'string' &&\n          node.length <= MAX_NODE_LENGTH\n        ) {\n          return new Timestamp(millis, counter, node);\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Timestamp send. Generates a unique, monotonic timestamp suitable\n   * for transmission to another system in string format\n   */\n  static send(): Timestamp | null {\n    if (!clock) {\n      return null;\n    }\n\n    // retrieve the local wall time\n    const phys = Date.now();\n\n    // unpack the clock.timestamp logical time and counter\n    const lOld = clock.timestamp.millis();\n    const cOld = clock.timestamp.counter();\n\n    // calculate the next logical time and counter\n    // * ensure that the logical time never goes backward\n    // * increment the counter if phys time does not advance\n    const lNew = Math.max(lOld, phys);\n    const cNew = lOld === lNew ? cOld + 1 : 0;\n\n    // check the result for drift and counter overflow\n    if (lNew - phys > config.maxDrift) {\n      throw new Timestamp.ClockDriftError(lNew, phys, config.maxDrift);\n    }\n    if (cNew > MAX_COUNTER) {\n      throw new Timestamp.OverflowError();\n    }\n\n    // repack the logical time/counter\n    clock.timestamp.setMillis(lNew);\n    clock.timestamp.setCounter(cNew);\n\n    return new Timestamp(\n      clock.timestamp.millis(),\n      clock.timestamp.counter(),\n      clock.timestamp.node(),\n    );\n  }\n\n  // Timestamp receive. Parses and merges a timestamp from a remote\n  // system with the local timeglobal uniqueness and monotonicity are\n  // preserved\n  static recv(msg: Timestamp): Timestamp | null {\n    if (!clock) {\n      return null;\n    }\n\n    // retrieve the local wall time\n    const phys = Date.now();\n\n    // unpack the message wall time/counter\n    const lMsg = msg.millis();\n    const cMsg = msg.counter();\n\n    // assert the node id and remote clock drift\n    // if (msg.node() === clock.timestamp.node()) {\n    //   throw new Timestamp.DuplicateNodeError(clock.timestamp.node());\n    // }\n    if (lMsg - phys > config.maxDrift) {\n      throw new Timestamp.ClockDriftError();\n    }\n\n    // unpack the clock.timestamp logical time and counter\n    const lOld = clock.timestamp.millis();\n    const cOld = clock.timestamp.counter();\n\n    // calculate the next logical time and counter\n    // . ensure that the logical time never goes backward\n    // . if all logical clocks are equal, increment the max counter\n    // . if max = old > message, increment local counter\n    // . if max = messsage > old, increment message counter\n    // . otherwise, clocks are monotonic, reset counter\n    const lNew = Math.max(Math.max(lOld, phys), lMsg);\n    const cNew =\n      lNew === lOld && lNew === lMsg\n        ? Math.max(cOld, cMsg) + 1\n        : lNew === lOld\n          ? cOld + 1\n          : lNew === lMsg\n            ? cMsg + 1\n            : 0;\n\n    // check the result for drift and counter overflow\n    if (lNew - phys > config.maxDrift) {\n      throw new Timestamp.ClockDriftError();\n    }\n    if (cNew > MAX_COUNTER) {\n      throw new Timestamp.OverflowError();\n    }\n\n    // repack the logical time/counter\n    clock.timestamp.setMillis(lNew);\n    clock.timestamp.setCounter(cNew);\n\n    return new Timestamp(\n      clock.timestamp.millis(),\n      clock.timestamp.counter(),\n      clock.timestamp.node(),\n    );\n  }\n\n  /**\n   * zero/minimum timestamp\n   */\n\n  static zero = Timestamp.parse(\n    '1970-01-01T00:00:00.000Z-0000-0000000000000000',\n  )!;\n\n  static since = (isoString: string) => isoString + '-0000-0000000000000000';\n\n  /**\n   * error classes\n   */\n  static DuplicateNodeError = class DuplicateNodeError extends Error {\n    constructor(node: string) {\n      super('duplicate node identifier ' + node);\n      this.name = 'DuplicateNodeError';\n    }\n  };\n\n  static ClockDriftError = class ClockDriftError extends Error {\n    constructor(...args: unknown[]) {\n      super(\n        ['maximum clock drift exceeded'].concat(args as string[]).join(' '),\n      );\n      this.name = 'ClockDriftError';\n    }\n  };\n\n  static OverflowError = class OverflowError extends Error {\n    constructor() {\n      super('timestamp counter overflow');\n      this.name = 'OverflowError';\n    }\n  };\n\n  static InvalidError = class InvalidError extends Error {\n    constructor(...args: unknown[]) {\n      super(['timestamp is not valid'].concat(args.map(String)).join(' '));\n      this.name = 'InvalidError';\n    }\n  };\n}\n\nclass MutableTimestamp extends Timestamp {\n  static from(timestamp: Timestamp) {\n    return new MutableTimestamp(\n      timestamp.millis(),\n      timestamp.counter(),\n      timestamp.node(),\n    );\n  }\n\n  setMillis(n: number) {\n    this._state.millis = n;\n  }\n\n  setCounter(n: number) {\n    this._state.counter = n;\n  }\n\n  setNode(n: string) {\n    this._state.node = n;\n  }\n}\n","import * as SyncPb from './proto/sync_pb';\nexport {\n  merkle,\n  getClock,\n  setClock,\n  makeClock,\n  makeClientId,\n  serializeClock,\n  deserializeClock,\n  type Clock,\n  Timestamp,\n} from './crdt';\n\nexport const SyncProtoBuf = SyncPb;\n","import { getNormalisedString } from '../../shared/normalisation';\nimport { QueryState } from '../../shared/query';\n\n// @ts-strict-ignore\nlet _uid = 0;\nfunction resetUid() {\n  _uid = 0;\n}\n\nfunction uid(tableName) {\n  _uid++;\n  return tableName + _uid;\n}\n\nclass CompileError extends Error {}\n\nfunction nativeDateToInt(date) {\n  const pad = x => (x < 10 ? '0' : '') + x;\n  return date.getFullYear() + pad(date.getMonth() + 1) + pad(date.getDate());\n}\n\nfunction dateToInt(date) {\n  return parseInt(date.replace(/-/g, ''));\n}\n\nfunction addTombstone(schema, tableName, tableId, whereStr) {\n  const hasTombstone = schema[tableName].tombstone != null;\n  return hasTombstone ? `${whereStr} AND ${tableId}.tombstone = 0` : whereStr;\n}\n\nfunction popPath(path) {\n  const parts = path.split('.');\n  return { path: parts.slice(0, -1).join('.'), field: parts[parts.length - 1] };\n}\n\nfunction isKeyword(str) {\n  return str === 'group';\n}\n\nexport function quoteAlias(alias) {\n  // eslint-disable-next-line actual/typography\n  return alias.indexOf('.') === -1 && !isKeyword(alias) ? alias : `\"${alias}\"`;\n}\n\nfunction typed(value, type, { literal = false } = {}) {\n  return { value, type, literal };\n}\n\nfunction getFieldDescription(schema, tableName, field) {\n  if (schema[tableName] == null) {\n    throw new CompileError(`Table “${tableName}” does not exist in the schema`);\n  }\n\n  const fieldDesc = schema[tableName][field];\n  if (fieldDesc == null) {\n    throw new CompileError(\n      `Field “${field}” does not exist in table “${tableName}”`,\n    );\n  }\n  return fieldDesc;\n}\n\nfunction makePath(state, path) {\n  const { schema, paths } = state;\n\n  const parts = path.split('.');\n  if (parts.length < 2) {\n    throw new CompileError('Invalid path: ' + path);\n  }\n\n  const initialTable = parts[0];\n\n  const tableName = parts.slice(1).reduce((tableName, field) => {\n    const table = schema[tableName];\n\n    if (table == null) {\n      throw new CompileError(`Path error: ${tableName} table does not exist`);\n    }\n\n    if (!table[field] || table[field].ref == null) {\n      throw new CompileError(\n        `Field not joinable on table ${tableName}: “${field}”`,\n      );\n    }\n\n    return table[field].ref;\n  }, initialTable);\n\n  let joinTable;\n  const parentParts = parts.slice(0, -1);\n  if (parentParts.length === 1) {\n    joinTable = parentParts[0];\n  } else {\n    const parentPath = parentParts.join('.');\n    const parentDesc = paths.get(parentPath);\n    if (!parentDesc) {\n      throw new CompileError('Path does not exist: ' + parentPath);\n    }\n    joinTable = parentDesc.tableId;\n  }\n\n  return {\n    tableName,\n    tableId: uid(tableName),\n    joinField: parts[parts.length - 1],\n    joinTable,\n  };\n}\n\nfunction resolvePath(state, path) {\n  let paths = path.split('.');\n\n  paths = paths.reduce(\n    (acc, name) => {\n      const fullName = acc.context + '.' + name;\n      return {\n        context: fullName,\n        path: [...acc.path, fullName],\n      };\n    },\n    { context: state.implicitTableName, path: [] },\n  ).path;\n\n  paths.forEach(path => {\n    if (!state.paths.get(path)) {\n      state.paths.set(path, makePath(state, path));\n    }\n  });\n\n  const pathInfo = state.paths.get(paths[paths.length - 1]);\n  return pathInfo;\n}\n\nfunction transformField(state, name) {\n  if (typeof name !== 'string') {\n    throw new CompileError('Invalid field name, must be a string');\n  }\n\n  const { path, field: originalField } = popPath(name);\n\n  let field = originalField;\n  let pathInfo;\n  if (path === '') {\n    pathInfo = {\n      tableName: state.implicitTableName,\n      tableId: state.implicitTableId,\n    };\n  } else {\n    pathInfo = resolvePath(state, path);\n  }\n\n  const fieldDesc = getFieldDescription(\n    state.schema,\n    pathInfo.tableName,\n    field,\n  );\n\n  // If this is a field that references an item in another table, that\n  // item could have been deleted. If that's the case, we want to\n  // return `null` instead of an id pointing to a deleted item. This\n  // converts an id reference into a path that pulls the id through a\n  // table join which will filter out dead items, resulting in a\n  // `null` id if the item is deleted\n  if (\n    state.validateRefs &&\n    fieldDesc.ref &&\n    fieldDesc.type === 'id' &&\n    field !== 'id'\n  ) {\n    const refPath = state.implicitTableName + '.' + name;\n    let refPathInfo = state.paths.get(refPath);\n\n    if (!refPathInfo) {\n      refPathInfo = makePath(state, refPath);\n      refPathInfo.noMapping = true;\n      state.paths.set(refPath, refPathInfo);\n    }\n\n    field = 'id';\n    pathInfo = refPathInfo;\n  }\n\n  const fieldStr = pathInfo.tableId + '.' + field;\n  return typed(fieldStr, fieldDesc.type);\n}\n\nfunction parseDate(str) {\n  const m = str.match(/^(\\d{4}-\\d{2}-\\d{2})$/);\n  if (m) {\n    return typed(dateToInt(m[1]), 'date', { literal: true });\n  }\n  return null;\n}\n\nfunction parseMonth(str) {\n  const m = str.match(/^(\\d{4}-\\d{2})$/);\n  if (m) {\n    return typed(dateToInt(m[1]), 'date', { literal: true });\n  }\n  return null;\n}\n\nfunction parseYear(str) {\n  const m = str.match(/^(\\d{4})$/);\n  if (m) {\n    return typed(dateToInt(m[1]), 'date', { literal: true });\n  }\n  return null;\n}\n\nfunction badDateFormat(str, type) {\n  throw new CompileError(`Bad ${type} format: ${str}`);\n}\n\nfunction inferParam(param, type) {\n  const existingType = param.paramType;\n  if (existingType) {\n    const casts = {\n      date: ['string'],\n      'date-month': ['date'],\n      'date-year': ['date', 'date-month'],\n      id: ['string'],\n      float: ['integer'],\n    };\n\n    if (\n      existingType !== type &&\n      (!casts[type] || !casts[type].includes(existingType))\n    ) {\n      throw new Error(\n        `Parameter “${param.paramName}” can’t convert to ${type} (already inferred as ${existingType})`,\n      );\n    }\n  } else {\n    param.paramType = type;\n  }\n}\n\nfunction castInput(state, expr, type) {\n  if (expr.type === type) {\n    return expr;\n  } else if (expr.type === 'param') {\n    inferParam(expr, type);\n    return typed(expr.value, type);\n  } else if (expr.type === 'null') {\n    if (!expr.literal) {\n      throw new CompileError('A non-literal null doesn’t make sense');\n    }\n\n    if (type === 'boolean') {\n      return typed(0, 'boolean', { literal: true });\n    }\n    return expr;\n  }\n\n  // These are all things that can be safely casted automatically\n  if (type === 'date') {\n    if (expr.type === 'string') {\n      if (expr.literal) {\n        return parseDate(expr.value) || badDateFormat(expr.value, 'date');\n      } else {\n        throw new CompileError(\n          'Casting string fields to dates is not supported',\n        );\n      }\n    }\n\n    throw new CompileError(`Can’t cast ${expr.type} to date`);\n  } else if (type === 'date-month') {\n    let expr2;\n    if (expr.type === 'date') {\n      expr2 = expr;\n    } else if (expr.type === 'string' || expr.type === 'any') {\n      expr2 =\n        parseMonth(expr.value) ||\n        parseDate(expr.value) ||\n        badDateFormat(expr.value, 'date-month');\n    } else {\n      throw new CompileError(`Can’t cast ${expr.type} to date-month`);\n    }\n\n    if (expr2.literal) {\n      return typed(\n        dateToInt(expr2.value.toString().slice(0, 6)),\n        'date-month',\n        { literal: true },\n      );\n    } else {\n      return typed(\n        `CAST(SUBSTR(${expr2.value}, 1, 6) AS integer)`,\n        'date-month',\n      );\n    }\n  } else if (type === 'date-year') {\n    let expr2;\n    if (expr.type === 'date' || expr.type === 'date-month') {\n      expr2 = expr;\n    } else if (expr.type === 'string') {\n      expr2 =\n        parseYear(expr.value) ||\n        parseMonth(expr.value) ||\n        parseDate(expr.value) ||\n        badDateFormat(expr.value, 'date-year');\n    } else {\n      throw new CompileError(`Can’t cast ${expr.type} to date-year`);\n    }\n\n    if (expr2.literal) {\n      return typed(dateToInt(expr2.value.toString().slice(0, 4)), 'date-year', {\n        literal: true,\n      });\n    } else {\n      return typed(\n        `CAST(SUBSTR(${expr2.value}, 1, 4) AS integer)`,\n        'date-year',\n      );\n    }\n  } else if (type === 'id') {\n    if (expr.type === 'string') {\n      return typed(expr.value, 'id', { literal: expr.literal });\n    }\n  } else if (type === 'float') {\n    if (expr.type === 'integer') {\n      return typed(expr.value, 'float', { literal: expr.literal });\n    }\n  }\n\n  if (expr.type === 'any') {\n    return typed(expr.value, type, { literal: expr.literal });\n  }\n\n  throw new CompileError(`Can’t convert ${expr.type} to ${type}`);\n}\n\n// TODO: remove state from these functions\nfunction val(state, expr, type?: string) {\n  let castedExpr = expr;\n\n  // Cast the type if necessary\n  if (type) {\n    castedExpr = castInput(state, expr, type);\n  }\n\n  if (castedExpr.literal) {\n    /* eslint-disable actual/typography */\n    if (castedExpr.type === 'id') {\n      return `'${castedExpr.value}'`;\n    } else if (castedExpr.type === 'string') {\n      // Escape quotes\n      const value = castedExpr.value.replace(/'/g, \"''\");\n      return `'${value}'`;\n    }\n    /* eslint-enable actual/typography */\n  }\n\n  return castedExpr.value;\n}\n\nfunction valArray(state, arr: unknown[], types?: string[]) {\n  return arr.map((value, idx) => val(state, value, types ? types[idx] : null));\n}\n\nfunction validateArgLength(arr: unknown[], min: number, max?: number) {\n  if (max == null) {\n    max = min;\n  }\n\n  if (min != null && arr.length < min) {\n    throw new CompileError('Too few arguments');\n  }\n  if (max != null && arr.length > max) {\n    throw new CompileError('Too many arguments');\n  }\n}\n\n//// Nice errors\n\nfunction saveStack(type, func) {\n  return (state, ...args) => {\n    if (state == null || state.compileStack == null) {\n      throw new CompileError(\n        'This function cannot track error data. ' +\n          'It needs to accept the compiler state as the first argument.',\n      );\n    }\n\n    state.compileStack.push({ type, args });\n    const ret = func(state, ...args);\n    state.compileStack.pop();\n    return ret;\n  };\n}\n\nfunction prettyValue(value) {\n  if (typeof value === 'string') {\n    return value;\n  } else if (value === undefined) {\n    return 'undefined';\n  }\n\n  const str = JSON.stringify(value);\n  if (str.length > 70) {\n    const expanded = JSON.stringify(value, null, 2);\n    return expanded.split('\\n').join('\\n  ');\n  }\n  return str;\n}\n\nfunction getCompileError(error, stack) {\n  if (stack.length === 0) {\n    return error;\n  }\n\n  let stackStr = stack\n    .slice(1)\n    .reverse()\n    .map(entry => {\n      switch (entry.type) {\n        case 'expr':\n        case 'function':\n          return prettyValue(entry.args[0]);\n        case 'op': {\n          const [fieldRef, opData] = entry.args;\n          return prettyValue({ [fieldRef]: opData });\n        }\n        case 'value':\n          return prettyValue(entry.value);\n        default:\n          return '';\n      }\n    })\n    .map(str => '\\n  ' + str)\n    .join('');\n\n  const rootMethod = stack[0].type;\n  const methodArgs = stack[0].args[0];\n  stackStr += `\\n  ${rootMethod}(${prettyValue(\n    methodArgs.length === 1 ? methodArgs[0] : methodArgs,\n  )})`;\n\n  // In production, hide internal stack traces\n  if (process.env.NODE_ENV === 'production') {\n    const err = new CompileError();\n    err.message = `${error.message}\\n\\nExpression stack:` + stackStr;\n    err.stack = null;\n    return err;\n  }\n\n  error.message = `${error.message}\\n\\nExpression stack:` + stackStr;\n  return error;\n}\n\n//// Compiler\n\nfunction compileLiteral(value) {\n  if (value === undefined) {\n    throw new CompileError('`undefined` is not a valid query value');\n  } else if (value === null) {\n    return typed('NULL', 'null', { literal: true });\n  } else if (value instanceof Date) {\n    return typed(nativeDateToInt(value), 'date', { literal: true });\n  } else if (typeof value === 'string') {\n    // Allow user to escape $, and quote the string to make it a\n    // string literal in the output\n    value = value.replace(/\\\\\\$/g, '$');\n    return typed(value, 'string', { literal: true });\n  } else if (typeof value === 'boolean') {\n    return typed(value ? 1 : 0, 'boolean', { literal: true });\n  } else if (typeof value === 'number') {\n    return typed(value, Number.isInteger(value) ? 'integer' : 'float', {\n      literal: true,\n    });\n  } else if (Array.isArray(value)) {\n    return typed(value, 'array', { literal: true });\n  } else {\n    throw new CompileError(\n      'Unsupported type of expression: ' + JSON.stringify(value),\n    );\n  }\n}\n\nconst compileExpr = saveStack('expr', (state, expr) => {\n  if (typeof expr === 'string') {\n    // Field reference\n    if (expr[0] === '$') {\n      const fieldRef = expr === '$' ? state.implicitField : expr.slice(1);\n\n      if (fieldRef == null || fieldRef === '') {\n        throw new CompileError('Invalid field reference: ' + expr);\n      }\n\n      return transformField(state, fieldRef);\n    }\n\n    // Named parameter\n    if (expr[0] === ':') {\n      const param = { value: '?', type: 'param', paramName: expr.slice(1) };\n      state.namedParameters.push(param);\n      return param;\n    }\n  }\n\n  if (expr !== null) {\n    if (Array.isArray(expr)) {\n      return compileLiteral(expr);\n    } else if (\n      typeof expr === 'object' &&\n      Object.keys(expr).find(k => k[0] === '$')\n    ) {\n      // It's a function call\n      return compileFunction(state, expr);\n    }\n  }\n\n  return compileLiteral(expr);\n});\n\nconst compileFunction = saveStack('function', (state, func) => {\n  const [name] = Object.keys(func);\n  let argExprs = func[name];\n  if (!Array.isArray(argExprs)) {\n    argExprs = [argExprs];\n  }\n\n  if (name[0] !== '$') {\n    throw new CompileError(\n      `Unknown property “${name}.” Did you mean to call a function? Try prefixing it with $`,\n    );\n  }\n\n  let args = argExprs;\n  // `$condition` is a special-case where it will be evaluated later\n  if (name !== '$condition') {\n    args = argExprs.map(arg => compileExpr(state, arg));\n  }\n\n  switch (name) {\n    // aggregate functions\n    case '$sum': {\n      validateArgLength(args, 1);\n      const [arg1] = valArray(state, args, ['float']);\n      return typed(`SUM(${arg1})`, args[0].type);\n    }\n\n    case '$sumOver': {\n      const [arg1] = valArray(state, args, ['float']);\n      const order = state.orders\n        ? 'ORDER BY ' + compileOrderBy(state, state.orders)\n        : '';\n\n      return typed(\n        `(SUM(${arg1}) OVER (${order} ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING))`,\n        args[0].type,\n      );\n    }\n\n    case '$count': {\n      validateArgLength(args, 1);\n      const [arg1] = valArray(state, args);\n      return typed(`COUNT(${arg1})`, 'integer');\n    }\n\n    // string functions\n    case '$substr': {\n      validateArgLength(args, 2, 3);\n      const [arg1, arg2, arg3] = valArray(state, args, [\n        'string',\n        'integer',\n        'integer',\n      ]);\n      return typed(`SUBSTR(${arg1}, ${arg2}, ${arg3})`, 'string');\n    }\n    case '$lower': {\n      validateArgLength(args, 1);\n      const [arg1] = valArray(state, args, ['string']);\n      return typed(`UNICODE_LOWER(${arg1})`, 'string');\n    }\n\n    // integer/float functions\n    case '$neg': {\n      validateArgLength(args, 1);\n      valArray(state, args, ['float']);\n      return typed(`(-${val(state, args[0])})`, args[0].type);\n    }\n    case '$abs': {\n      validateArgLength(args, 1);\n      valArray(state, args, ['float']);\n      return typed(`ABS(${val(state, args[0])})`, args[0].type);\n    }\n    case '$idiv': {\n      validateArgLength(args, 2);\n      valArray(state, args, ['integer', 'integer']);\n      return typed(\n        `(${val(state, args[0])} / ${val(state, args[1])})`,\n        args[0].type,\n      );\n    }\n\n    // id functions\n    case '$id': {\n      validateArgLength(args, 1);\n      return typed(val(state, args[0]), args[0].type);\n    }\n\n    // date functions\n    case '$day': {\n      validateArgLength(args, 1);\n      return castInput(state, args[0], 'date');\n    }\n    case '$month': {\n      validateArgLength(args, 1);\n      return castInput(state, args[0], 'date-month');\n    }\n    case '$year': {\n      validateArgLength(args, 1);\n      return castInput(state, args[0], 'date-year');\n    }\n\n    // various functions\n    case '$condition':\n      validateArgLength(args, 1);\n      const conds = compileConditions(state, args[0]);\n      return typed(conds.join(' AND '), 'boolean');\n\n    case '$nocase':\n      validateArgLength(args, 1);\n      const [arg1] = valArray(state, args, ['string']);\n      return typed(`${arg1} COLLATE NOCASE`, args[0].type);\n\n    case '$literal': {\n      validateArgLength(args, 1);\n      if (!args[0].literal) {\n        throw new CompileError('Literal not passed to $literal');\n      }\n      return args[0];\n    }\n    default:\n      throw new CompileError(`Unknown function: ${name}`);\n  }\n});\n\nconst compileOp = saveStack('op', (state, fieldRef, opData) => {\n  const { $transform, ...opExpr } = opData;\n  const [op] = Object.keys(opExpr);\n\n  const rhs = compileExpr(state, opData[op]);\n\n  let lhs;\n  if ($transform) {\n    lhs = compileFunction(\n      { ...state, implicitField: fieldRef },\n      typeof $transform === 'string' ? { [$transform]: '$' } : $transform,\n    );\n  } else {\n    lhs = compileExpr(state, '$' + fieldRef);\n  }\n\n  switch (op) {\n    case '$gte': {\n      const [left, right] = valArray(state, [lhs, rhs], [null, lhs.type]);\n      return `${left} >= ${right}`;\n    }\n    case '$lte': {\n      const [left, right] = valArray(state, [lhs, rhs], [null, lhs.type]);\n      return `${left} <= ${right}`;\n    }\n    case '$gt': {\n      const [left, right] = valArray(state, [lhs, rhs], [null, lhs.type]);\n      return `${left} > ${right}`;\n    }\n    case '$lt': {\n      const [left, right] = valArray(state, [lhs, rhs], [null, lhs.type]);\n      return `${left} < ${right}`;\n    }\n    case '$eq': {\n      if (castInput(state, rhs, lhs.type).type === 'null') {\n        return `${val(state, lhs)} IS NULL`;\n      }\n\n      const [left, right] = valArray(state, [lhs, rhs], [null, lhs.type]);\n\n      if (rhs.type === 'param') {\n        const orders = state.namedParameters.map(param => {\n          return param === rhs || param === lhs ? [param, { ...param }] : param;\n        });\n        state.namedParameters = [].concat.apply([], orders);\n\n        return `CASE\n          WHEN ${left} IS NULL THEN ${right} IS NULL\n          ELSE ${left} = ${right}\n        END`;\n      }\n\n      return `${left} = ${right}`;\n    }\n    case '$ne': {\n      if (castInput(state, rhs, lhs.type).type === 'null') {\n        return `${val(state, lhs)} IS NOT NULL`;\n      }\n\n      const [left, right] = valArray(state, [lhs, rhs], [null, lhs.type]);\n\n      if (rhs.type === 'param') {\n        const orders = state.namedParameters.map(param => {\n          return param === rhs || param === lhs ? [param, { ...param }] : param;\n        });\n        state.namedParameters = [].concat.apply([], orders);\n\n        return `CASE\n          WHEN ${left} IS NULL THEN ${right} IS NOT NULL\n          ELSE ${left} IS NOT ${right}\n        END`;\n      }\n\n      return `(${left} != ${right} OR ${left} IS NULL)`;\n    }\n    case '$oneof': {\n      const [left, right] = valArray(state, [lhs, rhs], [null, 'array']);\n      // Dedupe the ids\n      const ids = [...new Set(right)];\n      // eslint-disable-next-line actual/typography\n      return `${left} IN (` + ids.map(id => `'${id}'`).join(',') + ')';\n    }\n    case '$like': {\n      const [left, right] = valArray(state, [lhs, rhs], ['string', 'string']);\n      return `UNICODE_LIKE(${getNormalisedString(right)}, NORMALISE(${left}))`;\n    }\n    case '$regexp': {\n      const [left, right] = valArray(state, [lhs, rhs], ['string', 'string']);\n      return `REGEXP(${right}, ${left})`;\n    }\n    case '$notlike': {\n      const [left, right] = valArray(state, [lhs, rhs], ['string', 'string']);\n      return `(NOT UNICODE_LIKE(${getNormalisedString(right)}, NORMALISE(${left}))\\n OR ${left} IS NULL)`;\n    }\n    default:\n      throw new CompileError(`Unknown operator: ${op}`);\n  }\n});\n\nfunction compileConditions(state, conds) {\n  if (!Array.isArray(conds)) {\n    // Convert the object form `{foo: 1, bar:2}` into the array form\n    // `[{foo: 1}, {bar:2}]`\n    conds = Object.entries(conds).map(cond => {\n      return { [cond[0]]: cond[1] };\n    });\n  }\n\n  return conds.filter(Boolean).reduce((res, condsObj) => {\n    const compiled = Object.entries(condsObj)\n      .map(([field, cond]) => {\n        // Allow a falsy value in the lhs of $and and $or to allow for\n        // quick forms like `$or: amount != 0 && ...`\n        if (field === '$and') {\n          if (!cond) {\n            return null;\n          }\n          return compileAnd(state, cond);\n        } else if (field === '$or') {\n          if (!cond || (Array.isArray(cond) && cond.length === 0)) {\n            return null;\n          }\n          return compileOr(state, cond);\n        }\n\n        if (\n          typeof cond === 'string' ||\n          typeof cond === 'number' ||\n          typeof cond === 'boolean' ||\n          cond instanceof Date ||\n          cond == null\n        ) {\n          return compileOp(state, field, { $eq: cond });\n        }\n\n        if (Array.isArray(cond)) {\n          // An array of conditions for a field is implicitly an `and`\n          return cond.map(c => compileOp(state, field, c)).join(' AND ');\n        }\n        return compileOp(state, field, cond);\n      })\n      .filter(Boolean);\n\n    return [...res, ...compiled];\n  }, []);\n}\n\nfunction compileOr(state, conds) {\n  // Same as above\n  if (!conds) {\n    return '0';\n  }\n  const res = compileConditions(state, conds);\n  if (res.length === 0) {\n    return '0';\n  }\n  return '(' + res.join('\\n  OR ') + ')';\n}\n\nfunction compileAnd(state, conds) {\n  // Same as above\n  if (!conds) {\n    return '1';\n  }\n  const res = compileConditions(state, conds);\n  if (res.length === 0) {\n    return '1';\n  }\n  return '(' + res.join('\\n  AND ') + ')';\n}\n\nconst compileWhere = saveStack('filter', (state, conds) => {\n  return compileAnd(state, conds);\n});\n\nfunction compileJoins(state, tableRef, internalTableFilters) {\n  const joins = [];\n  state.paths.forEach((desc, path) => {\n    const { tableName, tableId, joinField, joinTable, noMapping } =\n      state.paths.get(path);\n\n    let on = `${tableId}.id = ${tableRef(joinTable)}.${quoteAlias(joinField)}`;\n\n    const filters = internalTableFilters(tableName);\n    if (filters.length > 0) {\n      on +=\n        ' AND ' +\n        compileAnd(\n          { ...state, implicitTableName: tableName, implicitTableId: tableId },\n          filters,\n        );\n    }\n\n    joins.push(\n      `LEFT JOIN ${\n        noMapping ? tableName : tableRef(tableName, true)\n      } ${tableId} ON ${addTombstone(state.schema, tableName, tableId, on)}`,\n    );\n\n    if (state.dependencies.indexOf(tableName) === -1) {\n      state.dependencies.push(tableName);\n    }\n  });\n  return joins.join('\\n');\n}\n\nfunction expandStar(state, expr) {\n  let path;\n  let pathInfo;\n  if (expr === '*') {\n    pathInfo = {\n      tableName: state.implicitTableName,\n      tableId: state.implicitTableId,\n    };\n  } else if (expr.match(/\\.\\*$/)) {\n    const result = popPath(expr);\n    path = result.path;\n    pathInfo = resolvePath(state, result.path);\n  }\n\n  const table = state.schema[pathInfo.tableName];\n  if (table == null) {\n    throw new Error(`Table “${pathInfo.tableName}” does not exist`);\n  }\n\n  return Object.keys(table).map(field => (path ? `${path}.${field}` : field));\n}\n\nconst compileSelect = saveStack(\n  'select',\n  (state, exprs, isAggregate, orders) => {\n    // Always include the id if it's not an aggregate\n    if (!isAggregate && !exprs.includes('id') && !exprs.includes('*')) {\n      exprs = exprs.concat(['id']);\n    }\n\n    const select = exprs.map(expr => {\n      if (typeof expr === 'string') {\n        if (expr.indexOf('*') !== -1) {\n          const fields = expandStar(state, expr);\n\n          return fields\n            .map(field => {\n              const compiled = compileExpr(state, '$' + field);\n              state.outputTypes.set(field, compiled.type);\n              return compiled.value + ' AS ' + quoteAlias(field);\n            })\n            .join(', ');\n        }\n\n        const compiled = compileExpr(state, '$' + expr);\n        state.outputTypes.set(expr, compiled.type);\n        return compiled.value + ' AS ' + quoteAlias(expr);\n      }\n\n      const [name, value] = Object.entries(expr)[0];\n      if (name[0] === '$') {\n        state.compileStack.push({ type: 'value', value: expr });\n        throw new CompileError(\n          `Invalid field “${name}”, are you trying to select a function? You need to name the expression`,\n        );\n      }\n\n      if (typeof value === 'string') {\n        const compiled = compileExpr(state, '$' + value);\n        state.outputTypes.set(name, compiled.type);\n        return `${compiled.value} AS ${quoteAlias(name)}`;\n      }\n\n      const compiled = compileFunction({ ...state, orders }, value);\n      state.outputTypes.set(name, compiled.type);\n      return compiled.value + ` AS ${quoteAlias(name)}`;\n    });\n\n    return select.join(', ');\n  },\n);\n\nconst compileGroupBy = saveStack('groupBy', (state, exprs) => {\n  const groupBy = exprs.map(expr => {\n    if (typeof expr === 'string') {\n      return compileExpr(state, '$' + expr).value;\n    }\n\n    return compileFunction(state, expr).value;\n  });\n\n  return groupBy.join(', ');\n});\n\nconst compileOrderBy = saveStack('orderBy', (state, exprs) => {\n  const orderBy = exprs.map(expr => {\n    let compiled;\n    let dir = null;\n\n    if (typeof expr === 'string') {\n      compiled = compileExpr(state, '$' + expr).value;\n    } else {\n      const entries = Object.entries(expr);\n      const entry = entries[0];\n\n      // Check if this is a field reference\n      if (entries.length === 1 && entry[0][0] !== '$') {\n        dir = entry[1];\n        compiled = compileExpr(state, '$' + entry[0]).value;\n      } else {\n        // Otherwise it's a function\n        const { $dir, ...func } = expr;\n        dir = $dir;\n        compiled = compileFunction(state, func).value;\n      }\n    }\n\n    if (dir != null) {\n      if (dir !== 'desc' && dir !== 'asc') {\n        throw new CompileError('Invalid order direction: ' + dir);\n      }\n      return `${compiled} ${dir}`;\n    }\n    return compiled;\n  });\n\n  return orderBy.join(', ');\n});\n\nconst AGGREGATE_FUNCTIONS = ['$sum', '$count'];\nfunction isAggregateFunction(expr) {\n  if (typeof expr !== 'object' || Array.isArray(expr)) {\n    return false;\n  }\n\n  const [name, originalArgExprs] = Object.entries(expr)[0];\n  let argExprs = originalArgExprs;\n  if (!Array.isArray(argExprs)) {\n    argExprs = [argExprs];\n  }\n\n  if (AGGREGATE_FUNCTIONS.indexOf(name) !== -1) {\n    return true;\n  }\n\n  return !!(argExprs as unknown[]).find(ex => isAggregateFunction(ex));\n}\n\nexport function isAggregateQuery(queryState) {\n  // it's aggregate if:\n  // either an aggregate function is used in `select`\n  // or a `groupBy` exists\n\n  if (queryState.groupExpressions.length > 0) {\n    return true;\n  }\n\n  return !!queryState.selectExpressions.find(expr => {\n    if (typeof expr !== 'string') {\n      const [_, value] = Object.entries(expr)[0];\n      return isAggregateFunction(value);\n    }\n    return false;\n  });\n}\n\n// TODO: Type this based on schema/index\ntype Schema = unknown;\n\nexport type SchemaConfig = {\n  tableViews?:\n    | Record<string, string>\n    | ((name: string, config: { withDead; isJoin; tableOptions }) => string);\n  tableFilters?: (name: string) => unknown[];\n  customizeQuery?: (queryState: QueryState) => QueryState;\n  views?: Record<\n    string,\n    {\n      fields?: Record<string, string>;\n      [key: `v_${string}`]: string | ((internalFields, publicFields) => string);\n    }\n  >;\n};\n\n// Types per field. Should be based on the schema.\nexport type OutputTypes = Map<string, string | number | null>;\n\ntype NamedParameter = {\n  type: string;\n  paramName: string;\n  paramType?: string;\n  value: string;\n};\n\n// TODO: Type this\ntype CompileStack = unknown[];\n\nexport type CompilerState = {\n  schema: Schema;\n  implicitTableName: string;\n  implicitTableId: string;\n  paths: Map<string, unknown>;\n  dependencies: string[];\n  compileStack: CompileStack;\n  outputTypes: OutputTypes;\n  validateRefs: boolean;\n  namedParameters: NamedParameter[];\n};\n\nexport type SqlPieces = {\n  select: string;\n  from: string;\n  joins: string;\n  where: string;\n  groupBy: string;\n  orderBy: string;\n  limit: number | null;\n  offset: number | null;\n};\n\nexport function compileQuery(\n  queryState: QueryState,\n  schema: Schema,\n  schemaConfig: SchemaConfig = {},\n) {\n  const { withDead, validateRefs = true, tableOptions, rawMode } = queryState;\n\n  const {\n    tableViews = {},\n    tableFilters = () => [],\n    customizeQuery = queryState => queryState,\n  } = schemaConfig;\n\n  const internalTableFilters = name => {\n    const filters = tableFilters(name);\n    // These filters cannot join tables and must be simple strings\n    for (const filter of filters) {\n      if (Array.isArray(filter)) {\n        throw new CompileError(\n          'Invalid internal table filter: only object filters are supported',\n        );\n      }\n      if (Object.keys(filter)[0].indexOf('.') !== -1) {\n        throw new CompileError(\n          'Invalid internal table filter: field names cannot contain paths',\n        );\n      }\n    }\n    return filters;\n  };\n\n  const tableRef = (name: string, isJoin?: boolean) => {\n    const view =\n      typeof tableViews === 'function'\n        ? tableViews(name, { withDead, isJoin, tableOptions })\n        : tableViews[name];\n    return view || name;\n  };\n\n  const tableName = queryState.table;\n\n  const {\n    filterExpressions,\n    selectExpressions,\n    groupExpressions,\n    orderExpressions,\n    limit,\n    offset,\n  } = customizeQuery(queryState);\n\n  let select = '';\n  let where = '';\n  let joins = '';\n  let groupBy = '';\n  let orderBy = '';\n  const state: CompilerState = {\n    schema,\n    implicitTableName: tableName,\n    implicitTableId: tableRef(tableName),\n    paths: new Map(),\n    dependencies: [tableName],\n    compileStack: [],\n    outputTypes: new Map(),\n    validateRefs,\n    namedParameters: [],\n  };\n\n  resetUid();\n\n  try {\n    select = compileSelect(\n      state,\n      selectExpressions,\n      isAggregateQuery(queryState),\n      orderExpressions,\n    );\n\n    if (filterExpressions.length > 0) {\n      const result = compileWhere(state, filterExpressions);\n      where = 'WHERE ' + result;\n    } else {\n      where = 'WHERE 1';\n    }\n\n    if (!rawMode) {\n      const filters = internalTableFilters(tableName);\n      if (filters.length > 0) {\n        where += ' AND ' + compileAnd(state, filters);\n      }\n    }\n\n    if (groupExpressions.length > 0) {\n      const result = compileGroupBy(state, groupExpressions);\n      groupBy = 'GROUP BY ' + result;\n    }\n\n    // Orders don't matter if doing a single calculation\n    if (orderExpressions.length > 0) {\n      const result = compileOrderBy(state, orderExpressions);\n      orderBy = 'ORDER BY ' + result;\n    }\n\n    if (state.paths.size > 0) {\n      joins = compileJoins(state, tableRef, internalTableFilters);\n    }\n  } catch (e) {\n    if (e instanceof CompileError) {\n      throw getCompileError(e, state.compileStack);\n    }\n\n    throw e;\n  }\n\n  const sqlPieces: SqlPieces = {\n    select,\n    from: tableRef(tableName),\n    joins,\n    where,\n    groupBy,\n    orderBy,\n    limit,\n    offset,\n  };\n\n  return {\n    sqlPieces,\n    state,\n  };\n}\n\nexport function defaultConstructQuery(\n  queryState: QueryState,\n  compilerState: CompilerState,\n  sqlPieces: SqlPieces,\n) {\n  const s = sqlPieces;\n\n  const where = queryState.withDead\n    ? s.where\n    : addTombstone(\n        compilerState.schema,\n        compilerState.implicitTableName,\n        compilerState.implicitTableId,\n        s.where,\n      );\n\n  return `\n    SELECT ${s.select} FROM ${s.from}\n    ${s.joins}\n    ${where}\n    ${s.groupBy}\n    ${s.orderBy}\n    ${s.limit != null ? `LIMIT ${s.limit}` : ''}\n    ${s.offset != null ? `OFFSET ${s.offset}` : ''}\n  `;\n}\n\nexport function generateSQLWithState(\n  queryState: QueryState,\n  schema?: Schema,\n  schemaConfig?: SchemaConfig,\n) {\n  const { sqlPieces, state } = compileQuery(queryState, schema, schemaConfig);\n  return { sql: defaultConstructQuery(queryState, state, sqlPieces), state };\n}\n","// TODO: normalize error types\nexport class PostError extends Error {\n  meta: { meta: string } | undefined;\n  reason: string;\n  type: 'PostError';\n\n  constructor(reason: string, meta?: { meta: string }) {\n    super('PostError: ' + reason);\n    this.type = 'PostError';\n    this.reason = reason;\n    this.meta = meta;\n  }\n}\n\nexport class BankSyncError extends Error {\n  reason: string;\n  category: string;\n  code: string;\n  type: 'BankSyncError';\n\n  constructor(reason: string, category: string, code: string) {\n    super('BankSyncError: ' + reason);\n    this.type = 'BankSyncError';\n    this.reason = reason;\n    this.category = category;\n    this.code = code;\n  }\n}\n\nexport class HTTPError extends Error {\n  statusCode: number;\n  responseBody: string;\n\n  constructor(code: number, body: string) {\n    super(`HTTPError: unsuccessful status code (${code}): ${body}`);\n    this.statusCode = code;\n    this.responseBody = body;\n  }\n}\n\nexport class SyncError extends Error {\n  meta:\n    | {\n        isMissingKey: boolean;\n      }\n    | {\n        error: { message: string; stack: string };\n        query: { sql: string; params: Array<string | number> };\n      }\n    | undefined;\n  reason: string;\n\n  constructor(\n    reason: string,\n    meta?:\n      | {\n          isMissingKey: boolean;\n        }\n      | {\n          error: { message: string; stack: string };\n          query: { sql: string; params: Array<string | number> };\n        },\n  ) {\n    super('SyncError: ' + reason);\n    this.reason = reason;\n    this.meta = meta;\n  }\n}\n\nexport class ValidationError extends Error {}\n\nexport class TransactionError extends Error {}\n\nexport class RuleError extends Error {\n  type: string;\n\n  constructor(name: string, message: string) {\n    super('RuleError: ' + message);\n    this.type = name;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function APIError(msg: string, meta?: Record<string, any>) {\n  return { type: 'APIError', message: msg, meta };\n}\n\nexport function FileDownloadError(\n  reason: string,\n  meta?: {\n    fileId?: string;\n    isMissingKey?: boolean;\n    name?: string;\n    id?: string;\n  },\n) {\n  return { type: 'FileDownloadError', reason, meta };\n}\n\nexport function FileUploadError(\n  reason: string,\n  meta?: { isMissingKey: boolean },\n) {\n  return { type: 'FileUploadError', reason, meta };\n}\n","import {\n  CategoryEntity,\n  CategoryGroupEntity,\n  PayeeEntity,\n} from '../types/models';\n\nimport {\n  convertForInsert,\n  convertForUpdate,\n  convertFromSelect,\n  schema,\n  schemaConfig,\n} from './aql';\nimport { DbAccount, DbCategory, DbCategoryGroup, DbPayee } from './db';\nimport { ValidationError } from './errors';\n\nexport function requiredFields<T extends object, K extends keyof T>(\n  name: string,\n  row: T,\n  fields: K[],\n  update?: boolean,\n) {\n  fields.forEach(field => {\n    if (update) {\n      if (row.hasOwnProperty(field) && row[field] == null) {\n        throw new ValidationError(`${name} is missing field ${String(field)}`);\n      }\n    } else {\n      if (!row.hasOwnProperty(field) || row[field] == null) {\n        throw new ValidationError(`${name} is missing field ${String(field)}`);\n      }\n    }\n  });\n}\n\nexport function toDateRepr(str: string) {\n  if (typeof str !== 'string') {\n    throw new Error('toDateRepr not passed a string: ' + str);\n  }\n\n  return parseInt(str.replace(/-/g, ''));\n}\n\nexport function fromDateRepr(number: number) {\n  if (typeof number !== 'number') {\n    throw new Error('fromDateRepr not passed a number: ' + number);\n  }\n\n  const dateString = number.toString();\n  return (\n    dateString.slice(0, 4) +\n    '-' +\n    dateString.slice(4, 6) +\n    '-' +\n    dateString.slice(6)\n  );\n}\n\nexport const accountModel = {\n  validate(account: Partial<DbAccount>, { update }: { update?: boolean } = {}) {\n    requiredFields(\n      'account',\n      account,\n      update ? ['name', 'offbudget', 'closed'] : ['name'],\n      update,\n    );\n\n    return account as DbAccount;\n  },\n};\n\nexport const categoryModel = {\n  validate(\n    category: Partial<DbCategory>,\n    { update }: { update?: boolean } = {},\n  ): DbCategory {\n    requiredFields(\n      'category',\n      category,\n      update ? ['name', 'is_income', 'cat_group'] : ['name', 'cat_group'],\n      update,\n    );\n\n    const { sort_order, ...rest } = category;\n    return { ...rest } as DbCategory;\n  },\n  toDb(\n    category: CategoryEntity,\n    { update }: { update?: boolean } = {},\n  ): DbCategory {\n    return (\n      update\n        ? convertForUpdate(schema, schemaConfig, 'categories', category)\n        : convertForInsert(schema, schemaConfig, 'categories', category)\n    ) as DbCategory;\n  },\n  fromDb(category: DbCategory): CategoryEntity {\n    return convertFromSelect(\n      schema,\n      schemaConfig,\n      'categories',\n      category,\n    ) as CategoryEntity;\n  },\n};\n\nexport const categoryGroupModel = {\n  validate(\n    categoryGroup: Partial<DbCategoryGroup>,\n    { update }: { update?: boolean } = {},\n  ): DbCategoryGroup {\n    requiredFields(\n      'categoryGroup',\n      categoryGroup,\n      update ? ['name', 'is_income'] : ['name'],\n      update,\n    );\n\n    const { sort_order, ...rest } = categoryGroup;\n    return { ...rest } as DbCategoryGroup;\n  },\n  toDb(\n    categoryGroup: CategoryGroupEntity,\n    { update }: { update?: boolean } = {},\n  ): DbCategoryGroup {\n    return (\n      update\n        ? convertForUpdate(\n            schema,\n            schemaConfig,\n            'category_groups',\n            categoryGroup,\n          )\n        : convertForInsert(\n            schema,\n            schemaConfig,\n            'category_groups',\n            categoryGroup,\n          )\n    ) as DbCategoryGroup;\n  },\n  fromDb(\n    categoryGroup: DbCategoryGroup & {\n      categories: DbCategory[];\n    },\n  ): CategoryGroupEntity {\n    const { categories, ...rest } = categoryGroup;\n    const categoryGroupEntity = convertFromSelect(\n      schema,\n      schemaConfig,\n      'category_groups',\n      rest,\n    ) as CategoryGroupEntity;\n\n    return {\n      ...categoryGroupEntity,\n      categories: categories\n        .filter(category => category.cat_group === categoryGroup.id)\n        .map(categoryModel.fromDb),\n    };\n  },\n};\n\nexport const payeeModel = {\n  validate(payee: Partial<DbPayee>, { update }: { update?: boolean } = {}) {\n    requiredFields('payee', payee, update ? [] : ['name'], update);\n    return payee as DbPayee;\n  },\n  toDb(payee: PayeeEntity, { update }: { update?: boolean } = {}): DbPayee {\n    return (\n      update\n        ? convertForUpdate(schema, schemaConfig, 'payees', payee)\n        : convertForInsert(schema, schemaConfig, 'payees', payee)\n    ) as DbPayee;\n  },\n  fromDb(payee: DbPayee): PayeeEntity {\n    return convertFromSelect(\n      schema,\n      schemaConfig,\n      'payees',\n      payee,\n    ) as PayeeEntity;\n  },\n};\n","// @ts-strict-ignore\nimport { dayFromDate } from '../../shared/months';\nimport { toDateRepr, fromDateRepr } from '../models';\n\nfunction isRequired(name, fieldDesc) {\n  return fieldDesc.required || name === 'id';\n}\n\n// TODO: All of the data type needs to check the input value. This\n// doesn't just convert, it casts. See integer handling.\nexport function convertInputType(value, type) {\n  if (value === undefined) {\n    throw new Error('Query value cannot be undefined');\n  } else if (value === null) {\n    if (type === 'boolean') {\n      return 0;\n    }\n\n    return null;\n  }\n\n  switch (type) {\n    case 'date':\n      if (value instanceof Date) {\n        return toDateRepr(dayFromDate(value));\n      } else if (\n        value.match(/^\\d{4}-\\d{2}-\\d{2}$/) == null ||\n        value.date < '2000-01-01'\n      ) {\n        throw new Error('Invalid date: ' + value);\n      }\n\n      return toDateRepr(value);\n    case 'date-month':\n      return toDateRepr(value.slice(0, 7));\n    case 'date-year':\n      return toDateRepr(value.slice(0, 4));\n    case 'boolean':\n      return value ? 1 : 0;\n    case 'id':\n      if (typeof value !== 'string' && value !== null) {\n        throw new Error('Invalid id, must be string: ' + value);\n      }\n      return value;\n    case 'integer':\n      if (typeof value === 'number' && Number.isInteger(value)) {\n        return value;\n      } else {\n        throw new Error('Can’t convert to integer: ' + JSON.stringify(value));\n      }\n    case 'json':\n      return JSON.stringify(value);\n    default:\n  }\n  return value;\n}\n\nexport function convertOutputType(value, type) {\n  if (value === null) {\n    if (type === 'boolean') {\n      return false;\n    }\n    return null;\n  }\n\n  switch (type) {\n    case 'date':\n      return fromDateRepr(value);\n    case 'date-month':\n      return fromDateRepr(value).slice(0, 7);\n    case 'date-year':\n      return fromDateRepr(value).slice(0, 4);\n    case 'boolean':\n      return value === 1;\n    case 'json':\n    case 'json/fallback':\n      try {\n        return JSON.parse(value);\n      } catch (e) {\n        return type === 'json/fallback' ? value : null;\n      }\n    default:\n  }\n\n  return value;\n}\n\nexport function conform(\n  schema,\n  schemaConfig,\n  table,\n  obj,\n  { skipNull = false } = {},\n) {\n  const tableSchema = schema[table];\n  if (tableSchema == null) {\n    throw new Error(`Table “${table}” does not exist`);\n  }\n\n  const views = schemaConfig.views || {};\n\n  // Rename fields if necessary\n  const fieldRef = field => {\n    if (views[table] && views[table].fields) {\n      return views[table].fields[field] || field;\n    }\n    return field;\n  };\n\n  return Object.fromEntries(\n    Object.keys(obj)\n      .map(field => {\n        // Fields that start with an underscore are ignored\n        if (field[0] === '_') {\n          return null;\n        }\n\n        const fieldDesc = tableSchema[field];\n        if (fieldDesc == null) {\n          throw new Error(\n            `Field “${field}” does not exist on table ${table}: ${JSON.stringify(\n              obj,\n            )}`,\n          );\n        }\n\n        if (isRequired(field, fieldDesc) && obj[field] == null) {\n          throw new Error(\n            `“${field}” is required for table “${table}”: ${JSON.stringify(\n              obj,\n            )}`,\n          );\n        }\n\n        // This option removes null values (see `convertForInsert`)\n        if (skipNull && obj[field] == null) {\n          return null;\n        }\n\n        return [fieldRef(field), convertInputType(obj[field], fieldDesc.type)];\n      })\n      .filter(Boolean),\n  );\n}\n\nexport function convertForInsert(schema, schemaConfig, table, rawObj) {\n  const obj = { ...rawObj };\n\n  const tableSchema = schema[table];\n  if (tableSchema == null) {\n    throw new Error(`Error inserting: table “${table}” does not exist`);\n  }\n\n  // Inserting checks all the fields in the table and adds any default\n  // values necessary\n  Object.keys(tableSchema).forEach(field => {\n    const fieldDesc = tableSchema[field];\n\n    if (obj[field] == null) {\n      if (fieldDesc.default !== undefined) {\n        obj[field] =\n          typeof fieldDesc.default === 'function'\n            ? fieldDesc.default()\n            : fieldDesc.default;\n      } else if (isRequired(field, fieldDesc)) {\n        // Although this check is also done in `conform`, it only\n        // checks the fields in `obj`. For insert, we need to do it\n        // here to check that all required fields in the table exist\n        throw new Error(\n          `“${field}” is required for table “${table}”: ${JSON.stringify(obj)}`,\n        );\n      }\n    }\n  });\n\n  // We use `skipNull` to remove any null values. There's no need to\n  // set those when inserting, that will be the default and it reduces\n  // the amount of messages generated to sync\n  return conform(schema, schemaConfig, table, obj, { skipNull: true });\n}\n\nexport function convertForUpdate(schema, schemaConfig, table, rawObj) {\n  const obj = { ...rawObj };\n\n  const tableSchema = schema[table];\n  if (tableSchema == null) {\n    throw new Error(`Error updating: table “${table}” does not exist`);\n  }\n\n  return conform(schema, schemaConfig, table, obj);\n}\n\nexport function convertFromSelect(schema, schemaConfig, table, obj) {\n  const tableSchema = schema[table];\n  if (tableSchema == null) {\n    throw new Error(`Table “${table}” does not exist`);\n  }\n\n  const fields = Object.keys(tableSchema);\n  const result = {};\n  for (let i = 0; i < fields.length; i++) {\n    const fieldName = fields[i];\n    const fieldDesc = tableSchema[fieldName];\n\n    result[fieldName] = convertOutputType(obj[fieldName], fieldDesc.type);\n  }\n  return result;\n}\n","// @ts-strict-ignore\nimport { QueryState } from '../../shared/query';\nimport * as db from '../db';\n\nimport {\n  compileQuery,\n  CompilerState,\n  defaultConstructQuery,\n  OutputTypes,\n  SchemaConfig,\n  SqlPieces,\n} from './compiler';\nimport { convertInputType, convertOutputType } from './schema-helpers';\n\n// TODO (compiler):\n// * Properly safeguard all inputs against SQL injection\n// * Functions for incr/decr dates\n// * Support HAVING\n// * Allow creating in-memory tables to run queries against static\n//   data\n// * For aggregate functions on selected ids, manually implement\n//   them only only support a specific few (sum amount / etc)\n// * Select expressions should be evaluated first, and added to a\n//   global \"field lookup\" table that other filter/groupBy/etc\n//   expressions can reference\n\nfunction applyTypes(data: Record<string, unknown>[], outputTypes: OutputTypes) {\n  for (let i = 0; i < data.length; i++) {\n    const item = data[i];\n    Object.keys(item).forEach(name => {\n      item[name] = convertOutputType(item[name], outputTypes.get(name));\n    });\n  }\n}\n\nexport async function execQuery(\n  queryState: QueryState,\n  compilerState: CompilerState,\n  sqlPieces: SqlPieces,\n  params: (string | number)[],\n  outputTypes: OutputTypes,\n) {\n  const sql = defaultConstructQuery(queryState, compilerState, sqlPieces);\n  const data = await db.all<Record<string, unknown>>(sql, params);\n  applyTypes(data, outputTypes);\n  return data;\n}\n\nexport type AqlQueryExecutor = (\n  compilerState: CompilerState,\n  queryState: QueryState,\n  sqlPieces: SqlPieces,\n  params: (string | number)[],\n  outputTypes: OutputTypes,\n) => Promise<Record<string, unknown>[]>;\n\ntype AqlQueryParamName = string;\ntype AqlQueryParamValue = unknown;\nexport type AqlQueryParams = Record<AqlQueryParamName, AqlQueryParamValue>;\n\nexport type RunCompiledAqlQueryOptions = {\n  params?: AqlQueryParams;\n  executors?: Record<string, AqlQueryExecutor>;\n};\n\nexport async function runCompiledAqlQuery(\n  queryState: QueryState,\n  sqlPieces: SqlPieces,\n  compilerState: CompilerState,\n  { params = {}, executors = {} }: RunCompiledAqlQueryOptions = {},\n) {\n  const paramArray = compilerState.namedParameters.map(param => {\n    const name = param.paramName;\n    if (params[name] === undefined) {\n      throw new Error(`Parameter ${name} not provided to query`);\n    }\n    return convertInputType(params[name], param.paramType);\n  });\n\n  let data: Record<string, unknown>[] = [];\n  if (executors[compilerState.implicitTableName]) {\n    data = await executors[compilerState.implicitTableName](\n      compilerState,\n      queryState,\n      sqlPieces,\n      paramArray,\n      compilerState.outputTypes,\n    );\n  } else {\n    data = await execQuery(\n      queryState,\n      compilerState,\n      sqlPieces,\n      paramArray,\n      compilerState.outputTypes,\n    );\n  }\n\n  if (queryState.calculation) {\n    if (data.length > 0) {\n      const row = data[0];\n      const k = Object.keys(row)[0];\n      // TODO: the function being run should be the one to\n      // determine the default value, not hardcoded as 0\n      return row[k] || 0;\n    } else {\n      return null;\n    }\n  }\n\n  return data;\n}\n\nexport async function compileAndRunAqlQuery(\n  schema,\n  schemaConfig: SchemaConfig,\n  queryState: QueryState,\n  options: RunCompiledAqlQueryOptions,\n) {\n  const { sqlPieces, state } = compileQuery(queryState, schema, schemaConfig);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const data: any = await runCompiledAqlQuery(\n    queryState,\n    sqlPieces,\n    state,\n    options,\n  );\n  return { data, dependencies: state.dependencies };\n}\n","// @ts-strict-ignore\nimport { SchemaConfig } from '../compiler';\n\nfunction f(type: string, opts?: Record<string, unknown>) {\n  return { type, ...opts };\n}\n\n// This is the table schema!\n//\n// The schema itself is the public API for querying and updating data.\n// The schema config provides a lot of control over how queries are\n// constructed other metadata used by the executors. The goal is to\n// provide a simple interface to the app, but allow the backend to\n// highly optimize how queries are run.\n//\n// A few notes:\n//\n// * `transactions` is a special table and is has a highly customized\n// executor (see `executors.js`) for performace. It should mostly be\n// transparent to you, but it's worth reading the comments in there if\n// requirements change, especially regarding split transactions.\n//\n// * You should rarely change the schema and only add to it, but it is\n// relatively safe to change if needed. The only problem is changing a\n// public API, but that could be mitigated with an option in schema\n// config to map field name for backwards compatibility.\n//\n// * It's important that the table names here in the schema map to the\n// real tables in sqlite that are updated. Otherwise subscriptions\n// might not work because the dependencies are wrong. If needed in the\n// future, we can provide another option in the schema config to map a\n// table name the internal table that is updated.\n\nexport const schema = {\n  transactions: {\n    id: f('id'),\n    is_parent: f('boolean'),\n    is_child: f('boolean'),\n    parent_id: f('id'),\n    account: f('id', { ref: 'accounts', required: true }),\n    category: f('id', { ref: 'categories' }),\n    amount: f('integer', { default: 0, required: true }),\n    payee: f('id', { ref: 'payees' }),\n    notes: f('string'),\n    date: f('date', { required: true }),\n    imported_id: f('string'),\n    error: f('json'),\n    imported_payee: f('string'),\n    starting_balance_flag: f('boolean'),\n    transfer_id: f('id'),\n    sort_order: f('float', { default: () => Date.now() }),\n    cleared: f('boolean', { default: true }),\n    reconciled: f('boolean', { default: false }),\n    tombstone: f('boolean'),\n    schedule: f('id', { ref: 'schedules' }),\n    raw_synced_data: f('string'),\n    // subtransactions is a special field added if the table has the\n    // `splits: grouped` option\n  },\n  payees: {\n    id: f('id'),\n    name: f('string', { required: true }),\n    transfer_acct: f('id', { ref: 'accounts' }),\n    tombstone: f('boolean'),\n    favorite: f('boolean'),\n    learn_categories: f('boolean'),\n  },\n  accounts: {\n    id: f('id'),\n    name: f('string', { required: true }),\n    offbudget: f('boolean'),\n    closed: f('boolean'),\n    sort_order: f('float'),\n    tombstone: f('boolean'),\n    account_id: f('string'),\n    official_name: f('string'),\n    account_sync_source: f('string'),\n    last_reconciled: f('string'),\n    last_sync: f('string'),\n  },\n  categories: {\n    id: f('id'),\n    name: f('string'),\n    is_income: f('boolean'),\n    hidden: f('boolean'),\n    group: f('id', { ref: 'category_groups' }),\n    goal_def: f('string'),\n    sort_order: f('float'),\n    tombstone: f('boolean'),\n  },\n  category_groups: {\n    id: f('id'),\n    name: f('string'),\n    is_income: f('boolean'),\n    hidden: f('boolean'),\n    sort_order: f('float'),\n    tombstone: f('boolean'),\n  },\n  schedules: {\n    id: f('id'),\n    name: f('string'),\n    rule: f('id', { ref: 'rules', required: true }),\n    next_date: f('date'),\n    completed: f('boolean'),\n    posts_transaction: f('boolean'),\n    tombstone: f('boolean'),\n\n    // These are special fields that are actually pulled from the\n    // underlying rule\n    _payee: f('id', { ref: 'payees' }),\n    _account: f('id', { ref: 'accounts' }),\n    _amount: f('json/fallback'),\n    _amountOp: f('string'),\n    _date: f('json/fallback'),\n    _conditions: f('json'),\n    _actions: f('json'),\n  },\n  rules: {\n    id: f('id'),\n    stage: f('string'),\n    conditions_op: f('string'),\n    conditions: f('json'),\n    actions: f('json'),\n    tombstone: f('boolean'),\n  },\n  notes: {\n    id: f('id'),\n    note: f('string'),\n  },\n  preferences: {\n    id: f('id'),\n    value: f('string'),\n  },\n  transaction_filters: {\n    id: f('id'),\n    name: f('string'),\n    conditions_op: f('string'),\n    conditions: f('json'),\n    tombstone: f('boolean'),\n  },\n  custom_reports: {\n    id: f('id'),\n    name: f('string'),\n    start_date: f('string', { default: '2023-06' }),\n    end_date: f('string', { default: '2023-09' }),\n    date_static: f('integer', { default: 0 }),\n    date_range: f('string'),\n    mode: f('string', { default: 'total' }),\n    group_by: f('string', { default: 'Category' }),\n    sort_by: f('string', { default: 'desc' }),\n    balance_type: f('string', { default: 'Expense' }),\n    show_empty: f('integer', { default: 0 }),\n    show_offbudget: f('integer', { default: 0 }),\n    show_hidden: f('integer', { default: 0 }),\n    show_uncategorized: f('integer', { default: 0 }),\n    include_current: f('integer', { default: 0 }),\n    graph_type: f('string', { default: 'BarGraph' }),\n    conditions: f('json'),\n    conditions_op: f('string'),\n    metadata: f('json'),\n    interval: f('string', { default: 'Monthly' }),\n    color_scheme: f('json'),\n    tombstone: f('boolean'),\n  },\n  reflect_budgets: {\n    id: f('id'),\n    month: f('integer'),\n    category: f('string'),\n    amount: f('integer'),\n    carryover: f('integer'),\n    goal: f('integer'),\n    long_goal: f('integer'),\n  },\n  zero_budgets: {\n    id: f('id'),\n    month: f('integer'),\n    category: f('string', { ref: 'categories' }),\n    amount: f('integer'),\n    carryover: f('integer'),\n    goal: f('integer'),\n    long_goal: f('integer'),\n  },\n  dashboard: {\n    id: f('id'),\n    type: f('string', { required: true }),\n    width: f('integer', { required: true }),\n    height: f('integer', { required: true }),\n    x: f('integer', { required: true }),\n    y: f('integer', { required: true }),\n    meta: f('json'),\n    tombstone: f('boolean'),\n  },\n};\n\nexport const schemaConfig: SchemaConfig = {\n  // Note: these views *must* represent the underlying table that we\n  // are mapping here. The compiler makes optimizations with this\n  // assumption\n  tableViews(name, { isJoin, withDead, tableOptions = { splits: undefined } }) {\n    switch (name) {\n      case 'transactions': {\n        // If joining, we always only show alive transactions. There's\n        // no way to configure join behavior yet\n        if (isJoin) {\n          return 'v_transactions_internal_alive';\n        }\n\n        const splitType = tableOptions.splits || 'inline';\n        // Use the view to exclude dead transactions if using `inline` or `none`\n        if (!withDead && (splitType === 'inline' || splitType === 'none')) {\n          return 'v_transactions_internal_alive';\n        }\n\n        // Otherwse we disregard the `withDead` option here and handle\n        // that in the executors to improve performance\n        return 'v_transactions_internal';\n      }\n\n      case 'schedules':\n        return 'v_schedules';\n\n      case 'categories':\n        return 'v_categories';\n\n      case 'payees':\n        return 'v_payees';\n\n      default:\n    }\n    return name;\n  },\n\n  customizeQuery(queryState) {\n    const { table: tableName } = queryState;\n\n    function orderBy(orders) {\n      // If order was specified, always add id as the last sort to make\n      // it deterministic\n      if (orders.length > 0) {\n        return orders.concat(['id']);\n      }\n\n      // Otherwise, these are the default orders for each table\n      switch (tableName) {\n        case 'transactions':\n          return [\n            { date: 'desc' },\n            'starting_balance_flag',\n            { sort_order: 'desc' },\n            'id',\n          ];\n        case 'category_groups':\n          return ['is_income', 'sort_order', 'id'];\n        case 'categories':\n          return ['sort_order', 'id'];\n        case 'payees':\n          return [\n            { $condition: { transfer_acct: null }, $dir: 'desc' },\n            { $nocase: '$name' },\n          ];\n        case 'accounts':\n          return ['sort_order', 'name'];\n        case 'schedules':\n          return [{ $condition: { completed: true } }, 'next_date'];\n        default:\n      }\n\n      return [];\n    }\n\n    return {\n      ...queryState,\n      orderExpressions: orderBy(queryState.orderExpressions),\n    };\n  },\n\n  views: {\n    payees: {\n      v_payees: internalFields => {\n        const fields = internalFields({\n          name: 'COALESCE(__accounts.name, _.name)',\n        });\n\n        return `\n          SELECT ${fields} FROM payees _\n          LEFT JOIN accounts __accounts ON (_.transfer_acct = __accounts.id AND __accounts.tombstone = 0)\n          -- We never want to show transfer payees that are pointing to deleted accounts.\n          -- Either this is not a transfer payee, if the account exists\n          WHERE _.transfer_acct IS NULL OR __accounts.id IS NOT NULL\n        `;\n      },\n    },\n\n    categories: {\n      fields: {\n        group: 'cat_group',\n      },\n\n      v_categories: internalFields => {\n        const fields = internalFields({ group: 'cat_group' });\n        return `SELECT ${fields} FROM categories _`;\n      },\n    },\n\n    schedules: {\n      v_schedules: internalFields => {\n        /* eslint-disable actual/typography */\n        const fields = internalFields({\n          next_date: `\n            CASE\n              WHEN _nd.local_next_date_ts = _nd.base_next_date_ts THEN _nd.local_next_date\n              ELSE _nd.base_next_date\n            END\n          `,\n          _payee: `pm.targetId`,\n          _account: `json_extract(_rules.conditions, _paths.account || '.value')`,\n          _amount: `json_extract(_rules.conditions, _paths.amount || '.value')`,\n          _amountOp: `json_extract(_rules.conditions, _paths.amount || '.op')`,\n          _date: `json_extract(_rules.conditions, _paths.date || '.value')`,\n          _conditions: '_rules.conditions',\n          _actions: '_rules.actions',\n        });\n\n        return `\n        SELECT ${fields} FROM schedules _\n        LEFT JOIN schedules_next_date _nd ON _nd.schedule_id = _.id\n        LEFT JOIN schedules_json_paths _paths ON _paths.schedule_id = _.id\n        LEFT JOIN rules _rules ON _rules.id = _.rule\n        LEFT JOIN payee_mapping pm ON pm.id = json_extract(_rules.conditions, _paths.payee || '.value')\n        `;\n        /* eslint-enable actual/typography */\n      },\n    },\n\n    transactions: {\n      fields: {\n        is_parent: 'isParent',\n        is_child: 'isChild',\n        account: 'acct',\n        imported_id: 'financial_id',\n        imported_payee: 'imported_description',\n        transfer_id: 'transferred_id',\n        payee: 'description',\n      },\n\n      v_transactions_internal: internalFields => {\n        // Override some fields to make custom stuff\n        const fields = internalFields({\n          payee: 'pm.targetId',\n          category: `CASE WHEN _.isParent = 1 THEN NULL ELSE cm.transferId END`,\n          amount: `IFNULL(_.amount, 0)`,\n          parent_id: 'CASE WHEN _.isChild = 0 THEN NULL ELSE _.parent_id END',\n        });\n\n        return `\n          SELECT ${fields} FROM transactions _\n          LEFT JOIN category_mapping cm ON cm.id = _.category\n          LEFT JOIN payee_mapping pm ON pm.id = _.description\n          WHERE\n           _.date IS NOT NULL AND\n           _.acct IS NOT NULL AND\n           (_.isChild = 0 OR _.parent_id IS NOT NULL)\n        `;\n      },\n\n      // We join on t2 to only include valid child transactions. We\n      // want to only include ones with valid parents, which is when\n      // an alive parent transaction exists\n      v_transactions_internal_alive: `\n        SELECT _.* FROM v_transactions_internal _\n        LEFT JOIN transactions t2 ON (_.is_child = 1 AND t2.id = _.parent_id)\n        WHERE IFNULL(_.tombstone, 0) = 0 AND (_.is_child = 0 OR t2.tombstone = 0)\n      `,\n\n      v_transactions: (_, publicFields) => {\n        const fields = publicFields({\n          payee: 'p.id',\n          category: 'c.id',\n          account: 'a.id',\n        });\n\n        // This adds an order, and also validates any id references by\n        // selecting the ids through a join which return null if they\n        // are dead\n        return `\n          SELECT ${fields} FROM v_transactions_internal_alive _\n          LEFT JOIN payees p ON (p.id = _.payee AND p.tombstone = 0)\n          LEFT JOIN categories c ON (c.id = _.category AND c.tombstone = 0)\n          LEFT JOIN accounts a ON (a.id = _.account AND a.tombstone = 0)\n          ORDER BY _.date desc, _.starting_balance_flag, _.sort_order desc, _.id;\n        `;\n      },\n    },\n  },\n};\n","// @ts-strict-ignore\nexport async function incrFetch(\n  runQuery,\n  terms,\n  compare,\n  makeQuery,\n  params = [],\n) {\n  const pageCount = 500;\n  let results = [];\n\n  let fetchedIds = new Set();\n\n  for (let i = 0; i < terms.length; i += pageCount) {\n    const slice = terms\n      .slice(i, i + pageCount)\n      .filter(id => !fetchedIds.has(id));\n    if (slice.length > 0) {\n      const filter = slice.map(id => compare(id)).join(' OR ');\n      const query = makeQuery('(' + filter + ')');\n\n      const rows = await runQuery(query, params, true);\n      fetchedIds = new Set([...fetchedIds, ...slice]);\n      results = results.concat(rows);\n    }\n  }\n\n  return results;\n}\n\nexport function whereIn(ids: string[], field: string) {\n  const ids2 = [...new Set(ids)];\n  // eslint-disable-next-line actual/typography\n  const filter = `${field} IN (` + ids2.map(id => `'${id}'`).join(',') + ')';\n  return filter;\n}\n","// @ts-strict-ignore\n\nimport { aqlQuery } from '..';\nimport { q, QueryState } from '../../../shared/query';\nimport { CategoryEntity } from '../../../types/models';\nimport * as db from '../../db';\nimport { whereIn } from '../../db/util';\nimport {\n  CompilerState,\n  isAggregateQuery,\n  OutputTypes,\n  SqlPieces,\n} from '../compiler';\nimport { AqlQueryExecutor, execQuery } from '../exec';\nimport { convertOutputType } from '../schema-helpers';\n\n// Transactions executor\n\ntype SplitsOption = 'all' | 'inline' | 'none' | 'grouped';\n\nfunction toGroup(parents, children, mapper = x => x) {\n  return parents.reduce((list, parent) => {\n    const childs = children.get(parent.id) || [];\n    list.push({\n      ...mapper(parent),\n      subtransactions: childs.map(mapper),\n    });\n    return list;\n  }, []);\n}\n\n// These two queries will return very different things:\n//\n// q('transactions').select({ $count: 'id' })\n// q('transactions', { splits: \"grouped\" }).select({ $count: 'id' })\n//\n// The first will return the count of non-split and child\n// transactions, and the second will return the count of all parent\n// (or non-split) transactions\n\nfunction execTransactions(\n  compilerState: CompilerState,\n  queryState: QueryState,\n  sqlPieces: SqlPieces,\n  params: (string | number)[],\n  outputTypes: OutputTypes,\n) {\n  const tableOptions = queryState.tableOptions || {};\n  const splitType = tableOptions.splits\n    ? (tableOptions.splits as string)\n    : 'inline';\n  if (!isValidSplitsOption(splitType)) {\n    throw new Error(`Invalid “splits” option for transactions: “${splitType}”`);\n  }\n\n  if (splitType === 'all' || splitType === 'inline' || splitType === 'none') {\n    return execTransactionsBasic(\n      compilerState,\n      queryState,\n      sqlPieces,\n      params,\n      splitType,\n      outputTypes,\n    );\n  } else if (splitType === 'grouped') {\n    return execTransactionsGrouped(\n      compilerState,\n      queryState,\n      sqlPieces,\n      params,\n      outputTypes,\n    );\n  }\n}\n\nfunction _isUnhappy(filter) {\n  // These fields can be filtered - all split transactions will\n  // still be returned regardless\n  for (const key of Object.keys(filter)) {\n    if (key === '$or' || key === '$and') {\n      if (filter[key] && _isUnhappy(filter[key])) {\n        return true;\n      }\n    } else if (!(key.indexOf('account') === 0 || key === 'date')) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function isHappyPathQuery(queryState) {\n  return queryState.filterExpressions.find(_isUnhappy) == null;\n}\n\nasync function execTransactionsGrouped(\n  compilerState: CompilerState,\n  queryState: QueryState,\n  sqlPieces: SqlPieces,\n  params: (string | number)[],\n  outputTypes: OutputTypes,\n) {\n  const { withDead } = queryState;\n  const whereDead = withDead ? '' : `AND ${sqlPieces.from}.tombstone = 0`;\n\n  // Aggregate queries don't make sense for a grouped transactions\n  // query. We never should include both parent and children\n  // transactions as it would duplicate amounts and the final number\n  // would never make sense. In this case, switch back to the \"inline\"\n  // type where only non-parent transactions are considered\n  if (isAggregateQuery(queryState)) {\n    const s = { ...sqlPieces };\n\n    // Modify the where to only include non-parents\n    s.where = `${s.where} AND ${s.from}.is_parent = 0`;\n\n    // We also want to exclude deleted transactions. Normally we\n    // handle this manually down below, but now that we are doing a\n    // normal query we want to rely on the view. Unfortunately, SQL\n    // has already been generated so we can't easily change the view\n    // name here; instead, we change it and map it back to the name\n    // used elsewhere in the query. Ideally we'd improve this\n    if (!withDead) {\n      s.from = 'v_transactions_internal_alive v_transactions_internal';\n    }\n\n    return execQuery(queryState, compilerState, s, params, outputTypes);\n  }\n\n  let rows;\n  let matched = null;\n\n  if (isHappyPathQuery(queryState)) {\n    // This is just an optimization - we can just filter out children\n    // directly and only list parents\n    const rowSql = `\n      SELECT ${sqlPieces.from}.id as group_id\n      FROM ${sqlPieces.from}\n      ${sqlPieces.joins}\n      ${sqlPieces.where} AND is_child = 0 ${whereDead}\n      ${sqlPieces.orderBy}\n      ${sqlPieces.limit != null ? `LIMIT ${sqlPieces.limit}` : ''}\n      ${sqlPieces.offset != null ? `OFFSET ${sqlPieces.offset}` : ''}\n    `;\n    rows = await db.all<db.DbViewTransactionInternal>(rowSql, params);\n  } else {\n    // TODO: phew, what a doozy. write docs why it works this way\n    //\n    // prettier-ignore\n    const rowSql = `\n      SELECT group_id, matched FROM (\n        SELECT\n          group_id,\n          GROUP_CONCAT(id) as matched\n          FROM (\n            SELECT ${sqlPieces.from}.id, IFNULL(${sqlPieces.from}.parent_id, ${sqlPieces.from}.id) as group_id\n            FROM ${sqlPieces.from}\n            LEFT JOIN transactions _t2 ON ${sqlPieces.from}.is_child = 1 AND _t2.id = ${sqlPieces.from}.parent_id\n            ${sqlPieces.joins}\n            ${sqlPieces.where} AND ${sqlPieces.from}.tombstone = 0 AND IFNULL(_t2.tombstone, 0) = 0\n          )\n        GROUP BY group_id\n      )\n      LEFT JOIN ${sqlPieces.from} ON ${sqlPieces.from}.id = group_id\n      ${sqlPieces.joins}\n      ${sqlPieces.orderBy}\n      ${sqlPieces.limit != null ? `LIMIT ${sqlPieces.limit}` : ''}\n      ${sqlPieces.offset != null ? `OFFSET ${sqlPieces.offset}` : ''}\n    `;\n\n    rows = await db.all<db.DbViewTransactionInternal>(rowSql, params);\n    matched = new Set(\n      [].concat.apply(\n        [],\n        rows.map(row => row.matched.split(',')),\n      ),\n    );\n  }\n\n  const where = whereIn(\n    rows.map(row => row.group_id),\n    `IFNULL(${sqlPieces.from}.parent_id, ${sqlPieces.from}.id)`,\n  );\n  const finalSql = `\n    SELECT ${sqlPieces.select}, parent_id AS _parent_id FROM ${sqlPieces.from}\n    ${sqlPieces.joins}\n    WHERE ${where} ${whereDead}\n    ${sqlPieces.orderBy}\n  `;\n\n  const allRows = await db.all<\n    db.DbViewTransactionInternal & {\n      _parent_id: db.DbViewTransactionInternal['parent_id'];\n    }\n  >(finalSql);\n\n  // Group the parents and children up\n  const { parents, children } = allRows.reduce(\n    (acc, trans) => {\n      const pid = trans._parent_id;\n      delete trans._parent_id;\n\n      if (pid == null) {\n        acc.parents.push(trans);\n      } else {\n        const arr = acc.children.get(pid) || [];\n        arr.push(trans);\n        acc.children.set(pid, arr);\n      }\n      return acc;\n    },\n    { parents: [], children: new Map() },\n  );\n\n  const mapper = trans => {\n    Object.keys(trans).forEach(name => {\n      trans[name] = convertOutputType(trans[name], outputTypes.get(name));\n    });\n\n    if (matched && !matched.has(trans.id)) {\n      trans._unmatched = true;\n    }\n    return trans;\n  };\n\n  return toGroup(parents, children, mapper);\n}\n\nasync function execTransactionsBasic(\n  compilerState: CompilerState,\n  queryState: QueryState,\n  sqlPieces: SqlPieces,\n  params: (string | number)[],\n  splitType: SplitsOption,\n  outputTypes: OutputTypes,\n) {\n  const s = { ...sqlPieces };\n\n  if (splitType !== 'all') {\n    if (splitType === 'none') {\n      s.where = `${s.where} AND ${s.from}.parent_id IS NULL`;\n    } else {\n      s.where = `${s.where} AND ${s.from}.is_parent = 0`;\n    }\n  }\n\n  return execQuery(queryState, compilerState, s, params, outputTypes);\n}\n\nfunction isValidSplitsOption(splits: string): splits is SplitsOption {\n  return ['all', 'inline', 'none', 'grouped'].includes(splits);\n}\n\n// Category groups executor\n\ntype CategoriesOption = 'all' | 'none';\n\nasync function execCategoryGroups(\n  compilerState: CompilerState,\n  queryState: QueryState,\n  sqlPieces: SqlPieces,\n  params: (string | number)[],\n  outputTypes: OutputTypes,\n) {\n  const tableOptions = queryState.tableOptions || {};\n  const categoriesOption = tableOptions.categories\n    ? (tableOptions.categories as string)\n    : 'all';\n  if (!isValidCategoriesOption(categoriesOption)) {\n    throw new Error(\n      `Invalid “categories” option for category_groups: “${categoriesOption}”`,\n    );\n  }\n\n  if (categoriesOption !== 'none') {\n    return execCategoryGroupsWithCategories(\n      compilerState,\n      queryState,\n      sqlPieces,\n      params,\n      categoriesOption,\n      outputTypes,\n    );\n  }\n  return execCategoryGroupsBasic(\n    compilerState,\n    queryState,\n    sqlPieces,\n    params,\n    outputTypes,\n  );\n}\n\nasync function execCategoryGroupsWithCategories(\n  compilerState: CompilerState,\n  queryState: QueryState,\n  sqlPieces: SqlPieces,\n  params: (string | number)[],\n  categoriesOption: CategoriesOption,\n  outputTypes: OutputTypes,\n) {\n  const categoryGroups = await execCategoryGroupsBasic(\n    compilerState,\n    queryState,\n    sqlPieces,\n    params,\n    outputTypes,\n  );\n\n  if (categoriesOption === 'none') {\n    return categoryGroups;\n  }\n\n  const { data: categories }: { data: CategoryEntity[] } = await aqlQuery(\n    q('categories')\n      .filter({\n        group: { $oneof: categoryGroups.map(cg => cg.id) },\n      })\n      .select('*'),\n  );\n\n  return categoryGroups.map(group => {\n    const cats = categories.filter(cat => cat.group === group.id);\n    return {\n      ...group,\n      categories: cats,\n    };\n  });\n}\n\nasync function execCategoryGroupsBasic(\n  compilerState: CompilerState,\n  queryState: QueryState,\n  sqlPieces: SqlPieces,\n  params: (string | number)[],\n  outputTypes: OutputTypes,\n) {\n  return execQuery(queryState, compilerState, sqlPieces, params, outputTypes);\n}\n\nfunction isValidCategoriesOption(\n  categories: string,\n): categories is CategoriesOption {\n  return ['all', 'none'].includes(categories);\n}\n\nexport const schemaExecutors: Record<string, AqlQueryExecutor> = {\n  transactions: execTransactions,\n  category_groups: execCategoryGroups,\n};\n","// @ts-strict-ignore\nimport { quoteAlias } from './compiler';\n\nfunction selectFields(fields) {\n  return Object.keys(fields)\n    .map(as => {\n      let field = fields[as];\n      const needsAs = field !== as;\n      // If it's just an identifier, we automatically prefix it with\n      // `_.` which makes sure it references the root table\n      if (!field.match(/[ .]/)) {\n        field = `_.${field}`;\n      }\n      return needsAs ? `${field} AS ${quoteAlias(as)}` : `${field}`;\n    })\n    .join(', ');\n}\n\nexport function makeViews(schema, schemaConfig) {\n  const views = schemaConfig.views;\n  const viewStrs = [];\n\n  Object.keys(views).forEach(table => {\n    const { fields: fieldMappings = {}, ...tableViews } = views[table];\n\n    const publicFields = Object.fromEntries(\n      Object.keys(schema[table]).map(name => [name, name]),\n    );\n    const internalFields = { ...publicFields, ...fieldMappings };\n\n    Object.keys(tableViews).forEach(viewName => {\n      const publicMaker = overrides => {\n        const fields = { ...publicFields, ...overrides };\n        return selectFields(fields);\n      };\n      const internalMaker = overrides => {\n        const fields = { ...internalFields, ...overrides };\n        return selectFields(fields);\n      };\n\n      let sql;\n      if (typeof tableViews[viewName] === 'function') {\n        sql = tableViews[viewName](internalMaker, publicMaker);\n      } else {\n        sql = tableViews[viewName];\n      }\n      sql = sql.trim().replace(/;$/, '');\n\n      viewStrs.push(`\n        DROP VIEW IF EXISTS ${viewName};\n        CREATE VIEW ${viewName} AS ${sql};\n      `);\n    });\n  });\n\n  return viewStrs.join('\\n');\n}\n","import { Query, type QueryState } from '../../shared/query';\n\nimport { CompilerState, SqlPieces } from './compiler';\nimport {\n  AqlQueryParams,\n  compileAndRunAqlQuery,\n  runCompiledAqlQuery,\n} from './exec';\nimport { schema, schemaConfig } from './schema';\nimport { schemaExecutors } from './schema/executors';\n\nexport {\n  convertForInsert,\n  convertForUpdate,\n  convertFromSelect,\n  convertInputType,\n} from './schema-helpers';\nexport { compileQuery } from './compiler';\nexport { makeViews } from './views';\nexport { schema, schemaConfig } from './schema';\n\nexport function aqlCompiledQuery(\n  queryState: QueryState,\n  sqlPieces: SqlPieces,\n  compilerState: CompilerState,\n  params?: AqlQueryParams,\n) {\n  return runCompiledAqlQuery(queryState, sqlPieces, compilerState, {\n    params,\n    executors: schemaExecutors,\n  });\n}\n\nexport function aqlQuery(query: Query | QueryState, params?: AqlQueryParams) {\n  if (query instanceof Query) {\n    query = query.serialize();\n  }\n\n  return compileAndRunAqlQuery(schema, schemaConfig, query, {\n    params,\n    executors: schemaExecutors,\n  });\n}\n","export const logger = {\n  info: (...args: unknown[]) => {\n    console.log(...args);\n  },\n  warn: (...args: unknown[]) => {\n    console.warn(...args);\n  },\n};\n","// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype AnyFunction = (...args: any[]) => any;\n\nexport function sequential<T extends AnyFunction>(\n  fn: T,\n): (...args: Parameters<T>) => Promise<Awaited<ReturnType<T>>> {\n  const sequenceState: {\n    running: Promise<Awaited<ReturnType<T>>> | null;\n    queue: Array<{\n      args: Parameters<T>;\n      resolve: (\n        value: Awaited<ReturnType<T>> | PromiseLike<Awaited<ReturnType<T>>>,\n      ) => void;\n      reject: (reason?: unknown) => void;\n    }>;\n  } = {\n    running: null,\n    queue: [],\n  };\n\n  function pump() {\n    const next = sequenceState.queue.shift();\n    if (next !== undefined) {\n      run(next.args, next.resolve, next.reject);\n    } else {\n      sequenceState.running = null;\n    }\n  }\n\n  function run(\n    args: Parameters<T>,\n    resolve: (\n      value: Awaited<ReturnType<T>> | PromiseLike<Awaited<ReturnType<T>>>,\n    ) => void,\n    reject: (reason?: unknown) => void,\n  ) {\n    sequenceState.running = fn.apply(null, args).then(\n      (val: Awaited<ReturnType<T>> | PromiseLike<Awaited<ReturnType<T>>>) => {\n        pump();\n        resolve(val);\n      },\n      (err: unknown) => {\n        pump();\n        reject(err);\n      },\n    );\n  }\n\n  return ((...args: Parameters<T>) => {\n    if (!sequenceState.running) {\n      return new Promise<Awaited<ReturnType<T>>>((resolve, reject) => {\n        return run(args, resolve, reject);\n      });\n    } else {\n      return new Promise<Awaited<ReturnType<T>>>((resolve, reject) => {\n        sequenceState.queue.push({ resolve, reject, args });\n      });\n    }\n  }) as T;\n}\n\nexport function once<T extends AnyFunction>(\n  fn: T,\n): (...args: Parameters<T>) => Promise<Awaited<ReturnType<T>>> | null {\n  let promise: Promise<Awaited<ReturnType<T>>> | null = null;\n  return (...args: Parameters<T>) => {\n    if (!promise) {\n      promise = fn.apply(null, args).finally(() => {\n        promise = null;\n      });\n      return promise;\n    }\n\n    return promise;\n  };\n}\n","// @ts-strict-ignore\nexport function Graph() {\n  const graph = {\n    addNode,\n    removeNode,\n    adjacent,\n    adjacentIncoming,\n    addEdge,\n    removeEdge,\n    removeIncomingEdges,\n    topologicalSort,\n    generateDOT,\n    getEdges,\n  };\n\n  const edges = new Map();\n  const incomingEdges = new Map();\n\n  function getEdges() {\n    return { edges, incomingEdges };\n  }\n\n  function addNode(node) {\n    edges.set(node, adjacent(node));\n    incomingEdges.set(node, adjacentIncoming(node));\n    return graph;\n  }\n\n  function removeIncomingEdges(node) {\n    const incoming = adjacentIncoming(node);\n    incomingEdges.set(node, new Set());\n\n    const iter = incoming.values();\n    let cur = iter.next();\n    while (!cur.done) {\n      removeEdge(cur.value, node);\n      cur = iter.next();\n    }\n  }\n\n  function removeNode(node) {\n    removeIncomingEdges(node);\n    edges.delete(node);\n    incomingEdges.delete(node);\n    return graph;\n  }\n\n  function adjacent(node) {\n    return edges.get(node) || new Set();\n  }\n\n  function adjacentIncoming(node) {\n    return incomingEdges.get(node) || new Set();\n  }\n\n  // Adds an edge from node u to node v.\n  // Implicitly adds the nodes if they were not already added.\n  function addEdge(node1, node2) {\n    addNode(node1);\n    addNode(node2);\n    adjacent(node1).add(node2);\n    adjacentIncoming(node2).add(node1);\n    return graph;\n  }\n\n  // Removes the edge from node u to node v.\n  // Does not remove the nodes.\n  // Does nothing if the edge does not exist.\n  function removeEdge(node1, node2) {\n    if (edges.has(node1)) {\n      adjacent(node1).delete(node2);\n    }\n    if (incomingEdges.has(node2)) {\n      adjacentIncoming(node2).delete(node1);\n    }\n    return graph;\n  }\n\n  function topologicalSort(sourceNodes) {\n    const visited = new Set();\n    const sorted = [];\n\n    sourceNodes.forEach(name => {\n      if (!visited.has(name)) {\n        topologicalSortIterable(name, visited, sorted);\n      }\n    });\n\n    return sorted;\n  }\n\n  function topologicalSortIterable(name, visited, sorted) {\n    const stackTrace: StackItem[] = [];\n\n    stackTrace.push({\n      count: -1,\n      value: name,\n      parent: '',\n      level: 0,\n    });\n\n    while (stackTrace.length > 0) {\n      const current = stackTrace.slice(-1)[0];\n\n      const adjacents = adjacent(current.value);\n      if (current.count === -1) {\n        current.count = adjacents.size;\n      }\n\n      if (current.count > 0) {\n        const iter = adjacents.values();\n        let cur = iter.next();\n        while (!cur.done) {\n          if (!visited.has(cur.value)) {\n            stackTrace.push({\n              count: -1,\n              parent: current.value,\n              value: cur.value,\n              level: current.level + 1,\n            });\n          } else {\n            current.count--;\n          }\n          cur = iter.next();\n        }\n      } else {\n        if (!visited.has(current.value)) {\n          visited.add(current.value);\n          sorted.unshift(current.value);\n        }\n\n        const removed = stackTrace.pop();\n        for (let i = 0; i < stackTrace.length; i++) {\n          if (stackTrace[i].value === removed.parent) {\n            stackTrace[i].count--;\n          }\n        }\n      }\n    }\n  }\n\n  function generateDOT() {\n    const edgeStrings = [];\n    edges.forEach(function (adj, edge) {\n      if (adj.length !== 0) {\n        edgeStrings.push(`${edge} -> {${adj.join(',')}}`);\n      }\n    });\n\n    return `\n    digraph G {\n      ${edgeStrings.join('\\n').replace(/!/g, '_')}\n    }\n    `;\n  }\n\n  return graph;\n}\n\ninterface StackItem {\n  count: number;\n  value: string;\n  parent: string;\n  level: number;\n}\n","// @ts-strict-ignore\nexport function unresolveName(name) {\n  const idx = name.indexOf('!');\n  if (idx !== -1) {\n    return {\n      sheet: name.slice(0, idx),\n      name: name.slice(idx + 1),\n    };\n  }\n  return { sheet: null, name };\n}\n\nexport function resolveName(sheet: string, name: string): string {\n  return sheet + '!' + name;\n}\n","// @ts-strict-ignore\nimport mitt from 'mitt';\n\nimport { QueryState } from '../../shared/query';\nimport { compileQuery, aqlCompiledQuery, schema, schemaConfig } from '../aql';\nimport { BudgetType } from '../prefs';\n\nimport { Graph } from './graph-data-structure';\nimport { unresolveName, resolveName } from './util';\n\nexport type Node = {\n  name: string;\n  expr: string | number | boolean;\n  value: string | number | boolean;\n  sheet: unknown;\n  query?: QueryState;\n  sql?: { sqlPieces: unknown; state: { dependencies: unknown[] } };\n  dynamic?: boolean;\n  _run?: unknown;\n  _dependencies?: string[];\n};\n\nexport class Spreadsheet {\n  _meta: {\n    createdMonths: Set<string>;\n    budgetType: BudgetType;\n  };\n  cacheBarrier;\n  computeQueue;\n  dirtyCells;\n  events;\n  graph;\n  nodes: Map<string, Node>;\n  running;\n  saveCache;\n  setCacheStatus;\n  transactionDepth;\n\n  constructor(saveCache?: unknown, setCacheStatus?: unknown) {\n    // @ts-expect-error Graph should be converted to class\n    this.graph = new Graph();\n    this.nodes = new Map<string, Node>();\n    this.transactionDepth = 0;\n    this.saveCache = saveCache;\n    this.setCacheStatus = setCacheStatus;\n    this.dirtyCells = [];\n    this.computeQueue = [];\n    this.events = mitt();\n    this._meta = {\n      createdMonths: new Set(),\n      budgetType: 'envelope',\n    };\n  }\n\n  meta() {\n    return this._meta;\n  }\n\n  setMeta(meta) {\n    this._meta = meta;\n  }\n\n  // Spreadsheet interface\n\n  _getNode(name: string): Node {\n    const { sheet } = unresolveName(name);\n\n    if (!this.nodes.has(name)) {\n      this.nodes.set(name, {\n        name,\n        expr: null,\n        value: null,\n        sheet,\n      });\n    }\n    return this.nodes.get(name);\n  }\n\n  getNode(name) {\n    return this._getNode(name);\n  }\n\n  hasCell(name) {\n    return this.nodes.has(name);\n  }\n\n  add(name, expr) {\n    this.set(name, expr);\n  }\n\n  getNodes() {\n    return this.nodes;\n  }\n\n  serialize() {\n    return {\n      graph: this.graph.getEdges(),\n      nodes: [...this.nodes.entries()],\n    };\n  }\n\n  transaction(func) {\n    this.startTransaction();\n    try {\n      func();\n    } catch (e) {\n      console.log(e);\n    }\n    return this.endTransaction();\n  }\n\n  startTransaction() {\n    this.transactionDepth++;\n  }\n\n  endTransaction() {\n    this.transactionDepth--;\n\n    if (this.transactionDepth === 0) {\n      const cells = this.dirtyCells;\n      this.dirtyCells = [];\n\n      this.queueComputation(this.graph.topologicalSort(cells));\n    }\n\n    return [];\n  }\n\n  queueComputation(cellNames) {\n    // TODO: Formally write out the different cases when the existing\n    // queue is not empty. There should be cases where we can easily\n    // optimize this by skipping computations if we know they are\n    // going to be computed again. The hard thing is to ensure that\n    // the order of computations stays correct\n\n    this.computeQueue = this.computeQueue.concat(cellNames);\n\n    // Begin running on the next tick so we guarantee that it doesn't finish\n    // within the same tick. Since some computations are async, this makes it\n    // consistent (otherwise it would only sometimes finish sync)\n    Promise.resolve().then(() => {\n      if (!this.running) {\n        this.runComputations();\n      }\n    });\n  }\n\n  runComputations(idx = 0) {\n    this.running = true;\n\n    while (idx < this.computeQueue.length) {\n      const name = this.computeQueue[idx];\n      let node;\n      let result;\n\n      try {\n        node = this.getNode(name);\n\n        if (node._run) {\n          const args = node._dependencies.map(dep => {\n            return this.getNode(dep).value;\n          });\n\n          result = node._run(...args);\n\n          if (result instanceof Promise) {\n            console.warn(\n              `dynamic cell ${name} returned a promise! this is discouraged because errors are not handled properly`,\n            );\n          }\n        } else if (node.sql) {\n          result = aqlCompiledQuery(\n            node.query,\n            node.sql.sqlPieces,\n            node.sql.state,\n          );\n        } else {\n          idx++;\n          continue;\n        }\n      } catch (e) {\n        console.log('Error while evaluating ' + name + ':', e);\n        // If an error happens, bail on the rest of the computations\n        this.running = false;\n        this.computeQueue = [];\n        return;\n      }\n\n      if (result instanceof Promise) {\n        // When the cell is finished computing, finish computing the\n        // rest\n        result.then(\n          value => {\n            node.value = value;\n            this.runComputations(idx + 1);\n          },\n          err => {\n            // TODO: use captureException here\n            console.warn(`Failed running ${node.name}!`, err);\n            this.runComputations(idx + 1);\n          },\n        );\n\n        return;\n      } else {\n        node.value = result;\n      }\n\n      idx++;\n    }\n\n    // If everything computed in one loop (no async operations) notify\n    // the user and empty the queue\n    if (idx === this.computeQueue.length) {\n      this.events.emit('change', { names: this.computeQueue });\n\n      // Cache the updated cells\n      if (typeof this.saveCache === 'function') {\n        this.saveCache(this.computeQueue);\n      }\n      this.markCacheSafe();\n\n      this.running = false;\n      this.computeQueue = [];\n    }\n  }\n\n  markCacheSafe() {\n    if (!this.cacheBarrier) {\n      if (this.setCacheStatus) {\n        this.setCacheStatus({ clean: true });\n      }\n    }\n  }\n\n  markCacheDirty() {\n    if (this.setCacheStatus) {\n      this.setCacheStatus({ clean: false });\n    }\n  }\n\n  startCacheBarrier() {\n    this.cacheBarrier = true;\n    this.markCacheDirty();\n  }\n\n  endCacheBarrier() {\n    this.cacheBarrier = false;\n\n    const pendingChange = this.running || this.computeQueue.length > 0;\n    if (!pendingChange) {\n      this.markCacheSafe();\n    }\n  }\n\n  addEventListener(name, func) {\n    this.events.on(name, func);\n    return () => this.events.off(name, func);\n  }\n\n  onFinish(func) {\n    if (this.transactionDepth !== 0) {\n      throw new Error(\n        'onFinish called while inside a spreadsheet transaction. This is not allowed as it will lead to race conditions',\n      );\n    }\n\n    if (!this.running && this.computeQueue.length === 0) {\n      func([]);\n      // The remove function does nothing\n      return () => {};\n    }\n\n    const remove = this.addEventListener('change', (...args) => {\n      remove();\n      return func(...args);\n    });\n    return remove;\n  }\n\n  unload() {\n    this.events.all.clear();\n  }\n\n  getValue(name) {\n    return this.getNode(name).value;\n  }\n\n  getExpr(name) {\n    return this.getNode(name).expr;\n  }\n\n  getCellValue(sheet, name) {\n    return this.getNode(resolveName(sheet, name)).value;\n  }\n\n  getCellExpr(sheet, name) {\n    return this.getNode(resolveName(sheet, name)).expr;\n  }\n\n  getCellValueLoose(sheetName, cellName) {\n    const name = resolveName(sheetName, cellName);\n    if (this.nodes.has(name)) {\n      return this.getNode(name).value;\n    }\n    return null;\n  }\n\n  bootup(onReady) {\n    this.onFinish(() => {\n      onReady();\n    });\n  }\n\n  load(name: string, value: string | number | boolean): void {\n    const node = this._getNode(name);\n    node.expr = value;\n    node.value = value;\n  }\n\n  create(name: string, value: string | number | boolean) {\n    return this.transaction(() => {\n      const node = this._getNode(name);\n      node.expr = value;\n      node.value = value;\n      this._markDirty(name);\n    });\n  }\n\n  set(name: string, value: string | number | boolean): void {\n    this.create(name, value);\n  }\n\n  recompute(name: string): void {\n    this.transaction(() => {\n      this.dirtyCells.push(name);\n    });\n  }\n\n  recomputeAll(): void {\n    // Recompute everything!\n    this.transaction(() => {\n      this.dirtyCells = [...this.nodes.keys()];\n    });\n  }\n\n  createQuery(sheetName: string, cellName: string, query: QueryState): void {\n    const name = resolveName(sheetName, cellName);\n    const node = this._getNode(name);\n\n    if (node.query !== query) {\n      node.query = query;\n      const { sqlPieces, state } = compileQuery(\n        node.query,\n        schema,\n        schemaConfig,\n      );\n      node.sql = { sqlPieces, state };\n\n      this.transaction(() => {\n        this._markDirty(name);\n      });\n    }\n  }\n\n  createStatic(\n    sheetName: string,\n    cellName: string,\n    initialValue: number | boolean,\n  ): void {\n    const name = resolveName(sheetName, cellName);\n    const exists = this.nodes.has(name);\n    if (!exists) {\n      this.create(name, initialValue);\n    }\n  }\n\n  createDynamic(\n    sheetName: string,\n    cellName: string,\n    {\n      dependencies = [],\n      run,\n      initialValue,\n      refresh = false,\n    }: {\n      dependencies?: string[];\n      run?: unknown;\n      initialValue: number | boolean;\n      refresh?: boolean;\n    },\n  ): void {\n    const name = resolveName(sheetName, cellName);\n    const node = this._getNode(name);\n\n    if (node.dynamic) {\n      // If it already exists, do nothing\n      return;\n    }\n\n    node.dynamic = true;\n    node._run = run;\n\n    dependencies = dependencies.map(dep => {\n      let resolved;\n      if (!unresolveName(dep).sheet) {\n        resolved = resolveName(sheetName, dep);\n      } else {\n        resolved = dep;\n      }\n\n      return resolved;\n    });\n\n    node._dependencies = dependencies;\n\n    // TODO: diff these\n    this.graph.removeIncomingEdges(name);\n    dependencies.forEach(dep => {\n      this.graph.addEdge(dep, name);\n    });\n\n    if (node.value == null || refresh) {\n      this.transaction(() => {\n        node.value = initialValue;\n        this._markDirty(name);\n      });\n    }\n  }\n\n  clearSheet(sheetName: string): void {\n    for (const [name, node] of this.nodes.entries()) {\n      if (node.sheet === sheetName) {\n        this.nodes.delete(name);\n      }\n    }\n  }\n\n  voidCell(sheetName: string, name: string, voidValue = null): void {\n    const node = this.getNode(resolveName(sheetName, name));\n    node._run = null;\n    node.dynamic = false;\n    node.value = voidValue;\n  }\n\n  deleteCell(sheetName: string, name: string): void {\n    this.voidCell(sheetName, name);\n    this.nodes.delete(resolveName(sheetName, name));\n  }\n\n  addDependencies(sheetName: string, cellName: string, deps: string[]): void {\n    const name = resolveName(sheetName, cellName);\n\n    deps = deps.map(dep => {\n      if (!unresolveName(dep).sheet) {\n        return resolveName(sheetName, dep);\n      }\n      return dep;\n    });\n\n    const node = this.getNode(name);\n    const newDeps = deps.filter(\n      dep => (node._dependencies || []).indexOf(dep) === -1,\n    );\n\n    if (newDeps.length > 0) {\n      node._dependencies = (node._dependencies || []).concat(newDeps);\n      newDeps.forEach(dep => {\n        this.graph.addEdge(dep, name);\n      });\n      this.recompute(name);\n    }\n  }\n\n  removeDependencies(\n    sheetName: string,\n    cellName: string,\n    deps: string[],\n  ): void {\n    const name = resolveName(sheetName, cellName);\n\n    deps = deps.map(dep => {\n      if (!unresolveName(dep).sheet) {\n        return resolveName(sheetName, dep);\n      }\n      return dep;\n    });\n\n    const node = this.getNode(name);\n\n    node._dependencies = (node._dependencies || []).filter(\n      dep => deps.indexOf(dep) === -1,\n    );\n\n    deps.forEach(dep => {\n      this.graph.removeEdge(dep, name);\n    });\n    this.recompute(name);\n  }\n\n  _markDirty(name) {\n    this.dirtyCells.push(name);\n  }\n\n  triggerDatabaseChanges(oldValues, newValues) {\n    const tables = new Set([...oldValues.keys(), ...newValues.keys()]);\n\n    this.startTransaction();\n    // TODO: Create an index of deps so we don't have to iterate\n    // across all nodes\n    this.nodes.forEach(node => {\n      if (\n        node.sql &&\n        node.sql.state.dependencies.some(dep => tables.has(dep))\n      ) {\n        this._markDirty(node.name);\n      }\n    });\n    this.endTransaction();\n  }\n}\n","// @ts-strict-ignore\nimport { type Database } from '@jlongster/sql.js';\n\nimport { captureBreadcrumb } from '../platform/exceptions';\nimport * as sqlite from '../platform/server/sqlite';\nimport { sheetForMonth } from '../shared/months';\nimport * as Platform from '../shared/platform';\n\nimport {\n  DbPreference,\n  DbReflectBudget,\n  DbZeroBudget,\n  DbZeroBudgetMonth,\n} from './db';\nimport { Spreadsheet } from './spreadsheet/spreadsheet';\nimport { resolveName } from './spreadsheet/util';\n\nlet globalSheet: Spreadsheet;\nlet globalOnChange;\nlet globalCacheDb;\n\nexport function get(): Spreadsheet {\n  return globalSheet;\n}\n\nasync function updateSpreadsheetCache(rawDb, names: string[]) {\n  await sqlite.transaction(rawDb, () => {\n    names.forEach(name => {\n      const node = globalSheet._getNode(name);\n\n      // Don't cache query nodes yet\n      if (node.sql == null) {\n        sqlite.runQuery(\n          rawDb,\n          'INSERT OR REPLACE INTO kvcache (key, value) VALUES (?, ?)',\n          [name, JSON.stringify(node.value)],\n        );\n      }\n    });\n  });\n}\n\nfunction setCacheStatus(\n  mainDb: Database,\n  cacheDb: Database,\n  { clean }: { clean: boolean },\n) {\n  if (clean) {\n    // Generate random number and stick in both places\n    const num = Math.random() * 10000000;\n    sqlite.runQuery(\n      cacheDb,\n      'INSERT OR REPLACE INTO kvcache_key (id, key) VALUES (1, ?)',\n      [num],\n    );\n\n    if (mainDb) {\n      sqlite.runQuery(\n        mainDb,\n        'INSERT OR REPLACE INTO kvcache_key (id, key) VALUES (1, ?)',\n        [num],\n      );\n    }\n  } else {\n    sqlite.runQuery(cacheDb, 'DELETE FROM kvcache_key');\n  }\n}\n\nfunction isCacheDirty(mainDb: Database, cacheDb: Database): boolean {\n  let rows = sqlite.runQuery<{ key?: number }>(\n    cacheDb,\n    'SELECT key FROM kvcache_key WHERE id = 1',\n    [],\n    true,\n  );\n  const num = rows.length === 0 ? null : rows[0].key;\n\n  if (num == null) {\n    return true;\n  }\n\n  if (mainDb) {\n    const rows = sqlite.runQuery<{ key?: number }>(\n      mainDb,\n      'SELECT key FROM kvcache_key WHERE id = 1',\n      [],\n      true,\n    );\n    if (rows.length === 0 || rows[0].key !== num) {\n      return true;\n    }\n  }\n\n  // Always also check if there is anything in `kvcache`. We ask for one item;\n  // if we didn't get back anything it's empty so there is no cache\n  rows = sqlite.runQuery(cacheDb, 'SELECT * FROM kvcache LIMIT 1', [], true);\n  return rows.length === 0;\n}\n\nexport async function loadSpreadsheet(\n  db,\n  onSheetChange?,\n): Promise<Spreadsheet> {\n  const cacheEnabled = process.env.NODE_ENV !== 'test';\n  const mainDb = db.getDatabase();\n  let cacheDb;\n\n  if (!Platform.isBrowser && cacheEnabled) {\n    // Desktop apps use a separate database for the cache. This is because it is\n    // much more likely to directly work with files on desktop, and this makes\n    // it a lot clearer what the true filesize of the main db is (and avoid\n    // copying the cache data around).\n    const cachePath = db\n      .getDatabasePath()\n      .replace(/db\\.sqlite$/, 'cache.sqlite');\n    globalCacheDb = cacheDb = sqlite.openDatabase(cachePath);\n\n    sqlite.execQuery(\n      cacheDb,\n      `\n        CREATE TABLE IF NOT EXISTS kvcache (key TEXT PRIMARY KEY, value TEXT);\n        CREATE TABLE IF NOT EXISTS kvcache_key (id INTEGER PRIMARY KEY, key REAL)\n      `,\n    );\n  } else {\n    // All other platforms use the same database for cache\n    cacheDb = mainDb;\n  }\n\n  let sheet;\n  if (cacheEnabled) {\n    sheet = new Spreadsheet(\n      updateSpreadsheetCache.bind(null, cacheDb),\n      setCacheStatus.bind(null, mainDb, cacheDb),\n    );\n  } else {\n    sheet = new Spreadsheet();\n  }\n\n  captureBreadcrumb({\n    message: 'loading spreadsheet',\n    category: 'server',\n  });\n\n  globalSheet = sheet;\n  globalOnChange = onSheetChange;\n\n  if (onSheetChange) {\n    sheet.addEventListener('change', onSheetChange);\n  }\n\n  if (cacheEnabled && !isCacheDirty(mainDb, cacheDb)) {\n    const cachedRows = await sqlite.runQuery<{ key?: number; value: string }>(\n      cacheDb,\n      'SELECT * FROM kvcache',\n      [],\n      true,\n    );\n    console.log(`Loaded spreadsheet from cache (${cachedRows.length} items)`);\n\n    for (const row of cachedRows) {\n      const parsed = JSON.parse(row.value);\n      sheet.load(row.key, parsed);\n    }\n  } else {\n    console.log('Loading fresh spreadsheet');\n    await loadUserBudgets(db);\n  }\n\n  captureBreadcrumb({\n    message: 'loaded spreadsheet',\n    category: 'server',\n  });\n\n  return sheet;\n}\n\nexport function unloadSpreadsheet(): void {\n  if (globalSheet) {\n    // TODO: Should wait for the sheet to finish\n    globalSheet.unload();\n    globalSheet = null;\n  }\n\n  if (globalCacheDb) {\n    sqlite.closeDatabase(globalCacheDb);\n    globalCacheDb = null;\n  }\n}\n\nexport async function reloadSpreadsheet(db): Promise<Spreadsheet> {\n  if (globalSheet) {\n    unloadSpreadsheet();\n    return loadSpreadsheet(db, globalOnChange);\n  }\n}\n\nexport async function loadUserBudgets(\n  db: typeof import('./db'),\n): Promise<void> {\n  const sheet = globalSheet;\n\n  // TODO: Clear out the cache here so make sure future loads of the app\n  // don't load any extra values that aren't set here\n\n  const { value: budgetType = 'envelope' } =\n    (await db.first<Pick<DbPreference, 'value'>>(\n      'SELECT value from preferences WHERE id = ?',\n      ['budgetType'],\n    )) ?? {};\n\n  const table = budgetType === 'tracking' ? 'reflect_budgets' : 'zero_budgets';\n  const budgets = await db.all<DbReflectBudget | DbZeroBudget>(`\n      SELECT * FROM ${table} b\n      LEFT JOIN categories c ON c.id = b.category\n      WHERE c.tombstone = 0\n    `);\n\n  sheet.startTransaction();\n\n  // Load all the budget amounts and carryover values\n  for (const budget of budgets) {\n    if (budget.month && budget.category) {\n      const sheetName = `budget${budget.month}`;\n      sheet.set(`${sheetName}!budget-${budget.category}`, budget.amount);\n      sheet.set(\n        `${sheetName}!carryover-${budget.category}`,\n        budget.carryover === 1 ? true : false,\n      );\n      sheet.set(`${sheetName}!goal-${budget.category}`, budget.goal);\n      sheet.set(`${sheetName}!long-goal-${budget.category}`, budget.long_goal);\n    }\n  }\n\n  // For zero-based budgets, load the buffered amounts\n  if (budgetType !== 'tracking') {\n    const budgetMonths = await db.all<DbZeroBudgetMonth>(\n      'SELECT * FROM zero_budget_months',\n    );\n    for (const budgetMonth of budgetMonths) {\n      const sheetName = sheetForMonth(budgetMonth.id);\n      sheet.set(`${sheetName}!buffered`, budgetMonth.buffered);\n    }\n  }\n\n  sheet.endTransaction();\n}\n\nexport function getCell(sheet: string, name: string) {\n  return globalSheet._getNode(resolveName(sheet, name));\n}\n\nexport function getCellValue(\n  sheet: string,\n  name: string,\n): string | number | boolean {\n  return globalSheet.getValue(resolveName(sheet, name));\n}\n\nexport function startTransaction(): void {\n  if (globalSheet) {\n    globalSheet.startTransaction();\n  }\n}\n\nexport function endTransaction(): void {\n  if (globalSheet) {\n    globalSheet.endTransaction();\n  }\n}\n\nexport function waitOnSpreadsheet(): Promise<void> {\n  return new Promise(resolve => {\n    if (globalSheet) {\n      globalSheet.onFinish(resolve);\n    } else {\n      resolve(undefined);\n    }\n  });\n}\n","import * as locales from 'date-fns/locale';\n\nexport function getLocale(language: string) {\n  if (!language || typeof language !== 'string') {\n    return locales.enUS;\n  }\n\n  let localeKey = language.replace('-', '') as keyof typeof locales;\n\n  if (localeKey in locales) {\n    return locales[localeKey];\n  }\n\n  //if language was not found with four letters, try with two\n  localeKey = language.replace('-', '').substring(0, 2) as keyof typeof locales;\n\n  if (localeKey in locales) {\n    return locales[localeKey];\n  }\n\n  return locales.enUS;\n}\n","// @ts-strict-ignore\n\nimport * as asyncStorage from '../../platform/server/asyncStorage';\nimport { getLocale } from '../../shared/locale';\nimport * as monthUtils from '../../shared/months';\nimport { integerToCurrency, safeNumber } from '../../shared/util';\nimport { CategoryEntity } from '../../types/models';\nimport * as db from '../db';\nimport * as sheet from '../sheet';\nimport { batchMessages } from '../sync';\n\nexport async function getSheetValue(\n  sheetName: string,\n  cell: string,\n): Promise<number> {\n  const node = await sheet.getCell(sheetName, cell);\n  return safeNumber(typeof node.value === 'number' ? node.value : 0);\n}\n\nexport async function getSheetBoolean(\n  sheetName: string,\n  cell: string,\n): Promise<boolean> {\n  const node = await sheet.getCell(sheetName, cell);\n  return typeof node.value === 'boolean' ? node.value : false;\n}\n\n// We want to only allow the positive movement of money back and\n// forth. buffered should never be allowed to go into the negative,\n// and you shouldn't be allowed to pull non-existent money from\n// leftover.\nfunction calcBufferedAmount(\n  toBudget: number,\n  buffered: number,\n  amount: number,\n): number {\n  amount = Math.min(Math.max(amount, -buffered), Math.max(toBudget, 0));\n  return buffered + amount;\n}\n\ntype BudgetTable = 'reflect_budgets' | 'zero_budgets';\n\nfunction getBudgetTable(): BudgetTable {\n  return isReflectBudget() ? 'reflect_budgets' : 'zero_budgets';\n}\n\nexport function isReflectBudget(): boolean {\n  const budgetType = db.firstSync<Pick<db.DbPreference, 'value'>>(\n    `SELECT value FROM preferences WHERE id = ?`,\n    ['budgetType'],\n  );\n  const val = budgetType ? budgetType.value : 'envelope';\n  return val === 'tracking';\n}\n\nfunction dbMonth(month: string): number {\n  return parseInt(month.replace('-', ''));\n}\n\n// TODO: complete list of fields.\ntype BudgetData = {\n  is_income: 1 | 0;\n  category: string;\n  amount: number;\n};\n\nfunction getBudgetData<T extends BudgetTable>(\n  table: T,\n  month: string,\n): Promise<BudgetData[]> {\n  return db.all<\n    (db.DbReflectBudget | db.DbZeroBudget) &\n      Pick<db.DbViewCategory, 'is_income'>\n  >(\n    `\n    SELECT b.*, c.is_income FROM v_categories c\n    LEFT JOIN ${table} b ON b.category = c.id\n    WHERE c.tombstone = 0 AND b.month = ?\n  `,\n    [month],\n  );\n}\n\nfunction getAllMonths(startMonth: string): string[] {\n  const { createdMonths } = sheet.get().meta();\n  let latest = null;\n  for (const month of createdMonths) {\n    if (latest == null || month > latest) {\n      latest = month;\n    }\n  }\n  return monthUtils.rangeInclusive(startMonth, latest);\n}\n\n// TODO: Valid month format in all the functions below\n\nexport function getBudget({\n  category,\n  month,\n}: {\n  category: string;\n  month: string;\n}): number {\n  const table = getBudgetTable();\n  const existing = db.firstSync<db.DbZeroBudget | db.DbReflectBudget>(\n    `SELECT * FROM ${table} WHERE month = ? AND category = ?`,\n    [dbMonth(month), category],\n  );\n  return existing ? existing.amount || 0 : 0;\n}\n\nexport function setBudget({\n  category,\n  month,\n  amount,\n}: {\n  category: CategoryEntity['id'];\n  month: string;\n  amount: unknown;\n}): Promise<void> {\n  amount = safeNumber(typeof amount === 'number' ? amount : 0);\n  const table = getBudgetTable();\n\n  const existing = db.firstSync<\n    Pick<db.DbZeroBudget | db.DbReflectBudget, 'id'>\n  >(`SELECT id FROM ${table} WHERE month = ? AND category = ?`, [\n    dbMonth(month),\n    category,\n  ]);\n  if (existing) {\n    return db.update(table, { id: existing.id, amount });\n  }\n  return db.insert(table, {\n    id: `${dbMonth(month)}-${category}`,\n    month: dbMonth(month),\n    category,\n    amount,\n  });\n}\n\nexport function setGoal({ month, category, goal, long_goal }): Promise<void> {\n  const table = getBudgetTable();\n  const existing = db.firstSync<\n    Pick<db.DbZeroBudget | db.DbReflectBudget, 'id'>\n  >(`SELECT id FROM ${table} WHERE month = ? AND category = ?`, [\n    dbMonth(month),\n    category,\n  ]);\n  if (existing) {\n    return db.update(table, {\n      id: existing.id,\n      goal,\n      long_goal,\n    });\n  }\n  return db.insert(table, {\n    id: `${dbMonth(month)}-${category}`,\n    month: dbMonth(month),\n    category,\n    goal,\n    long_goal,\n  });\n}\n\nexport function setBuffer(month: string, amount: unknown): Promise<void> {\n  const existing = db.firstSync<Pick<db.DbZeroBudget, 'id'>>(\n    `SELECT id FROM zero_budget_months WHERE id = ?`,\n    [month],\n  );\n  if (existing) {\n    return db.update('zero_budget_months', {\n      id: existing.id,\n      buffered: amount,\n    });\n  }\n  return db.insert('zero_budget_months', { id: month, buffered: amount });\n}\n\nfunction setCarryover(\n  table: string,\n  category: string,\n  month: string,\n  flag: boolean,\n): Promise<void> {\n  const existing = db.firstSync<\n    Pick<db.DbZeroBudget | db.DbReflectBudget, 'id'>\n  >(`SELECT id FROM ${table} WHERE month = ? AND category = ?`, [\n    month,\n    category,\n  ]);\n  if (existing) {\n    return db.update(table, { id: existing.id, carryover: flag ? 1 : 0 });\n  }\n  return db.insert(table, {\n    id: `${month}-${category}`,\n    month,\n    category,\n    carryover: flag ? 1 : 0,\n  });\n}\n\n// Actions\n\nexport async function copyPreviousMonth({\n  month,\n}: {\n  month: string;\n}): Promise<void> {\n  const prevMonth = dbMonth(monthUtils.prevMonth(month));\n  const table = getBudgetTable();\n  const budgetData = await getBudgetData(table, prevMonth.toString());\n\n  await batchMessages(async () => {\n    budgetData.forEach(prevBudget => {\n      if (prevBudget.is_income === 1 && !isReflectBudget()) {\n        return;\n      }\n      setBudget({\n        category: prevBudget.category,\n        month,\n        amount: prevBudget.amount,\n      });\n    });\n  });\n}\n\nexport async function copySinglePreviousMonth({\n  month,\n  category,\n}: {\n  month: string;\n  category: string;\n}): Promise<void> {\n  const prevMonth = monthUtils.prevMonth(month);\n  const newAmount = await getSheetValue(\n    monthUtils.sheetForMonth(prevMonth),\n    'budget-' + category,\n  );\n  await batchMessages(async () => {\n    setBudget({ category, month, amount: newAmount });\n  });\n}\n\nexport async function setZero({ month }: { month: string }): Promise<void> {\n  const categories = await db.all<db.DbViewCategory>(\n    'SELECT * FROM v_categories WHERE tombstone = 0',\n  );\n\n  await batchMessages(async () => {\n    categories.forEach(cat => {\n      if (cat.is_income === 1 && !isReflectBudget()) {\n        return;\n      }\n      setBudget({ category: cat.id, month, amount: 0 });\n    });\n  });\n}\n\nexport async function set3MonthAvg({\n  month,\n}: {\n  month: string;\n}): Promise<void> {\n  const categories = await db.all<db.DbViewCategoryWithGroupHidden>(\n    `\n  SELECT c.*\n  FROM categories c\n  LEFT JOIN category_groups g ON c.cat_group = g.id\n  WHERE c.tombstone = 0 AND c.hidden = 0 AND g.hidden = 0\n  `,\n  );\n\n  const prevMonth1 = monthUtils.prevMonth(month);\n  const prevMonth2 = monthUtils.prevMonth(prevMonth1);\n  const prevMonth3 = monthUtils.prevMonth(prevMonth2);\n\n  await batchMessages(async () => {\n    for (const cat of categories) {\n      if (cat.is_income === 1 && !isReflectBudget()) {\n        continue;\n      }\n\n      const spent1 = await getSheetValue(\n        monthUtils.sheetForMonth(prevMonth1),\n        'sum-amount-' + cat.id,\n      );\n      const spent2 = await getSheetValue(\n        monthUtils.sheetForMonth(prevMonth2),\n        'sum-amount-' + cat.id,\n      );\n      const spent3 = await getSheetValue(\n        monthUtils.sheetForMonth(prevMonth3),\n        'sum-amount-' + cat.id,\n      );\n\n      let avg = Math.round((spent1 + spent2 + spent3) / 3);\n\n      if (cat.is_income === 0) {\n        avg *= -1;\n      }\n\n      setBudget({ category: cat.id, month, amount: avg });\n    }\n  });\n}\n\nexport async function set12MonthAvg({\n  month,\n}: {\n  month: string;\n}): Promise<void> {\n  const categories = await db.all<db.DbViewCategoryWithGroupHidden>(\n    `\n  SELECT c.*\n  FROM categories c\n  LEFT JOIN category_groups g ON c.cat_group = g.id\n  WHERE c.tombstone = 0 AND c.hidden = 0 AND g.hidden = 0\n  `,\n  );\n\n  await batchMessages(async () => {\n    for (const cat of categories) {\n      if (cat.is_income === 1 && !isReflectBudget()) {\n        continue;\n      }\n      setNMonthAvg({ month, N: 12, category: cat.id });\n    }\n  });\n}\n\nexport async function set6MonthAvg({\n  month,\n}: {\n  month: string;\n}): Promise<void> {\n  const categories = await db.all<db.DbViewCategoryWithGroupHidden>(\n    `\n  SELECT c.*\n  FROM categories c\n  LEFT JOIN category_groups g ON c.cat_group = g.id\n  WHERE c.tombstone = 0 AND c.hidden = 0 AND g.hidden = 0\n  `,\n  );\n\n  await batchMessages(async () => {\n    for (const cat of categories) {\n      if (cat.is_income === 1 && !isReflectBudget()) {\n        continue;\n      }\n      setNMonthAvg({ month, N: 6, category: cat.id });\n    }\n  });\n}\n\nexport async function setNMonthAvg({\n  month,\n  N,\n  category,\n}: {\n  month: string;\n  N: number;\n  category: string;\n}): Promise<void> {\n  const categoryFromDb = await db.first<Pick<db.DbViewCategory, 'is_income'>>(\n    'SELECT is_income FROM v_categories WHERE id = ?',\n    [category],\n  );\n\n  let prevMonth = monthUtils.prevMonth(month);\n  let sumAmount = 0;\n  for (let l = 0; l < N; l++) {\n    sumAmount += await getSheetValue(\n      monthUtils.sheetForMonth(prevMonth),\n      'sum-amount-' + category,\n    );\n    prevMonth = monthUtils.prevMonth(prevMonth);\n  }\n  await batchMessages(async () => {\n    let avg = Math.round(sumAmount / N);\n\n    if (categoryFromDb.is_income === 0) {\n      avg *= -1;\n    }\n\n    setBudget({ category, month, amount: avg });\n  });\n}\n\nexport async function holdForNextMonth({\n  month,\n  amount,\n}: {\n  month: string;\n  amount: number;\n}): Promise<boolean> {\n  const row = await db.first<Pick<db.DbZeroBudgetMonth, 'buffered'>>(\n    'SELECT buffered FROM zero_budget_months WHERE id = ?',\n    [month],\n  );\n\n  const sheetName = monthUtils.sheetForMonth(month);\n  const toBudget = await getSheetValue(sheetName, 'to-budget');\n\n  if (toBudget > 0) {\n    const bufferedAmount = calcBufferedAmount(\n      toBudget,\n      (row && row.buffered) || 0,\n      amount,\n    );\n\n    await setBuffer(month, bufferedAmount);\n    return true;\n  }\n  return false;\n}\n\nexport async function resetHold({ month }: { month: string }): Promise<void> {\n  await setBuffer(month, 0);\n}\n\nexport async function coverOverspending({\n  month,\n  to,\n  from,\n}: {\n  month: string;\n  to: CategoryEntity['id'] | 'to-budget';\n  from: CategoryEntity['id'] | 'to-budget' | 'overbudgeted';\n}): Promise<void> {\n  const sheetName = monthUtils.sheetForMonth(month);\n  const toBudgeted = await getSheetValue(sheetName, 'budget-' + to);\n  const leftover = await getSheetValue(sheetName, 'leftover-' + to);\n  const leftoverFrom = await getSheetValue(\n    sheetName,\n    from === 'to-budget' ? 'to-budget' : 'leftover-' + from,\n  );\n\n  if (leftover >= 0 || leftoverFrom <= 0) {\n    return;\n  }\n\n  const amountCovered = Math.min(-leftover, leftoverFrom);\n\n  // If we are covering it from the to be budgeted amount, ignore this\n  if (from !== 'to-budget') {\n    const fromBudgeted = await getSheetValue(sheetName, 'budget-' + from);\n    await setBudget({\n      category: from,\n      month,\n      amount: fromBudgeted - amountCovered,\n    });\n  }\n\n  await batchMessages(async () => {\n    await setBudget({\n      category: to,\n      month,\n      amount: toBudgeted + amountCovered,\n    });\n\n    await addMovementNotes({\n      month,\n      amount: amountCovered,\n      to,\n      from,\n    });\n  });\n}\n\nexport async function transferAvailable({\n  month,\n  amount,\n  category,\n}: {\n  month: string;\n  amount: number;\n  category: string;\n}): Promise<void> {\n  const sheetName = monthUtils.sheetForMonth(month);\n  const leftover = await getSheetValue(sheetName, 'to-budget');\n  amount = Math.max(Math.min(amount, leftover), 0);\n\n  const budgeted = await getSheetValue(sheetName, 'budget-' + category);\n  await setBudget({ category, month, amount: budgeted + amount });\n}\n\nexport async function coverOverbudgeted({\n  month,\n  category,\n}: {\n  month: string;\n  category: string;\n}): Promise<void> {\n  const sheetName = monthUtils.sheetForMonth(month);\n  const toBudget = await getSheetValue(sheetName, 'to-budget');\n\n  const categoryBudget = await getSheetValue(sheetName, 'budget-' + category);\n\n  await batchMessages(async () => {\n    await setBudget({ category, month, amount: categoryBudget + toBudget });\n\n    await addMovementNotes({\n      month,\n      amount: -toBudget,\n      from: category,\n      to: 'overbudgeted',\n    });\n  });\n}\n\nexport async function transferCategory({\n  month,\n  amount,\n  from,\n  to,\n}: {\n  month: string;\n  amount: number;\n  to: CategoryEntity['id'] | 'to-budget';\n  from: CategoryEntity['id'] | 'to-budget';\n}): Promise<void> {\n  const sheetName = monthUtils.sheetForMonth(month);\n  const fromBudgeted = await getSheetValue(sheetName, 'budget-' + from);\n\n  await batchMessages(async () => {\n    await setBudget({ category: from, month, amount: fromBudgeted - amount });\n\n    // If we are simply moving it back into available cash to budget,\n    // don't do anything else\n    if (to !== 'to-budget') {\n      const toBudgeted = await getSheetValue(sheetName, 'budget-' + to);\n      await setBudget({ category: to, month, amount: toBudgeted + amount });\n    }\n\n    await addMovementNotes({\n      month,\n      amount,\n      to,\n      from,\n    });\n  });\n}\n\nexport async function setCategoryCarryover({\n  startMonth,\n  category,\n  flag,\n}: {\n  startMonth: string;\n  category: string;\n  flag: boolean;\n}): Promise<void> {\n  const table = getBudgetTable();\n  const months = getAllMonths(startMonth);\n\n  await batchMessages(async () => {\n    for (const month of months) {\n      setCarryover(table, category, dbMonth(month).toString(), flag);\n    }\n  });\n}\n\nfunction addNewLine(notes?: string) {\n  return !notes ? '' : `${notes}${notes && '\\n'}`;\n}\n\nasync function addMovementNotes({\n  month,\n  amount,\n  to,\n  from,\n}: {\n  month: string;\n  amount: number;\n  to: CategoryEntity['id'] | 'to-budget' | 'overbudgeted';\n  from: CategoryEntity['id'] | 'to-budget';\n}) {\n  const displayAmount = integerToCurrency(amount);\n\n  const monthBudgetNotesId = `budget-${month}`;\n  const existingMonthBudgetNotes = addNewLine(\n    db.firstSync<Pick<db.DbNote, 'note'>>(\n      `SELECT n.note FROM notes n WHERE n.id = ?`,\n      [monthBudgetNotesId],\n    )?.note,\n  );\n\n  const locale = getLocale(await asyncStorage.getItem('language'));\n  const displayDay = monthUtils.format(\n    monthUtils.currentDate(),\n    'MMMM dd',\n    locale,\n  );\n  const categories = await db.getCategories(\n    [from, to].filter(c => c !== 'to-budget' && c !== 'overbudgeted'),\n  );\n\n  const fromCategoryName =\n    from === 'to-budget'\n      ? 'To Budget'\n      : categories.find(c => c.id === from)?.name;\n\n  const toCategoryName =\n    to === 'to-budget'\n      ? 'To Budget'\n      : to === 'overbudgeted'\n        ? 'Overbudgeted'\n        : categories.find(c => c.id === to)?.name;\n\n  const note = `Reassigned ${displayAmount} from ${fromCategoryName} → ${toCategoryName} on ${displayDay}`;\n\n  await db.update('notes', {\n    id: monthBudgetNotesId,\n    note: `${existingMonthBudgetNotes}- ${note}`,\n  });\n}\n\nexport async function resetIncomeCarryover({\n  month,\n}: {\n  month: string;\n}): Promise<void> {\n  const table = getBudgetTable();\n  const categories = await db.all<db.DbViewCategory>(\n    'SELECT * FROM v_categories WHERE is_income = 1 AND tombstone = 0',\n  );\n\n  await batchMessages(async () => {\n    for (const category of categories) {\n      await setCarryover(table, category.id, dbMonth(month).toString(), false);\n    }\n  });\n}\n","export function number(v: unknown): number {\n  if (typeof v === 'number') {\n    return v;\n  } else if (typeof v === 'string') {\n    const parsed = parseFloat(v);\n    if (isNaN(parsed)) {\n      return 0;\n    }\n    return parsed;\n  }\n\n  return 0;\n}\n","// @ts-strict-ignore\nimport { safeNumber } from '../../shared/util';\nimport { number } from '../spreadsheet/globals';\n\nexport { number } from '../spreadsheet/globals';\n\nexport function sumAmounts(...amounts) {\n  return safeNumber(\n    amounts.reduce((total, amount) => {\n      return total + number(amount);\n    }, 0),\n  );\n}\n\nexport function flatten2(arr) {\n  return Array.prototype.concat.apply([], arr);\n}\n\nexport function unflatten2(arr) {\n  const res = [];\n  for (let i = 0; i < arr.length; i += 2) {\n    res.push([arr[i], arr[i + 1]]);\n  }\n  return res;\n}\n","// @ts-strict-ignore\nimport * as monthUtils from '../../shared/months';\nimport { safeNumber } from '../../shared/util';\nimport * as db from '../db';\nimport * as sheet from '../sheet';\nimport { resolveName } from '../spreadsheet/util';\n\nimport { createCategory as createCategoryFromBase } from './base';\nimport { number, sumAmounts, flatten2, unflatten2 } from './util';\n\nfunction getBlankSheet(months) {\n  const blankMonth = monthUtils.prevMonth(months[0]);\n  return monthUtils.sheetForMonth(blankMonth);\n}\n\nexport function createBlankCategory(cat, months) {\n  if (months.length > 0) {\n    const sheetName = getBlankSheet(months);\n    sheet.get().createStatic(sheetName, `carryover-${cat.id}`, false);\n    sheet.get().createStatic(sheetName, `leftover-${cat.id}`, 0);\n    sheet.get().createStatic(sheetName, `leftover-pos-${cat.id}`, 0);\n  }\n}\n\nfunction createBlankMonth(categories, sheetName, months) {\n  sheet.get().createStatic(sheetName, 'is-blank', true);\n  sheet.get().createStatic(sheetName, 'to-budget', 0);\n  sheet.get().createStatic(sheetName, 'buffered', 0);\n\n  categories.forEach(cat => createBlankCategory(cat, months));\n}\n\nexport function createCategory(cat, sheetName, prevSheetName) {\n  if (!cat.is_income) {\n    sheet.get().createStatic(sheetName, `budget-${cat.id}`, 0);\n\n    // This makes the app more robust by \"fixing up\" null budget values.\n    // Those should not be allowed, but in case somehow a null value\n    // ends up there, we are resilient to it. Preferrably the\n    // spreadsheet would have types and be more strict about what is\n    // allowed to be set.\n    if (sheet.get().getCellValue(sheetName, `budget-${cat.id}`) == null) {\n      sheet.get().set(resolveName(sheetName, `budget-${cat.id}`), 0);\n    }\n\n    sheet.get().createStatic(sheetName, `carryover-${cat.id}`, false);\n\n    sheet.get().createDynamic(sheetName, `leftover-${cat.id}`, {\n      initialValue: 0,\n      dependencies: [\n        `budget-${cat.id}`,\n        `sum-amount-${cat.id}`,\n        `${prevSheetName}!carryover-${cat.id}`,\n        `${prevSheetName}!leftover-${cat.id}`,\n        `${prevSheetName}!leftover-pos-${cat.id}`,\n      ],\n      run: (budgeted, spent, prevCarryover, prevLeftover, prevLeftoverPos) => {\n        return safeNumber(\n          number(budgeted) +\n            number(spent) +\n            (prevCarryover ? number(prevLeftover) : number(prevLeftoverPos)),\n        );\n      },\n    });\n\n    sheet.get().createDynamic(sheetName, 'leftover-pos-' + cat.id, {\n      initialValue: 0,\n      dependencies: [`leftover-${cat.id}`],\n      run: leftover => {\n        return leftover < 0 ? 0 : leftover;\n      },\n    });\n  }\n}\n\nexport function createCategoryGroup(group, sheetName) {\n  sheet.get().createDynamic(sheetName, 'group-sum-amount-' + group.id, {\n    initialValue: 0,\n    dependencies: group.categories.map(cat => `sum-amount-${cat.id}`),\n    run: sumAmounts,\n  });\n\n  if (!group.is_income) {\n    sheet.get().createDynamic(sheetName, 'group-budget-' + group.id, {\n      initialValue: 0,\n      dependencies: group.categories.map(cat => `budget-${cat.id}`),\n      run: sumAmounts,\n    });\n\n    sheet.get().createDynamic(sheetName, 'group-leftover-' + group.id, {\n      initialValue: 0,\n      dependencies: group.categories.map(cat => `leftover-${cat.id}`),\n      run: sumAmounts,\n    });\n  }\n}\n\nexport function createSummary(groups, categories, prevSheetName, sheetName) {\n  const incomeGroup = groups.filter(group => group.is_income)[0];\n  const expenseCategories = categories.filter(cat => !cat.is_income);\n  const incomeCategories = categories.filter(cat => cat.is_income);\n\n  sheet.get().createStatic(sheetName, 'buffered', 0);\n\n  sheet.get().createDynamic(sheetName, 'from-last-month', {\n    initialValue: 0,\n    dependencies: [\n      `${prevSheetName}!to-budget`,\n      `${prevSheetName}!buffered-selected`,\n    ],\n    run: (toBudget, buffered) =>\n      safeNumber(number(toBudget) + number(buffered)),\n  });\n\n  // Alias the group income total to `total-income`\n  sheet.get().createDynamic(sheetName, 'total-income', {\n    initialValue: 0,\n    dependencies: [`group-sum-amount-${incomeGroup.id}`],\n    run: amount => amount,\n  });\n\n  sheet.get().createDynamic(sheetName, 'available-funds', {\n    initialValue: 0,\n    dependencies: ['total-income', 'from-last-month'],\n    run: (income, fromLastMonth) =>\n      safeNumber(number(income) + number(fromLastMonth)),\n  });\n\n  sheet.get().createDynamic(sheetName, 'last-month-overspent', {\n    initialValue: 0,\n    dependencies: flatten2(\n      expenseCategories.map(cat => [\n        `${prevSheetName}!leftover-${cat.id}`,\n        `${prevSheetName}!carryover-${cat.id}`,\n      ]),\n    ),\n    run: (...data) => {\n      data = unflatten2(data);\n      return safeNumber(\n        data.reduce((total, [leftover, carryover]) => {\n          if (carryover) {\n            return total;\n          }\n          return total + Math.min(0, number(leftover));\n        }, 0),\n      );\n    },\n  });\n\n  sheet.get().createDynamic(sheetName, 'total-budgeted', {\n    initialValue: 0,\n    dependencies: groups\n      .filter(group => !group.is_income)\n      .map(group => `group-budget-${group.id}`),\n    run: (...amounts) => {\n      // Negate budgeted amount\n      return -sumAmounts(...amounts);\n    },\n  });\n\n  sheet.get().createDynamic(sheetName, 'buffered', { initialValue: 0 });\n  sheet.get().createDynamic(sheetName, 'buffered-auto', {\n    initialValue: 0,\n    dependencies: flatten2(\n      incomeCategories.map(c => [\n        `${sheetName}!sum-amount-${c.id}`,\n        `${sheetName}!carryover-${c.id}`,\n      ]),\n    ),\n    run: (...data) => {\n      data = unflatten2(data);\n      return safeNumber(\n        data.reduce((total, [sumAmount, carryover]) => {\n          if (carryover) {\n            return total + sumAmount;\n          }\n          return total;\n        }, 0),\n      );\n    },\n  });\n  sheet.get().createDynamic(sheetName, 'buffered-selected', {\n    initialValue: 0,\n    dependencies: [`${sheetName}!buffered`, `${sheetName}!buffered-auto`],\n    run: (man, auto) => {\n      if (man !== 0) {\n        return man;\n      }\n      return auto;\n    },\n  });\n\n  sheet.get().createDynamic(sheetName, 'to-budget', {\n    initialValue: 0,\n    dependencies: [\n      'available-funds',\n      'last-month-overspent',\n      'total-budgeted',\n      'buffered-selected',\n    ],\n    run: (available, lastOverspent, totalBudgeted, buffered) => {\n      return safeNumber(\n        number(available) +\n          number(lastOverspent) +\n          number(totalBudgeted) -\n          number(buffered),\n      );\n    },\n  });\n\n  sheet.get().createDynamic(sheetName, 'total-spent', {\n    initialValue: 0,\n    dependencies: groups\n      .filter(group => !group.is_income)\n      .map(group => `group-sum-amount-${group.id}`),\n    run: sumAmounts,\n  });\n\n  sheet.get().createDynamic(sheetName, 'total-leftover', {\n    initialValue: 0,\n    dependencies: groups\n      .filter(group => !group.is_income)\n      .map(group => `group-leftover-${group.id}`),\n    run: sumAmounts,\n  });\n}\n\nexport function createBudget(meta, categories, months) {\n  // The spreadsheet is now strict - so we need to fill in some\n  // default values for the month before the first month. Only do this\n  // if it doesn't already exist\n  const blankSheet = getBlankSheet(months);\n  if (meta.blankSheet !== blankSheet) {\n    sheet.get().clearSheet(meta.blankSheet);\n    createBlankMonth(categories, blankSheet, months);\n    meta.blankSheet = blankSheet;\n  }\n}\n\nexport function handleCategoryChange(months, oldValue, newValue) {\n  function addDeps(sheetName, groupId, catId) {\n    sheet\n      .get()\n      .addDependencies(sheetName, `group-sum-amount-${groupId}`, [\n        `sum-amount-${catId}`,\n      ]);\n    sheet\n      .get()\n      .addDependencies(sheetName, `group-budget-${groupId}`, [\n        `budget-${catId}`,\n      ]);\n    sheet\n      .get()\n      .addDependencies(sheetName, `group-leftover-${groupId}`, [\n        `leftover-${catId}`,\n      ]);\n  }\n\n  function removeDeps(sheetName, groupId, catId) {\n    sheet\n      .get()\n      .removeDependencies(sheetName, `group-sum-amount-${groupId}`, [\n        `sum-amount-${catId}`,\n      ]);\n    sheet\n      .get()\n      .removeDependencies(sheetName, `group-budget-${groupId}`, [\n        `budget-${catId}`,\n      ]);\n    sheet\n      .get()\n      .removeDependencies(sheetName, `group-leftover-${groupId}`, [\n        `leftover-${catId}`,\n      ]);\n  }\n\n  if (oldValue && oldValue.tombstone === 0 && newValue.tombstone === 1) {\n    const id = newValue.id;\n    const groupId = newValue.cat_group;\n\n    months.forEach(month => {\n      const sheetName = monthUtils.sheetForMonth(month);\n      removeDeps(sheetName, groupId, id);\n    });\n  } else if (\n    newValue.tombstone === 0 &&\n    (!oldValue || oldValue.tombstone === 1)\n  ) {\n    createBlankCategory(newValue, months);\n\n    months.forEach(month => {\n      const prevMonth = monthUtils.prevMonth(month);\n      const prevSheetName = monthUtils.sheetForMonth(prevMonth);\n      const sheetName = monthUtils.sheetForMonth(month);\n      const { start, end } = monthUtils.bounds(month);\n\n      createCategoryFromBase(newValue, sheetName, prevSheetName, start, end);\n\n      const id = newValue.id;\n      const groupId = newValue.cat_group;\n\n      sheet\n        .get()\n        .addDependencies(sheetName, 'last-month-overspent', [\n          `${prevSheetName}!leftover-${id}`,\n          `${prevSheetName}!carryover-${id}`,\n        ]);\n\n      addDeps(sheetName, groupId, id);\n    });\n  } else if (oldValue && oldValue.cat_group !== newValue.cat_group) {\n    // The category moved so we need to update the dependencies\n    const id = newValue.id;\n\n    months.forEach(month => {\n      const sheetName = monthUtils.sheetForMonth(month);\n      removeDeps(sheetName, oldValue.cat_group, id);\n      addDeps(sheetName, newValue.cat_group, id);\n    });\n  }\n}\n\nexport function handleCategoryGroupChange(months, oldValue, newValue) {\n  function addDeps(sheetName, groupId) {\n    sheet\n      .get()\n      .addDependencies(sheetName, 'total-budgeted', [\n        `group-budget-${groupId}`,\n      ]);\n    sheet\n      .get()\n      .addDependencies(sheetName, 'total-spent', [\n        `group-sum-amount-${groupId}`,\n      ]);\n    sheet\n      .get()\n      .addDependencies(sheetName, 'total-leftover', [\n        `group-leftover-${groupId}`,\n      ]);\n  }\n\n  function removeDeps(sheetName, groupId) {\n    sheet\n      .get()\n      .removeDependencies(sheetName, 'total-budgeted', [\n        `group-budget-${groupId}`,\n      ]);\n    sheet\n      .get()\n      .removeDependencies(sheetName, 'total-spent', [\n        `group-sum-amount-${groupId}`,\n      ]);\n    sheet\n      .get()\n      .removeDependencies(sheetName, 'total-leftover', [\n        `group-leftover-${groupId}`,\n      ]);\n  }\n\n  if (newValue.tombstone === 1 && oldValue && oldValue.tombstone === 0) {\n    const id = newValue.id;\n    months.forEach(month => {\n      const sheetName = monthUtils.sheetForMonth(month);\n      removeDeps(sheetName, id);\n    });\n  } else if (\n    newValue.tombstone === 0 &&\n    (!oldValue || oldValue.tombstone === 1)\n  ) {\n    const group = newValue;\n\n    if (!group.is_income) {\n      months.forEach(month => {\n        const sheetName = monthUtils.sheetForMonth(month);\n\n        // Dirty, dirty hack. These functions should not be async, but this is\n        // OK because we're leveraging the sync nature of queries. Ideally we\n        // wouldn't be querying here. But I think we have to. At least for now\n        // we do\n        const categories = db.runQuery(\n          'SELECT * FROM categories WHERE tombstone = 0 AND cat_group = ?',\n          [group.id],\n          true,\n        );\n        createCategoryGroup({ ...group, categories }, sheetName);\n\n        addDeps(sheetName, group.id);\n      });\n    }\n  }\n}\n","// @ts-strict-ignore\nimport * as monthUtils from '../../shared/months';\nimport { safeNumber } from '../../shared/util';\nimport * as db from '../db';\nimport * as sheet from '../sheet';\nimport { resolveName } from '../spreadsheet/util';\n\nimport { createCategory as createCategoryFromBase } from './base';\nimport { number, sumAmounts } from './util';\n\nexport async function createCategory(cat, sheetName, prevSheetName) {\n  sheet.get().createStatic(sheetName, `budget-${cat.id}`, 0);\n\n  // This makes the app more robust by \"fixing up\" null budget values.\n  // Those should not be allowed, but in case somehow a null value\n  // ends up there, we are resilient to it. Preferrably the\n  // spreadsheet would have types and be more strict about what is\n  // allowed to be set.\n  if (sheet.get().getCellValue(sheetName, `budget-${cat.id}`) == null) {\n    sheet.get().set(resolveName(sheetName, `budget-${cat.id}`), 0);\n  }\n\n  sheet.get().createDynamic(sheetName, `leftover-${cat.id}`, {\n    initialValue: 0,\n    dependencies: [\n      `budget-${cat.id}`,\n      `sum-amount-${cat.id}`,\n      `${prevSheetName}!carryover-${cat.id}`,\n      `${prevSheetName}!leftover-${cat.id}`,\n    ],\n    run: (budgeted, sumAmount, prevCarryover, prevLeftover) => {\n      if (cat.is_income) {\n        return safeNumber(\n          number(budgeted) -\n            number(sumAmount) +\n            (prevCarryover ? number(prevLeftover) : 0),\n        );\n      }\n\n      return safeNumber(\n        number(budgeted) +\n          number(sumAmount) +\n          (prevCarryover ? number(prevLeftover) : 0),\n      );\n    },\n  });\n  sheet.get().createDynamic(sheetName, `spent-with-carryover-${cat.id}`, {\n    initialValue: 0,\n    dependencies: [\n      `budget-${cat.id}`,\n      `sum-amount-${cat.id}`,\n      `carryover-${cat.id}`,\n    ],\n    // TODO: Why refresh??\n    refresh: true,\n    run: (budgeted, sumAmount, carryover) => {\n      return carryover\n        ? Math.max(0, safeNumber(number(budgeted) + number(sumAmount)))\n        : sumAmount;\n    },\n  });\n\n  sheet.get().createStatic(sheetName, `carryover-${cat.id}`, false);\n}\n\nexport function createCategoryGroup(group, sheetName) {\n  // different sum amount dependencies\n  sheet.get().createDynamic(sheetName, 'group-sum-amount-' + group.id, {\n    initialValue: 0,\n    dependencies: group.categories\n      .filter(cat => !cat.hidden)\n      .map(cat => `sum-amount-${cat.id}`),\n    run: sumAmounts,\n  });\n  sheet.get().createDynamic(sheetName, 'group-budget-' + group.id, {\n    initialValue: 0,\n    dependencies: group.categories\n      .filter(cat => !cat.hidden)\n      .map(cat => `budget-${cat.id}`),\n    run: sumAmounts,\n  });\n  sheet.get().createDynamic(sheetName, 'group-leftover-' + group.id, {\n    initialValue: 0,\n    dependencies: group.categories\n      .filter(cat => !cat.hidden)\n      .map(cat => `leftover-${cat.id}`),\n    run: sumAmounts,\n  });\n}\n\nexport function createSummary(groups, sheetName) {\n  const incomeGroup = groups.filter(group => group.is_income)[0];\n  const expenseGroups = groups.filter(\n    group => !group.is_income && !group.hidden,\n  );\n\n  sheet.get().createDynamic(sheetName, 'total-budgeted', {\n    initialValue: 0,\n    dependencies: expenseGroups.map(group => `group-budget-${group.id}`),\n    run: sumAmounts,\n  });\n\n  sheet.get().createDynamic(sheetName, 'total-spent', {\n    initialValue: 0,\n    refresh: true,\n    dependencies: expenseGroups.map(group => `group-sum-amount-${group.id}`),\n    run: sumAmounts,\n  });\n\n  sheet.get().createDynamic(sheetName, 'total-income', {\n    initialValue: 0,\n    dependencies: [`group-sum-amount-${incomeGroup.id}`],\n    run: amount => amount,\n  });\n\n  sheet.get().createDynamic(sheetName, 'total-leftover', {\n    initialValue: 0,\n    dependencies: expenseGroups.map(g => `group-leftover-${g.id}`),\n    run: sumAmounts,\n  });\n\n  sheet.get().createDynamic(sheetName, 'total-budget-income', {\n    initialValue: 0,\n    dependencies: [`group-budget-${incomeGroup.id}`],\n    run: amount => amount,\n  });\n\n  sheet.get().createDynamic(sheetName, 'total-saved', {\n    initialValue: 0,\n    dependencies: ['total-budget-income', 'total-budgeted'],\n    run: (income, budgeted) => {\n      return income - budgeted;\n    },\n  });\n\n  sheet.get().createDynamic(sheetName, 'real-saved', {\n    initialValue: 0,\n    dependencies: ['total-income', 'total-spent'],\n    run: (income, spent) => {\n      return safeNumber(income - -spent);\n    },\n  });\n}\n\nexport function handleCategoryChange(months, oldValue, newValue) {\n  function addDeps(sheetName, groupId, catId) {\n    sheet\n      .get()\n      .addDependencies(sheetName, `group-sum-amount-${groupId}`, [\n        `sum-amount-${catId}`,\n      ]);\n    sheet\n      .get()\n      .addDependencies(sheetName, `group-budget-${groupId}`, [\n        `budget-${catId}`,\n      ]);\n    sheet\n      .get()\n      .addDependencies(sheetName, `group-leftover-${groupId}`, [\n        `leftover-${catId}`,\n      ]);\n  }\n\n  function removeDeps(sheetName, groupId, catId) {\n    sheet\n      .get()\n      .removeDependencies(sheetName, `group-sum-amount-${groupId}`, [\n        `sum-amount-${catId}`,\n      ]);\n    sheet\n      .get()\n      .removeDependencies(sheetName, `group-budget-${groupId}`, [\n        `budget-${catId}`,\n      ]);\n    sheet\n      .get()\n      .removeDependencies(sheetName, `group-leftover-${groupId}`, [\n        `leftover-${catId}`,\n      ]);\n  }\n\n  if (oldValue && oldValue.tombstone === 0 && newValue.tombstone === 1) {\n    const id = newValue.id;\n    const groupId = newValue.cat_group;\n\n    months.forEach(month => {\n      const sheetName = monthUtils.sheetForMonth(month);\n      removeDeps(sheetName, groupId, id);\n    });\n  } else if (\n    newValue.tombstone === 0 &&\n    (!oldValue || oldValue.tombstone === 1)\n  ) {\n    months.forEach(month => {\n      const prevMonth = monthUtils.prevMonth(month);\n      const prevSheetName = monthUtils.sheetForMonth(prevMonth);\n      const sheetName = monthUtils.sheetForMonth(month);\n      const { start, end } = monthUtils.bounds(month);\n\n      createCategoryFromBase(newValue, sheetName, prevSheetName, start, end);\n\n      const id = newValue.id;\n      const groupId = newValue.cat_group;\n\n      addDeps(sheetName, groupId, id);\n    });\n  } else if (oldValue && oldValue.cat_group !== newValue.cat_group) {\n    // The category moved so we need to update the dependencies\n    const id = newValue.id;\n\n    months.forEach(month => {\n      const sheetName = monthUtils.sheetForMonth(month);\n      removeDeps(sheetName, oldValue.cat_group, id);\n      addDeps(sheetName, newValue.cat_group, id);\n    });\n  } else if (oldValue && oldValue.hidden !== newValue.hidden) {\n    const id = newValue.id;\n    const groupId = newValue.cat_group;\n\n    months.forEach(month => {\n      const sheetName = monthUtils.sheetForMonth(month);\n      if (newValue.hidden) {\n        removeDeps(sheetName, groupId, id);\n      } else {\n        addDeps(sheetName, groupId, id);\n      }\n    });\n  }\n}\n\nexport function handleCategoryGroupChange(months, oldValue, newValue) {\n  function addDeps(sheetName, groupId) {\n    sheet\n      .get()\n      .addDependencies(sheetName, 'total-budgeted', [\n        `group-budget-${groupId}`,\n      ]);\n    sheet\n      .get()\n      .addDependencies(sheetName, 'total-spent', [\n        `group-sum-amount-${groupId}`,\n      ]);\n    sheet\n      .get()\n      .addDependencies(sheetName, 'total-leftover', [\n        `group-leftover-${groupId}`,\n      ]);\n  }\n\n  function removeDeps(sheetName, groupId) {\n    sheet\n      .get()\n      .removeDependencies(sheetName, 'total-budgeted', [\n        `group-budget-${groupId}`,\n      ]);\n    sheet\n      .get()\n      .removeDependencies(sheetName, 'total-spent', [\n        `group-sum-amount-${groupId}`,\n      ]);\n    sheet\n      .get()\n      .removeDependencies(sheetName, 'total-leftover', [\n        `group-leftover-${groupId}`,\n      ]);\n  }\n\n  if (newValue.tombstone === 1 && oldValue && oldValue.tombstone === 0) {\n    const id = newValue.id;\n    months.forEach(month => {\n      const sheetName = monthUtils.sheetForMonth(month);\n      removeDeps(sheetName, id);\n    });\n  } else if (\n    newValue.tombstone === 0 &&\n    (!oldValue || oldValue.tombstone === 1)\n  ) {\n    const group = newValue;\n\n    months.forEach(month => {\n      const sheetName = monthUtils.sheetForMonth(month);\n\n      // Dirty, dirty hack. These functions should not be async, but this is\n      // OK because we're leveraging the sync nature of queries. Ideally we\n      // wouldn't be querying here. But I think we have to. At least for now\n      // we do\n      const categories = db.runQuery(\n        'SELECT * FROM categories WHERE tombstone = 0 AND cat_group = ?',\n        [group.id],\n        true,\n      );\n      createCategoryGroup({ ...group, categories }, sheetName);\n\n      addDeps(sheetName, group.id);\n    });\n  } else if (oldValue && oldValue.hidden !== newValue.hidden) {\n    const group = newValue;\n\n    months.forEach(month => {\n      const sheetName = monthUtils.sheetForMonth(month);\n      if (newValue.hidden) {\n        removeDeps(sheetName, group.id);\n      } else {\n        addDeps(sheetName, group.id);\n      }\n    });\n  }\n}\n","// @ts-strict-ignore\nimport * as monthUtils from '../../shared/months';\nimport { q } from '../../shared/query';\nimport { getChangedValues } from '../../shared/util';\nimport { CategoryGroupEntity } from '../../types/models';\nimport { aqlQuery } from '../aql';\nimport * as db from '../db';\nimport * as sheet from '../sheet';\nimport { resolveName } from '../spreadsheet/util';\n\nimport * as budgetActions from './actions';\nimport * as envelopeBudget from './envelope';\nimport * as report from './report';\n\nexport function getBudgetType() {\n  const meta = sheet.get().meta();\n  return meta.budgetType || 'envelope';\n}\n\nexport function getBudgetRange(start: string, end: string) {\n  start = monthUtils.getMonth(start);\n  end = monthUtils.getMonth(end);\n\n  // The start date should never be after the end date. If that\n  // happened, the month range might be a valid range and weird\n  // things happen\n  if (start > end) {\n    start = end;\n  }\n\n  // Budgets should exist 3 months before the earliest needed date\n  // (either the oldest transaction or the current month if no\n  // transactions yet), and a year from the current date. There's no\n  // need to ever have budgets outside that range.\n  start = monthUtils.subMonths(start, 3);\n  end = monthUtils.addMonths(end, 12);\n\n  return { start, end, range: monthUtils.rangeInclusive(start, end) };\n}\n\nexport function createCategory(cat, sheetName, prevSheetName, start, end) {\n  sheet.get().createDynamic(sheetName, 'sum-amount-' + cat.id, {\n    initialValue: 0,\n    run: () => {\n      // Making this sync is faster!\n      const rows = db.runQuery<{ amount: number }>(\n        `SELECT SUM(amount) as amount FROM v_transactions_internal_alive t\n           LEFT JOIN accounts a ON a.id = t.account\n         WHERE t.date >= ${start} AND t.date <= ${end}\n           AND category = '${cat.id}' AND a.offbudget = 0`,\n        [],\n        true,\n      );\n      const row = rows[0];\n      const amount = row ? row.amount : 0;\n      return amount || 0;\n    },\n  });\n\n  if (getBudgetType() === 'envelope') {\n    envelopeBudget.createCategory(cat, sheetName, prevSheetName);\n  } else {\n    report.createCategory(cat, sheetName, prevSheetName);\n  }\n}\n\nfunction handleAccountChange(months, oldValue, newValue) {\n  if (!oldValue || oldValue.offbudget !== newValue.offbudget) {\n    const rows = db.runQuery<Pick<db.DbTransaction, 'category'>>(\n      `\n        SELECT DISTINCT(category) as category FROM transactions\n        WHERE acct = ?\n      `,\n      [newValue.id],\n      true,\n    );\n\n    months.forEach(month => {\n      const sheetName = monthUtils.sheetForMonth(month);\n\n      rows.forEach(row => {\n        sheet\n          .get()\n          .recompute(resolveName(sheetName, 'sum-amount-' + row.category));\n      });\n    });\n  }\n}\n\nfunction handleTransactionChange(transaction, changedFields) {\n  if (\n    (changedFields.has('date') ||\n      changedFields.has('acct') ||\n      changedFields.has('amount') ||\n      changedFields.has('category') ||\n      changedFields.has('tombstone') ||\n      changedFields.has('isParent')) &&\n    transaction.date &&\n    transaction.category\n  ) {\n    const month = monthUtils.monthFromDate(db.fromDateRepr(transaction.date));\n    const sheetName = monthUtils.sheetForMonth(month);\n\n    sheet\n      .get()\n      .recompute(resolveName(sheetName, 'sum-amount-' + transaction.category));\n  }\n}\n\nfunction handleCategoryMappingChange(months, oldValue, newValue) {\n  months.forEach(month => {\n    const sheetName = monthUtils.sheetForMonth(month);\n    if (oldValue) {\n      sheet\n        .get()\n        .recompute(resolveName(sheetName, 'sum-amount-' + oldValue.transferId));\n    }\n    sheet\n      .get()\n      .recompute(resolveName(sheetName, 'sum-amount-' + newValue.transferId));\n  });\n}\n\nfunction handleBudgetMonthChange(budget) {\n  const sheetName = monthUtils.sheetForMonth(budget.id);\n  sheet.get().set(`${sheetName}!buffered`, budget.buffered);\n}\n\nfunction handleBudgetChange(budget) {\n  if (budget.category) {\n    const sheetName = monthUtils.sheetForMonth(budget.month.toString());\n    sheet\n      .get()\n      .set(`${sheetName}!budget-${budget.category}`, budget.amount || 0);\n    sheet\n      .get()\n      .set(\n        `${sheetName}!carryover-${budget.category}`,\n        budget.carryover === 1 ? true : false,\n      );\n    sheet.get().set(`${sheetName}!goal-${budget.category}`, budget.goal);\n    sheet\n      .get()\n      .set(`${sheetName}!long-goal-${budget.category}`, budget.long_goal);\n  }\n}\n\nexport function triggerBudgetChanges(oldValues, newValues) {\n  const { createdMonths = new Set() } = sheet.get().meta();\n  const budgetType = getBudgetType();\n  sheet.startTransaction();\n\n  try {\n    newValues.forEach((items, table) => {\n      const old = oldValues.get(table);\n\n      items.forEach(newValue => {\n        const oldValue = old && old.get(newValue.id);\n\n        if (table === 'zero_budget_months') {\n          handleBudgetMonthChange(newValue);\n        } else if (table === 'zero_budgets' || table === 'reflect_budgets') {\n          handleBudgetChange(newValue);\n        } else if (table === 'transactions') {\n          const changed = new Set(\n            Object.keys(getChangedValues(oldValue || {}, newValue) || {}),\n          );\n\n          if (oldValue) {\n            handleTransactionChange(oldValue, changed);\n          }\n          handleTransactionChange(newValue, changed);\n        } else if (table === 'category_mapping') {\n          handleCategoryMappingChange(createdMonths, oldValue, newValue);\n        } else if (table === 'categories') {\n          if (budgetType === 'envelope') {\n            envelopeBudget.handleCategoryChange(\n              createdMonths,\n              oldValue,\n              newValue,\n            );\n          } else {\n            report.handleCategoryChange(createdMonths, oldValue, newValue);\n          }\n        } else if (table === 'category_groups') {\n          if (budgetType === 'envelope') {\n            envelopeBudget.handleCategoryGroupChange(\n              createdMonths,\n              oldValue,\n              newValue,\n            );\n          } else {\n            report.handleCategoryGroupChange(createdMonths, oldValue, newValue);\n          }\n        } else if (table === 'accounts') {\n          handleAccountChange(createdMonths, oldValue, newValue);\n        }\n      });\n    });\n  } finally {\n    sheet.endTransaction();\n  }\n}\n\nexport async function doTransfer(categoryIds, transferId) {\n  const { createdMonths: months } = sheet.get().meta();\n\n  [...months].forEach(month => {\n    const totalValue = categoryIds\n      .map(id => {\n        return budgetActions.getBudget({ month, category: id });\n      })\n      .reduce((total, value) => total + value, 0);\n\n    const transferValue = budgetActions.getBudget({\n      month,\n      category: transferId,\n    });\n\n    budgetActions.setBudget({\n      month,\n      category: transferId,\n      amount: totalValue + transferValue,\n    });\n  });\n}\n\nexport async function createBudget(months) {\n  const { data: groups }: { data: CategoryGroupEntity[] } = await aqlQuery(\n    q('category_groups').select('*'),\n  );\n  const categories = groups.flatMap(group => group.categories);\n\n  sheet.startTransaction();\n  const meta = sheet.get().meta();\n  meta.createdMonths = meta.createdMonths || new Set();\n\n  const budgetType = getBudgetType();\n\n  if (budgetType === 'envelope') {\n    envelopeBudget.createBudget(meta, categories, months);\n  }\n\n  months.forEach(month => {\n    if (!meta.createdMonths.has(month)) {\n      const prevMonth = monthUtils.prevMonth(month);\n      const { start, end } = monthUtils.bounds(month);\n      const sheetName = monthUtils.sheetForMonth(month);\n      const prevSheetName = monthUtils.sheetForMonth(prevMonth);\n\n      categories.forEach(cat => {\n        createCategory(cat, sheetName, prevSheetName, start, end);\n      });\n      groups.forEach(group => {\n        if (budgetType === 'envelope') {\n          envelopeBudget.createCategoryGroup(group, sheetName);\n        } else {\n          report.createCategoryGroup(group, sheetName);\n        }\n      });\n\n      if (budgetType === 'envelope') {\n        envelopeBudget.createSummary(\n          groups,\n          categories,\n          prevSheetName,\n          sheetName,\n        );\n      } else {\n        report.createSummary(groups, sheetName);\n      }\n\n      meta.createdMonths.add(month);\n    }\n  });\n\n  sheet.get().setMeta(meta);\n  sheet.endTransaction();\n\n  // Wait for the spreadsheet to finish computing. Normally this won't\n  // do anything (as values are cached) but on first run this need to\n  // show the loading screen while it initially sets up.\n  await sheet.waitOnSpreadsheet();\n}\n\nexport async function createAllBudgets() {\n  const earliestTransaction = await db.first<db.DbTransaction>(\n    'SELECT * FROM transactions WHERE isChild=0 AND date IS NOT NULL ORDER BY date ASC LIMIT 1',\n  );\n  const earliestDate =\n    earliestTransaction && db.fromDateRepr(earliestTransaction.date);\n  const currentMonth = monthUtils.currentMonth();\n\n  // Get the range based off of the earliest transaction and the\n  // current month. If no transactions currently exist the current\n  // month is also used as the starting month\n  const { start, end, range } = getBudgetRange(\n    earliestDate || currentMonth,\n    currentMonth,\n  );\n\n  const meta = sheet.get().meta();\n  const createdMonths = meta.createdMonths || new Set();\n  const newMonths = range.filter(m => !createdMonths.has(m));\n\n  if (newMonths.length > 0) {\n    await createBudget(range);\n  }\n\n  return { start, end };\n}\n\nexport async function setType(type) {\n  const meta = sheet.get().meta();\n  if (type === meta.budgetType) {\n    return;\n  }\n\n  meta.budgetType = type;\n  meta.createdMonths = new Set();\n\n  // Go through and force all the cells to be recomputed\n  const nodes = sheet.get().getNodes();\n  db.transaction(() => {\n    for (const name of nodes.keys()) {\n      const [sheetName, cellName] = name.split('!');\n      if (sheetName.match(/^budget\\d+/)) {\n        sheet.get().deleteCell(sheetName, cellName);\n      }\n    }\n  });\n\n  sheet.get().startCacheBarrier();\n  sheet.loadUserBudgets(db);\n  const bounds = await createAllBudgets();\n  sheet.get().endCacheBarrier();\n\n  return bounds;\n}\n","import * as connection from '../platform/server/connection';\nimport { Handlers } from '../types/handlers';\n\nimport { createApp } from './app';\n\n// Main app\nexport const app = createApp<Handlers>();\n\napp.events.on('sync', event => {\n  connection.send('sync-event', event);\n});\n","// @ts-strict-ignore\nimport { captureException, captureBreadcrumb } from '../platform/exceptions';\nimport { sequential } from '../shared/async';\nimport { type HandlerFunctions, type Handlers } from '../types/handlers';\n\nconst runningMethods = new Set();\n\nlet currentContext = null;\nconst mutatingMethods = new WeakMap();\nlet globalMutationsEnabled = false;\n\nlet _latestHandlerNames = [];\n\nexport function mutator<T extends HandlerFunctions>(handler: T): T {\n  mutatingMethods.set(handler, true);\n  return handler;\n}\n\nexport function isMutating(handler) {\n  return mutatingMethods.has(handler);\n}\n\nasync function flushRunningMethods() {\n  // Give the client some time to invoke new requests\n  await wait(200);\n\n  while (runningMethods.size > 0) {\n    // Wait for all of them\n    await Promise.all([...runningMethods.values()]);\n\n    // We give clients more time to make other requests. This lets them continue\n    // to do an async workflow\n    await wait(100);\n  }\n}\n\nfunction wait(time) {\n  return new Promise(resolve => setTimeout(resolve, time));\n}\n\nexport async function runHandler<T extends Handlers[keyof Handlers]>(\n  handler: T,\n  args?: Parameters<T>[0],\n  { undoTag, name }: { undoTag?; name? } = {},\n): Promise<ReturnType<T>> {\n  // For debug reasons, track the latest handlers that have been\n  // called\n  _latestHandlerNames.push(name);\n  if (_latestHandlerNames.length > 5) {\n    _latestHandlerNames = _latestHandlerNames.slice(-5);\n  }\n\n  if (mutatingMethods.has(handler)) {\n    return runMutator(() => handler(args), { undoTag }) as Promise<\n      ReturnType<T>\n    >;\n  }\n\n  // When closing a file, it clears out all global state for the file. That\n  // means any async workflows currently executed would be cut off. We handle\n  // this by letting all async workflows finish executing before closing the\n  // file\n  if (name === 'close-budget') {\n    await flushRunningMethods();\n  }\n\n  const promise = handler(args);\n  runningMethods.add(promise);\n  promise.then(() => {\n    runningMethods.delete(promise);\n  });\n  return promise as Promise<ReturnType<T>>;\n}\n\n// These are useful for tests. Only use them in tests.\nexport function enableGlobalMutations() {\n  if (process.env.NODE_ENV === 'test') {\n    globalMutationsEnabled = true;\n  }\n}\n\nexport function disableGlobalMutations() {\n  if (process.env.NODE_ENV === 'test') {\n    globalMutationsEnabled = false;\n  }\n}\n\nfunction _runMutator<T extends () => Promise<unknown>>(\n  func: T,\n  initialContext = {},\n): Promise<Awaited<ReturnType<T>>> {\n  currentContext = initialContext;\n  return func().finally(() => {\n    currentContext = null;\n  }) as Promise<Awaited<ReturnType<T>>>;\n}\n// Type cast needed as TS looses types over nested generic returns\nexport const runMutator = sequential(_runMutator) as typeof _runMutator;\n\nexport function withMutatorContext<T>(\n  context: { undoListening: boolean; undoTag?: unknown },\n  func: () => Promise<T>,\n): Promise<T> {\n  if (currentContext == null && !globalMutationsEnabled) {\n    captureBreadcrumb('Recent methods: ' + _latestHandlerNames.join(', '));\n    captureException(new Error('withMutatorContext: mutator not running'));\n\n    // See comment below. This is not an error right now, but it will\n    // be in the future.\n    return func();\n  }\n\n  const prevContext = currentContext;\n  currentContext = { ...currentContext, ...context };\n  return func().finally(() => {\n    currentContext = prevContext;\n  });\n}\n\nexport function getMutatorContext() {\n  if (currentContext == null) {\n    captureBreadcrumb({\n      category: 'server',\n      message: 'Recent methods: ' + _latestHandlerNames.join(', '),\n    });\n    // captureException(new Error('getMutatorContext: mutator not running'));\n\n    // For now, this is a non-fatal error. It will be in the future,\n    // but this is relatively non-critical (undo just won't work) so\n    // return an empty context. When we have more confidence that\n    // everything is running inside a mutator, throw an error.\n    return {};\n  }\n\n  if (currentContext == null && globalMutationsEnabled) {\n    return {};\n  }\n  return currentContext;\n}\n","export const fetch = globalThis.fetch;\n","// @ts-strict-ignore\nimport { fetch } from '../platform/server/fetch';\nimport * as Platform from '../shared/platform';\n\nimport { PostError } from './errors';\n\nfunction throwIfNot200(res: Response, text: string) {\n  if (res.status !== 200) {\n    if (res.status === 500) {\n      throw new PostError(res.status === 500 ? 'internal' : text);\n    }\n\n    const contentType = res.headers.get('Content-Type');\n    if (contentType.toLowerCase().indexOf('application/json') !== -1) {\n      const json = JSON.parse(text);\n      throw new PostError(json.reason);\n    }\n\n    // Actual Sync Server may be exposed via a tunnel (e.g. ngrok). Tunnel errors should be treated as network errors.\n    const tunnelErrorHeaders = ['ngrok-error-code'];\n    const tunnelError = tunnelErrorHeaders.some(header =>\n      res.headers.has(header),\n    );\n\n    if (tunnelError) {\n      // Tunnel errors are present when the tunnel is active and the server is not reachable e.g. server is offline\n      // When we experience a tunnel error we treat it as a network failure\n      throw new PostError('network-failure');\n    }\n\n    throw new PostError(text);\n  }\n}\n\nexport async function post(\n  url: RequestInfo,\n  data: unknown,\n  headers = {},\n  timeout: number | null = null,\n) {\n  let text: string;\n  let res: Response;\n\n  try {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), timeout);\n    const signal = timeout ? controller.signal : null;\n    res = await fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      signal,\n      headers: {\n        ...headers,\n        'Content-Type': 'application/json',\n      },\n    });\n    clearTimeout(timeoutId);\n    text = await res.text();\n  } catch (err) {\n    throw new PostError('network-failure');\n  }\n\n  throwIfNot200(res, text);\n\n  let responseData;\n\n  try {\n    responseData = JSON.parse(text);\n  } catch (err) {\n    // Something seriously went wrong. TODO handle errors\n    throw new PostError('parse-json', { meta: text });\n  }\n\n  if (responseData.status !== 'ok') {\n    console.log(\n      'API call failed: ' +\n        url +\n        '\\nData: ' +\n        JSON.stringify(data, null, 2) +\n        '\\nResponse: ' +\n        JSON.stringify(res, null, 2),\n    );\n\n    throw new PostError(\n      responseData.description || responseData.reason || 'unknown',\n    );\n  }\n\n  return responseData.data;\n}\n\nexport async function del(url, data, headers = {}, timeout = null) {\n  let text;\n  let res;\n\n  try {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), timeout);\n    const signal = timeout ? controller.signal : null;\n    res = await fetch(url, {\n      method: 'DELETE',\n      body: JSON.stringify(data),\n      signal,\n      headers: {\n        ...headers,\n        'Content-Type': 'application/json',\n      },\n    });\n    clearTimeout(timeoutId);\n    text = await res.text();\n  } catch (err) {\n    throw new PostError('network-failure');\n  }\n\n  throwIfNot200(res, text);\n\n  try {\n    res = JSON.parse(text);\n  } catch (err) {\n    // Something seriously went wrong. TODO handle errors\n    throw new PostError('parse-json', { meta: text });\n  }\n\n  if (res.status !== 'ok') {\n    console.log(\n      'API call failed: ' +\n        url +\n        '\\nData: ' +\n        JSON.stringify(data, null, 2) +\n        '\\nResponse: ' +\n        JSON.stringify(res, null, 2),\n    );\n\n    throw new PostError(res.description || res.reason || 'unknown');\n  }\n\n  return res.data;\n}\n\nexport async function patch(url, data, headers = {}, timeout = null) {\n  let text;\n  let res;\n\n  try {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), timeout);\n    const signal = timeout ? controller.signal : null;\n    res = await fetch(url, {\n      method: 'PATCH',\n      body: JSON.stringify(data),\n      signal,\n      headers: {\n        ...headers,\n        'Content-Type': 'application/json',\n      },\n    });\n    clearTimeout(timeoutId);\n    text = await res.text();\n  } catch (err) {\n    throw new PostError('network-failure');\n  }\n\n  throwIfNot200(res, text);\n\n  try {\n    res = JSON.parse(text);\n  } catch (err) {\n    // Something seriously went wrong. TODO handle errors\n    throw new PostError('parse-json', { meta: text });\n  }\n\n  if (res.status !== 'ok') {\n    console.log(\n      'API call failed: ' +\n        url +\n        '\\nData: ' +\n        JSON.stringify(data, null, 2) +\n        '\\nResponse: ' +\n        JSON.stringify(res, null, 2),\n    );\n\n    throw new PostError(res.description || res.reason || 'unknown');\n  }\n\n  return res.data;\n}\n\nexport async function postBinary(url, data, headers) {\n  let res;\n  try {\n    res = await fetch(url, {\n      method: 'POST',\n      body: Platform.isBrowser ? data : Buffer.from(data),\n      headers: {\n        'Content-Length': data.length,\n        'Content-Type': 'application/actual-sync',\n        ...headers,\n      },\n    });\n  } catch (err) {\n    throw new PostError('network-failure');\n  }\n\n  let buffer;\n  if (res.arrayBuffer) {\n    buffer = Buffer.from(await res.arrayBuffer());\n  } else {\n    buffer = await res.buffer();\n  }\n\n  throwIfNot200(res, buffer.toString());\n\n  return buffer;\n}\n\nexport function get(url, opts?) {\n  return fetch(url, opts).then(res => res.text());\n}\n","// @ts-strict-ignore\nimport { Timestamp } from '@actual-app/crdt';\n\nimport * as fs from '../platform/server/fs';\nimport type { MetadataPrefs } from '../types/prefs';\n\nimport { Message, sendMessages } from './sync';\n\nexport const BUDGET_TYPES = ['tracking', 'envelope'] as const;\nexport type BudgetType = (typeof BUDGET_TYPES)[number];\n\nexport const UPCOMING_SCHEDULED_TRANSACTION_LENGTHS = [\n  '1',\n  '7',\n  '14',\n  '30',\n] as const;\nexport type UpcomingScheduledTransactionLength =\n  (typeof UPCOMING_SCHEDULED_TRANSACTION_LENGTHS)[number];\n\nlet prefs: MetadataPrefs = null;\n\nexport async function loadPrefs(id?: string): Promise<MetadataPrefs> {\n  if (process.env.NODE_ENV === 'test' && !id) {\n    prefs = getDefaultPrefs('test', 'test_LocalPrefs');\n    return prefs;\n  }\n\n  const fullpath = fs.join(fs.getBudgetDir(id), 'metadata.json');\n\n  try {\n    prefs = JSON.parse(await fs.readFile(fullpath));\n  } catch (e) {\n    // If the user messed something up, be flexible and allow them to\n    // still load the budget database. Default the budget name to the\n    // id.\n    prefs = { id, budgetName: id };\n  }\n\n  // No matter what is in `id` field, force it to be the current id.\n  // This makes it resilient to users moving around folders, etc\n  prefs.id = id;\n  return prefs;\n}\n\nexport async function savePrefs(\n  prefsToSet: MetadataPrefs,\n  { avoidSync = false } = {},\n): Promise<void> {\n  Object.assign(prefs, prefsToSet);\n\n  if (!avoidSync) {\n    // Sync whitelisted prefs\n    const messages: Message[] = Object.keys(prefsToSet)\n      .map(key => {\n        if (key === 'budgetName') {\n          return {\n            dataset: 'prefs',\n            row: key,\n            column: 'value',\n            value: prefsToSet[key],\n            timestamp: Timestamp.send(),\n          };\n        }\n        return null;\n      })\n      .filter(x => x);\n\n    if (messages.length > 0) {\n      await sendMessages(messages);\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'test') {\n    const prefsPath = fs.join(fs.getBudgetDir(prefs.id), 'metadata.json');\n    await fs.writeFile(prefsPath, JSON.stringify(prefs));\n  }\n}\n\nexport function unloadPrefs(): void {\n  prefs = null;\n}\n\nexport function getPrefs(): MetadataPrefs {\n  return prefs;\n}\n\nexport function getDefaultPrefs(id: string, budgetName: string) {\n  return { id, budgetName };\n}\n","import * as fs from '../platform/server/fs';\n\ntype ServerConfig = {\n  BASE_SERVER: string;\n  SYNC_SERVER: string;\n  SIGNUP_SERVER: string;\n  GOCARDLESS_SERVER: string;\n  SIMPLEFIN_SERVER: string;\n  PLUGGYAI_SERVER: string;\n};\n\nlet config: ServerConfig | null = null;\n\nfunction joinURL(base: string | URL, ...paths: string[]): string {\n  const url = new URL(base);\n  url.pathname = fs.join(url.pathname, ...paths);\n  return url.toString();\n}\n\nexport function isValidBaseURL(base: string): boolean {\n  try {\n    return Boolean(new URL(base));\n  } catch (error) {\n    return false;\n  }\n}\n\nexport function setServer(url: string): void {\n  if (url == null) {\n    config = null;\n  } else {\n    config = getServer(url);\n  }\n}\n\n// `url` is optional; if not given it will provide the global config\nexport function getServer(url?: string): ServerConfig | null {\n  if (url) {\n    try {\n      return {\n        BASE_SERVER: url,\n        SYNC_SERVER: joinURL(url, '/sync'),\n        SIGNUP_SERVER: joinURL(url, '/account'),\n        GOCARDLESS_SERVER: joinURL(url, '/gocardless'),\n        SIMPLEFIN_SERVER: joinURL(url, '/simplefin'),\n        PLUGGYAI_SERVER: joinURL(url, '/pluggyai'),\n      };\n    } catch (error) {\n      console.warn(\n        'Unable to parse server URL - using the global config.',\n        { config },\n        error,\n      );\n      return config;\n    }\n  }\n  return config;\n}\n","// @ts-strict-ignore\nimport { Timestamp } from '@actual-app/crdt';\n\nimport * as connection from '../platform/server/connection';\nimport { getIn } from '../shared/util';\nimport { type HandlerFunctions } from '../types/handlers';\n\nimport { withMutatorContext, getMutatorContext } from './mutators';\nimport { Message, sendMessages } from './sync';\n\n// A marker always sits as the first entry to simplify logic\ntype MarkerMessage = { type: 'marker'; meta?: unknown };\ntype MessagesMessage = {\n  type: 'messages';\n  messages: Message[];\n  meta?: unknown;\n  oldData;\n  undoTag;\n};\nlet MESSAGE_HISTORY: Array<MarkerMessage | MessagesMessage> = [\n  { type: 'marker' },\n];\nlet CURSOR = 0;\nconst HISTORY_SIZE = 20;\n\nexport type UndoState = {\n  messages: Message[];\n  meta?: unknown;\n  tables: string[];\n  undoTag: string;\n};\n\nfunction trimHistory() {\n  MESSAGE_HISTORY = MESSAGE_HISTORY.slice(0, CURSOR + 1);\n\n  const markers = MESSAGE_HISTORY.filter(item => item.type === 'marker');\n  if (markers.length > HISTORY_SIZE) {\n    const slice = markers.slice(-HISTORY_SIZE);\n    const cutoff = MESSAGE_HISTORY.indexOf(slice[0]);\n    MESSAGE_HISTORY = MESSAGE_HISTORY.slice(cutoff);\n    CURSOR = MESSAGE_HISTORY.length - 1;\n  }\n}\n\nexport function appendMessages(messages, oldData) {\n  const context = getMutatorContext();\n\n  if (context.undoListening && messages.length > 0) {\n    trimHistory();\n\n    const { undoTag } = context;\n\n    MESSAGE_HISTORY.push({\n      type: 'messages',\n      messages,\n      oldData,\n      undoTag,\n    });\n    CURSOR++;\n  }\n}\n\nexport function clearUndo() {\n  MESSAGE_HISTORY = [{ type: 'marker' }];\n  CURSOR = 0;\n}\n\nexport function withUndo<T>(\n  func: () => Promise<T>,\n  meta?: unknown,\n): Promise<T> {\n  const context = getMutatorContext();\n  if (context.undoDisabled || context.undoListening) {\n    return func();\n  }\n\n  MESSAGE_HISTORY = MESSAGE_HISTORY.slice(0, CURSOR + 1);\n\n  const marker: MarkerMessage = { type: 'marker', meta };\n\n  if (MESSAGE_HISTORY[MESSAGE_HISTORY.length - 1].type === 'marker') {\n    MESSAGE_HISTORY[MESSAGE_HISTORY.length - 1] = marker;\n  } else {\n    MESSAGE_HISTORY.push(marker);\n    CURSOR++;\n  }\n\n  return withMutatorContext(\n    { undoListening: true, undoTag: context.undoTag },\n    func,\n  );\n}\n\nexport function undoable<T extends HandlerFunctions>(\n  func: T,\n  metaFunc?: (...metaArgs: Parameters<T>) => unknown,\n) {\n  return (...args: Parameters<T>) => {\n    return withUndo<Awaited<ReturnType<T>>>(\n      () => {\n        return func.apply(null, args);\n      },\n      metaFunc ? metaFunc(...args) : undefined,\n    );\n  };\n}\n\nasync function applyUndoAction(messages, meta, undoTag) {\n  await withMutatorContext({ undoListening: false }, () => {\n    return sendMessages(\n      messages.map(msg => ({ ...msg, timestamp: Timestamp.send() })),\n    );\n  });\n\n  const tables = messages.reduce((acc, message) => {\n    if (!acc.includes(message.dataset)) {\n      acc.push(message.dataset);\n    }\n    return acc;\n  }, []);\n\n  connection.send('undo-event', {\n    messages,\n    tables,\n    meta,\n    undoTag,\n  });\n}\n\nexport async function undo() {\n  const end = CURSOR;\n  CURSOR = Math.max(CURSOR - 1, 0);\n\n  // Walk back to the nearest marker\n  while (CURSOR > 0 && MESSAGE_HISTORY[CURSOR].type !== 'marker') {\n    CURSOR--;\n  }\n\n  const meta = MESSAGE_HISTORY[CURSOR].meta;\n  const start = Math.max(CURSOR, 0);\n  const entries = MESSAGE_HISTORY.slice(start, end + 1).filter(\n    (entry): entry is MessagesMessage => entry.type === 'messages',\n  );\n\n  if (entries.length > 0) {\n    const toApply = entries\n      .reduce((acc, entry) => {\n        return acc.concat(\n          entry.messages\n            .map(message => undoMessage(message, entry.oldData))\n            .filter(x => x),\n        );\n      }, [])\n      .reverse();\n\n    await applyUndoAction(toApply, meta, entries[0].undoTag);\n  }\n}\n\nfunction undoMessage(message, oldData) {\n  const oldItem = getIn(oldData, [message.dataset, message.row]);\n  if (oldItem) {\n    let column = message.column;\n    if (message.dataset === 'spreadsheet_cells') {\n      // The spreadsheet messages use the `expr` column, but only as a\n      // placeholder. We actually want to read the `cachedValue` prop\n      // from the old item.\n      column = 'cachedValue';\n    }\n\n    return { ...message, value: oldItem[column] };\n  } else {\n    if (message.dataset === 'spreadsheet_cells') {\n      if (message.column === 'expr') {\n        return { ...message, value: null };\n      }\n      return message;\n    } else if (\n      // The mapping fields aren't ever deleted... this should be\n      // harmless since all they are is meta information. Maybe we\n      // should fix this though.\n      message.dataset !== 'category_mapping' &&\n      message.dataset !== 'payee_mapping'\n    ) {\n      if (\n        message.dataset === 'zero_budget_months' ||\n        message.dataset === 'zero_budgets' ||\n        message.dataset === 'reflect_budgets'\n      ) {\n        // Only these fields are reversable\n        if (['buffered', 'amount', 'carryover'].includes(message.column)) {\n          return { ...message, value: 0 };\n        }\n        return null;\n      } else if (message.dataset === 'notes') {\n        return { ...message, value: null };\n      }\n\n      return { ...message, column: 'tombstone', value: 1 };\n    }\n  }\n  return null;\n}\n\nexport async function redo() {\n  const meta =\n    MESSAGE_HISTORY[CURSOR].type === 'marker'\n      ? MESSAGE_HISTORY[CURSOR].meta\n      : null;\n\n  const start = CURSOR;\n  CURSOR = Math.min(CURSOR + 1, MESSAGE_HISTORY.length - 1);\n\n  // Walk forward to the nearest marker\n  while (\n    CURSOR < MESSAGE_HISTORY.length - 1 &&\n    MESSAGE_HISTORY[CURSOR].type !== 'marker'\n  ) {\n    CURSOR++;\n  }\n\n  const end = CURSOR;\n  const entries = MESSAGE_HISTORY.slice(start + 1, end + 1).filter(\n    (entry): entry is MessagesMessage => entry.type === 'messages',\n  );\n\n  if (entries.length > 0) {\n    const toApply = entries.reduce((acc, entry) => {\n      return acc\n        .concat(entry.messages)\n        .concat(redoResurrections(entry.messages, entry.oldData));\n    }, []);\n\n    await applyUndoAction(toApply, meta, entries[entries.length - 1].undoTag);\n  }\n}\n\nfunction redoResurrections(messages, oldData): Message[] {\n  const resurrect = new Set<string>();\n\n  messages.forEach(message => {\n    // If any of the ids didn't exist before, we need to \"resurrect\"\n    // them by resetting their tombstones to 0\n    const oldItem = getIn(oldData, [message.dataset, message.row]);\n    if (\n      !oldItem &&\n      ![\n        'zero_budget_months',\n        'zero_budgets',\n        'reflect_budgets',\n        'notes',\n        'category_mapping',\n        'payee_mapping',\n      ].includes(message.dataset)\n    ) {\n      resurrect.add(message.dataset + '.' + message.row);\n    }\n  });\n\n  return [...resurrect].map(desc => {\n    const [table, row] = desc.split('.');\n    return {\n      dataset: table,\n      row,\n      column: 'tombstone',\n      value: 0,\n      timestamp: Timestamp.send(),\n    };\n  });\n}\n","// @ts-strict-ignore\nimport crypto from 'crypto';\n\nconst ENCRYPTION_ALGORITHM = 'aes-256-gcm' as const;\n\nexport function randomBytes(n) {\n  return crypto.randomBytes(n);\n}\n\nexport function encrypt(masterKey, value) {\n  const masterKeyBuffer = masterKey.getValue().raw;\n  // let iv = createKeyBuffer({ numBytes: 12, secret: masterKeyBuffer });\n  const iv = crypto.randomBytes(12);\n  const cipher = crypto.createCipheriv(\n    ENCRYPTION_ALGORITHM,\n    masterKeyBuffer,\n    iv,\n  );\n  let encrypted = cipher.update(value);\n  encrypted = Buffer.concat([encrypted, cipher.final()]);\n\n  const authTag = cipher.getAuthTag();\n\n  return {\n    value: encrypted,\n    meta: {\n      keyId: masterKey.getId(),\n      algorithm: ENCRYPTION_ALGORITHM,\n      iv: iv.toString('base64'),\n      authTag: authTag.toString('base64'),\n    },\n  };\n}\n\nexport function decrypt(masterKey, encrypted, meta) {\n  const masterKeyBuffer = masterKey.getValue().raw;\n  const { algorithm, iv: originalIv, authTag: originalAuthTag } = meta;\n  const iv = Buffer.from(originalIv, 'base64');\n  const authTag = Buffer.from(originalAuthTag, 'base64');\n\n  const decipher = crypto.createDecipheriv(algorithm, masterKeyBuffer, iv);\n  decipher.setAuthTag(authTag);\n\n  let decrypted = decipher.update(encrypted);\n  decrypted = Buffer.concat([decrypted, decipher.final()]);\n  return decrypted;\n}\n\nexport function createKey({ secret, salt }) {\n  const buffer = createKeyBuffer({ secret, salt });\n  return {\n    raw: buffer,\n    base64: buffer.toString('base64'),\n  };\n}\n\nexport function importKey(str) {\n  return {\n    raw: Buffer.from(str, 'base64'),\n    base64: str,\n  };\n}\n\n/**\n * Generates a Buffer of a desired byte length to be used as either an encryption key or an initialization vector.\n *\n * @private\n */\nfunction createKeyBuffer({\n  numBytes,\n  secret,\n  salt,\n}: {\n  numBytes?: number;\n  secret?: string;\n  salt?: string;\n}) {\n  return crypto.pbkdf2Sync(\n    secret || crypto.randomBytes(128).toString('base64'),\n    salt || crypto.randomBytes(32).toString('base64'),\n    10000,\n    numBytes || 32,\n    'sha512',\n  );\n}\n","// @ts-strict-ignore\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as internals from './encryption-internals';\n\n// A map of all possible master encryption keys to use, keyed by\n// unique id\nlet keys = {};\n\nclass Key {\n  id;\n  value;\n\n  constructor({ id }) {\n    this.id = id || uuidv4();\n  }\n\n  async createFromPassword({ password, salt }) {\n    this.value = await internals.createKey({ secret: password, salt });\n  }\n\n  async createFromBase64(str) {\n    this.value = await internals.importKey(str);\n  }\n\n  getId() {\n    return this.id;\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  serialize() {\n    return {\n      id: this.id,\n      base64: this.value.base64,\n    };\n  }\n}\n\nexport function getKey(keyId) {\n  if (keyId == null || keys[keyId] == null) {\n    throw new Error('missing-key');\n  }\n  return keys[keyId];\n}\n\nexport function hasKey(keyId) {\n  return keyId in keys;\n}\n\nexport function encrypt(value, keyId) {\n  return internals.encrypt(getKey(keyId), value);\n}\n\nexport function decrypt(encrypted, meta) {\n  return internals.decrypt(getKey(meta.keyId), encrypted, meta);\n}\n\nexport function randomBytes(n) {\n  return internals.randomBytes(n);\n}\n\nexport async function loadKey(key) {\n  let keyInstance;\n  if (!(key instanceof Key)) {\n    keyInstance = new Key({ id: key.id });\n    await keyInstance.createFromBase64(key.base64);\n  } else {\n    keyInstance = key;\n  }\n\n  keys[keyInstance.getId()] = keyInstance;\n}\n\nexport function unloadKey(key) {\n  delete keys[key.getId()];\n}\n\nexport function unloadAllKeys() {\n  keys = {};\n}\n\nexport async function createKey({ id, password, salt }) {\n  const key = new Key({ id });\n  await key.createFromPassword({ password, salt });\n  return key;\n}\n","// @ts-strict-ignore\nimport { Timestamp, SyncProtoBuf } from '@actual-app/crdt';\n\nimport * as encryption from '../encryption';\nimport { SyncError } from '../errors';\nimport * as prefs from '../prefs';\n\nimport { Message } from './index';\n\nfunction coerceBuffer(value) {\n  // The web encryption APIs give us back raw Uint8Array... but our\n  // encryption code assumes we can work with it as a buffer. This is\n  // a leaky abstraction and ideally the our abstraction over the web\n  // encryption APIs should do this.\n  if (!Buffer.isBuffer(value)) {\n    return Buffer.from(value);\n  }\n  return value;\n}\n\nexport async function encode(\n  groupId: string,\n  fileId: string,\n  since: Timestamp | string,\n  messages: Message[],\n): Promise<Uint8Array> {\n  const { encryptKeyId } = prefs.getPrefs();\n  const requestPb = new SyncProtoBuf.SyncRequest();\n\n  for (let i = 0; i < messages.length; i++) {\n    const msg = messages[i];\n    const envelopePb = new SyncProtoBuf.MessageEnvelope();\n    envelopePb.setTimestamp(msg.timestamp.toString());\n\n    const messagePb = new SyncProtoBuf.Message();\n    messagePb.setDataset(msg.dataset);\n    messagePb.setRow(msg.row);\n    messagePb.setColumn(msg.column);\n    messagePb.setValue(msg.value as string);\n    const binaryMsg = messagePb.serializeBinary();\n\n    if (encryptKeyId) {\n      const encrypted = new SyncProtoBuf.EncryptedData();\n\n      let result;\n      try {\n        result = await encryption.encrypt(binaryMsg, encryptKeyId);\n      } catch (e) {\n        throw new SyncError('encrypt-failure', {\n          isMissingKey: e.message === 'missing-key',\n        });\n      }\n\n      encrypted.setData(result.value);\n      encrypted.setIv(Buffer.from(result.meta.iv, 'base64'));\n      encrypted.setAuthtag(Buffer.from(result.meta.authTag, 'base64'));\n\n      envelopePb.setContent(encrypted.serializeBinary());\n      envelopePb.setIsencrypted(true);\n    } else {\n      envelopePb.setContent(binaryMsg);\n    }\n\n    requestPb.addMessages(envelopePb);\n  }\n\n  requestPb.setGroupid(groupId);\n  requestPb.setFileid(fileId);\n  requestPb.setKeyid(encryptKeyId);\n  requestPb.setSince(since.toString());\n\n  return requestPb.serializeBinary();\n}\n\nexport async function decode(\n  data: Uint8Array,\n): Promise<{ messages: Message[]; merkle: { hash: number } }> {\n  const { encryptKeyId } = prefs.getPrefs();\n\n  const responsePb = SyncProtoBuf.SyncResponse.deserializeBinary(data);\n  const merkle = JSON.parse(responsePb.getMerkle());\n  const list = responsePb.getMessagesList();\n  const messages = [];\n\n  for (let i = 0; i < list.length; i++) {\n    const envelopePb = list[i];\n    const timestamp = Timestamp.parse(envelopePb.getTimestamp());\n    const encrypted = envelopePb.getIsencrypted();\n    let msg;\n\n    if (encrypted) {\n      const binary = SyncProtoBuf.EncryptedData.deserializeBinary(\n        envelopePb.getContent() as Uint8Array,\n      );\n\n      let decrypted;\n      try {\n        decrypted = await encryption.decrypt(coerceBuffer(binary.getData()), {\n          keyId: encryptKeyId,\n          algorithm: 'aes-256-gcm',\n          iv: coerceBuffer(binary.getIv()),\n          authTag: coerceBuffer(binary.getAuthtag()),\n        });\n      } catch (e) {\n        console.log(e);\n        throw new SyncError('decrypt-failure', {\n          isMissingKey: e.message === 'missing-key',\n        });\n      }\n\n      msg = SyncProtoBuf.Message.deserializeBinary(decrypted);\n    } else {\n      msg = SyncProtoBuf.Message.deserializeBinary(\n        envelopePb.getContent() as Uint8Array,\n      );\n    }\n\n    messages.push({\n      timestamp,\n      dataset: msg.getDataset(),\n      row: msg.getRow(),\n      column: msg.getColumn(),\n      value: msg.getValue(),\n    });\n  }\n\n  return { messages, merkle };\n}\n","// @ts-strict-ignore\nimport { serializeClock, getClock, Timestamp, merkle } from '@actual-app/crdt';\n\nimport * as db from '../db';\n\nexport function rebuildMerkleHash(): {\n  numMessages: number;\n  trie: merkle.TrieNode;\n} {\n  const rows: { timestamp: string }[] = db.runQuery(\n    'SELECT timestamp FROM messages_crdt',\n    [],\n    true,\n  );\n  let trie = merkle.emptyTrie();\n\n  for (let i = 0; i < rows.length; i++) {\n    trie = merkle.insert(trie, Timestamp.parse(rows[i].timestamp));\n  }\n\n  return {\n    numMessages: rows.length,\n    trie,\n  };\n}\n\nexport async function repairSync(): Promise<void> {\n  const rebuilt = rebuildMerkleHash();\n  const clock = getClock();\n\n  // Save it locally\n  clock.merkle = rebuilt.trie;\n\n  // Persist it in the db\n  db.runQuery(\n    db.cache('INSERT OR REPLACE INTO messages_clock (id, clock) VALUES (1, ?)'),\n    [serializeClock(clock)],\n  );\n}\n","export function isError(value: unknown): value is { error: unknown } {\n  return (value as { error: unknown }).error !== undefined;\n}\n","// @ts-strict-ignore\nimport { SyncProtoBuf } from '@actual-app/crdt';\n\nimport * as encryption from '../encryption';\n\nasync function randomString() {\n  return (await encryption.randomBytes(12)).toString();\n}\n\nexport async function makeTestMessage(keyId) {\n  const messagePb = new SyncProtoBuf.Message();\n  messagePb.setDataset(await randomString());\n  messagePb.setRow(await randomString());\n  messagePb.setColumn(await randomString());\n  messagePb.setValue(await randomString());\n  const binaryMsg = messagePb.serializeBinary();\n\n  return await encryption.encrypt(binaryMsg, keyId);\n}\n","// @ts-strict-ignore\nimport AdmZip from 'adm-zip';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as asyncStorage from '../platform/server/asyncStorage';\nimport { fetch } from '../platform/server/fetch';\nimport * as fs from '../platform/server/fs';\nimport * as sqlite from '../platform/server/sqlite';\nimport * as monthUtils from '../shared/months';\n\nimport * as encryption from './encryption';\nimport {\n  HTTPError,\n  PostError,\n  FileDownloadError,\n  FileUploadError,\n} from './errors';\nimport { runMutator } from './mutators';\nimport { post } from './post';\nimport * as prefs from './prefs';\nimport { getServer } from './server-config';\n\nconst UPLOAD_FREQUENCY_IN_DAYS = 7;\n\nexport interface UsersWithAccess {\n  userId: string;\n  userName: string;\n  displayName: string;\n  owner: boolean;\n}\nexport interface RemoteFile {\n  deleted: boolean;\n  fileId: string;\n  groupId: string;\n  name: string;\n  encryptKeyId: string;\n  hasKey: boolean;\n  owner: string;\n  usersWithAccess: UsersWithAccess[];\n}\n\nasync function checkHTTPStatus(res) {\n  if (res.status !== 200) {\n    if (res.status === 403) {\n      try {\n        const text = await res.text();\n        const data = JSON.parse(text)?.data;\n        if (data?.reason === 'token-expired') {\n          await asyncStorage.removeItem('user-token');\n          throw new HTTPError(403, 'token-expired');\n        }\n      } catch (e) {\n        if (e instanceof HTTPError) throw e;\n      }\n    }\n    return res.text().then(str => {\n      throw new HTTPError(res.status, str);\n    });\n  } else {\n    return res;\n  }\n}\n\nasync function fetchJSON(...args: Parameters<typeof fetch>) {\n  let res = await fetch(...args);\n  res = await checkHTTPStatus(res);\n  return res.json();\n}\n\nexport async function checkKey(): Promise<{\n  valid: boolean;\n  error?: { reason: string };\n}> {\n  const userToken = await asyncStorage.getItem('user-token');\n\n  const { cloudFileId, encryptKeyId } = prefs.getPrefs();\n\n  let res;\n  try {\n    res = await post(getServer().SYNC_SERVER + '/user-get-key', {\n      token: userToken,\n      fileId: cloudFileId,\n    });\n  } catch (e) {\n    console.log(e);\n    return { valid: false, error: { reason: 'network' } };\n  }\n\n  return {\n    valid:\n      // This == comparison is important, they could be null or undefined\n      // eslint-disable-next-line eqeqeq\n      res.id == encryptKeyId &&\n      (encryptKeyId == null || encryption.hasKey(encryptKeyId)),\n  };\n}\n\nexport async function resetSyncState(newKeyState) {\n  const userToken = await asyncStorage.getItem('user-token');\n\n  const { cloudFileId } = prefs.getPrefs();\n\n  try {\n    await post(getServer().SYNC_SERVER + '/reset-user-file', {\n      token: userToken,\n      fileId: cloudFileId,\n    });\n  } catch (e) {\n    if (e instanceof PostError) {\n      return {\n        error: {\n          reason: e.reason === 'unauthorized' ? 'unauthorized' : 'network',\n        },\n      };\n    }\n    return { error: { reason: 'internal' } };\n  }\n\n  if (newKeyState) {\n    try {\n      await post(getServer().SYNC_SERVER + '/user-create-key', {\n        token: userToken,\n        fileId: cloudFileId,\n        keyId: newKeyState.key.getId(),\n        keySalt: newKeyState.salt,\n        testContent: newKeyState.testContent,\n      });\n    } catch (e) {\n      if (e instanceof PostError) {\n        return { error: { reason: 'network' } };\n      }\n      return { error: { reason: 'internal' } };\n    }\n  }\n\n  return {};\n}\n\nexport async function exportBuffer() {\n  const { id, budgetName } = prefs.getPrefs();\n  if (!budgetName) {\n    return null;\n  }\n\n  const budgetDir = fs.getBudgetDir(id);\n\n  // create zip\n  const zipped = new AdmZip();\n\n  // We run this in a mutator even though its not mutating anything\n  // because we are reading the sqlite file from disk. We want to make\n  // sure that we get a valid snapshot of it so we want this to be\n  // serialized with all other mutations.\n  await runMutator(async () => {\n    const rawDbContent = await fs.readFile(\n      fs.join(budgetDir, 'db.sqlite'),\n      'binary',\n    );\n\n    // Do some post-processing of the database. We NEVER upload the cache with\n    // the database; this forces new downloads to always recompute everything\n    // which is not only safer, but reduces the filesize a lot.\n    const memDb = await sqlite.openDatabase(rawDbContent);\n    sqlite.execQuery(\n      memDb,\n      `\n        DELETE FROM kvcache;\n        DELETE FROM kvcache_key;\n      `,\n    );\n\n    const dbContent = await sqlite.exportDatabase(memDb);\n\n    sqlite.closeDatabase(memDb);\n\n    // mark it as a file that needs a new clock so when a new client\n    // downloads it, it'll get set to a unique node\n    const meta = JSON.parse(\n      await fs.readFile(fs.join(budgetDir, 'metadata.json')),\n    );\n\n    meta.resetClock = true;\n    const metaContent = Buffer.from(JSON.stringify(meta), 'utf8');\n\n    zipped.addFile('db.sqlite', Buffer.from(dbContent));\n    zipped.addFile('metadata.json', metaContent);\n  });\n\n  return Buffer.from(zipped.toBuffer());\n}\n\nexport async function importBuffer(fileData, buffer) {\n  let zipped, entries;\n  try {\n    zipped = new AdmZip(buffer);\n    entries = zipped.getEntries();\n  } catch (err) {\n    throw FileDownloadError('not-zip-file');\n  }\n  const dbEntry = entries.find(e => e.entryName.includes('db.sqlite'));\n  const metaEntry = entries.find(e => e.entryName.includes('metadata.json'));\n\n  if (!dbEntry || !metaEntry) {\n    throw FileDownloadError('invalid-zip-file');\n  }\n\n  const dbContent = zipped.readFile(dbEntry);\n  const metaContent = zipped.readFile(metaEntry);\n\n  let meta;\n  try {\n    meta = JSON.parse(metaContent.toString('utf8'));\n  } catch (err) {\n    throw FileDownloadError('invalid-meta-file');\n  }\n\n  // Update the metadata. The stored file on the server might be\n  // out-of-date with a few keys\n  meta = {\n    ...meta,\n    cloudFileId: fileData.fileId,\n    groupId: fileData.groupId,\n    lastUploaded: monthUtils.currentDay(),\n    encryptKeyId: fileData.encryptMeta ? fileData.encryptMeta.keyId : null,\n  };\n\n  const budgetDir = fs.getBudgetDir(meta.id);\n\n  if (await fs.exists(budgetDir)) {\n    // Don't remove the directory so that backups are retained\n    const dbFile = fs.join(budgetDir, 'db.sqlite');\n    const metaFile = fs.join(budgetDir, 'metadata.json');\n\n    if (await fs.exists(dbFile)) {\n      await fs.removeFile(dbFile);\n    }\n    if (await fs.exists(metaFile)) {\n      await fs.removeFile(metaFile);\n    }\n  } else {\n    await fs.mkdir(budgetDir);\n  }\n\n  await fs.writeFile(fs.join(budgetDir, 'db.sqlite'), dbContent);\n  await fs.writeFile(fs.join(budgetDir, 'metadata.json'), JSON.stringify(meta));\n\n  return { id: meta.id };\n}\n\nexport async function upload() {\n  const userToken = await asyncStorage.getItem('user-token');\n  if (!userToken) {\n    throw FileUploadError('unauthorized');\n  }\n\n  const zipContent = await exportBuffer();\n  if (zipContent == null) {\n    return;\n  }\n\n  const {\n    id,\n    groupId,\n    budgetName,\n    cloudFileId: originalCloudFileId,\n    encryptKeyId,\n  } = prefs.getPrefs();\n  let cloudFileId = originalCloudFileId;\n  let uploadContent = zipContent;\n  let uploadMeta = null;\n\n  // The upload process encrypts with the key tagged in the prefs for\n  // the file. It will upload the file and the server is responsible\n  // for checking that the key is up-to-date and rejecting it if not\n  if (encryptKeyId) {\n    let encrypted;\n    try {\n      encrypted = await encryption.encrypt(zipContent, encryptKeyId);\n    } catch (e) {\n      throw FileUploadError('encrypt-failure', {\n        isMissingKey: e.message === 'missing-key',\n      });\n    }\n    uploadContent = encrypted.value;\n    uploadMeta = encrypted.meta;\n  }\n\n  if (!cloudFileId) {\n    cloudFileId = uuidv4();\n  }\n\n  let res;\n  try {\n    res = await fetchJSON(getServer().SYNC_SERVER + '/upload-user-file', {\n      method: 'POST',\n      headers: {\n        'Content-Length': uploadContent.length,\n        'Content-Type': 'application/encrypted-file',\n        'X-ACTUAL-TOKEN': userToken,\n        'X-ACTUAL-FILE-ID': cloudFileId,\n        'X-ACTUAL-NAME': encodeURIComponent(budgetName),\n        'X-ACTUAL-FORMAT': 2,\n        ...(uploadMeta\n          ? { 'X-ACTUAL-ENCRYPT-META': JSON.stringify(uploadMeta) }\n          : null),\n        ...(groupId ? { 'X-ACTUAL-GROUP-ID': groupId } : null),\n        // TODO: fix me\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      } as any,\n      body: uploadContent,\n    });\n  } catch (err) {\n    console.log('Upload failure', err);\n\n    if (err instanceof PostError) {\n      throw FileUploadError(\n        err.reason === 'unauthorized'\n          ? 'unauthorized'\n          : err.reason || 'network',\n      );\n    }\n\n    throw FileUploadError('internal');\n  }\n\n  if (res.status === 'ok') {\n    // Only save it if we are still working on the same file\n    if (prefs.getPrefs() && prefs.getPrefs().id === id) {\n      await prefs.savePrefs({\n        lastUploaded: monthUtils.currentDay(),\n        cloudFileId,\n        groupId: res.groupId,\n      });\n    }\n  } else {\n    throw FileUploadError('internal');\n  }\n}\n\nexport async function possiblyUpload() {\n  const { cloudFileId, groupId, lastUploaded } = prefs.getPrefs();\n\n  const threshold =\n    lastUploaded && monthUtils.addDays(lastUploaded, UPLOAD_FREQUENCY_IN_DAYS);\n  const currentDay = monthUtils.currentDay();\n\n  // We only want to try to upload every UPLOAD_FREQUENCY_IN_DAYS days\n  if (lastUploaded && currentDay < threshold) {\n    return;\n  }\n\n  // We only want to upload existing cloud files that are part of a\n  // valid group\n  if (!cloudFileId || !groupId) {\n    return;\n  }\n\n  // Don't block on uploading\n  upload().catch(() => {});\n}\n\nexport async function removeFile(fileId) {\n  const userToken = await asyncStorage.getItem('user-token');\n\n  await post(getServer().SYNC_SERVER + '/delete-user-file', {\n    token: userToken,\n    fileId,\n  });\n}\n\nexport async function listRemoteFiles(): Promise<RemoteFile[]> {\n  const userToken = await asyncStorage.getItem('user-token');\n  if (!userToken) {\n    return null;\n  }\n\n  let res;\n  try {\n    res = await fetchJSON(getServer().SYNC_SERVER + '/list-user-files', {\n      headers: {\n        'X-ACTUAL-TOKEN': userToken,\n      },\n    });\n  } catch (e) {\n    console.log('Unexpected error fetching file list from server', e);\n    return null;\n  }\n\n  if (res.status === 'error') {\n    console.log('Error fetching file list from server', res);\n    return null;\n  }\n\n  return res.data\n    .map(file => ({\n      ...file,\n      hasKey: encryption.hasKey(file.encryptKeyId),\n    }))\n    .filter(Boolean);\n}\n\nexport async function getRemoteFile(\n  fileId: string,\n): Promise<RemoteFile | null> {\n  const userToken = await asyncStorage.getItem('user-token');\n  if (!userToken) {\n    return null;\n  }\n\n  let res;\n  try {\n    res = await fetchJSON(getServer().SYNC_SERVER + '/get-user-file-info', {\n      headers: {\n        'X-ACTUAL-TOKEN': userToken,\n        'X-ACTUAL-FILE-ID': fileId,\n      },\n    });\n  } catch (e) {\n    console.log('Unexpected error fetching file from server', e);\n    return null;\n  }\n\n  if (res.status === 'error') {\n    console.log('Error fetching file from server', res);\n    return null;\n  }\n\n  return {\n    ...res.data,\n    hasKey: encryption.hasKey(res.data.encryptKeyId),\n  };\n}\n\nexport async function download(cloudFileId) {\n  const userToken = await asyncStorage.getItem('user-token');\n  const syncServer = getServer().SYNC_SERVER;\n\n  const userFileFetch = fetch(`${syncServer}/download-user-file`, {\n    headers: {\n      'X-ACTUAL-TOKEN': userToken,\n      'X-ACTUAL-FILE-ID': cloudFileId,\n    },\n  })\n    .then(checkHTTPStatus)\n    .then(res => {\n      if (res.arrayBuffer) {\n        return res.arrayBuffer().then(ab => Buffer.from(ab));\n      }\n      return res.buffer();\n    })\n    .catch(err => {\n      console.log('Download failure', err);\n      throw FileDownloadError('download-failure');\n    });\n\n  const userFileInfoFetch = fetchJSON(`${syncServer}/get-user-file-info`, {\n    headers: {\n      'X-ACTUAL-TOKEN': userToken,\n      'X-ACTUAL-FILE-ID': cloudFileId,\n    },\n  }).catch(err => {\n    console.log('Error fetching file info', err);\n    throw FileDownloadError('internal', { fileId: cloudFileId });\n  });\n\n  const [userFileInfoRes, userFileRes] = await Promise.all([\n    userFileInfoFetch,\n    userFileFetch,\n  ]);\n\n  if (userFileInfoRes.status !== 'ok') {\n    console.log(\n      'Could not download file from the server. Are you sure you have the right file ID?',\n      userFileInfoRes,\n    );\n    throw FileDownloadError('internal', { fileId: cloudFileId });\n  }\n\n  const fileData = userFileInfoRes.data;\n  let buffer = userFileRes;\n\n  // The download process checks if the server gave us decrypt\n  // information. It is assumed that this key has already been loaded\n  // in, which is done in a previous step\n  if (fileData.encryptMeta) {\n    try {\n      buffer = await encryption.decrypt(buffer, fileData.encryptMeta);\n    } catch (e) {\n      throw FileDownloadError('decrypt-failure', {\n        isMissingKey: e.message === 'missing-key',\n      });\n    }\n  }\n\n  return importBuffer(fileData, buffer);\n}\n","// @ts-strict-ignore\nimport { captureException } from '../../platform/exceptions';\nimport * as asyncStorage from '../../platform/server/asyncStorage';\nimport * as connection from '../../platform/server/connection';\nimport * as cloudStorage from '../cloud-storage';\nimport * as db from '../db';\nimport { runMutator } from '../mutators';\nimport * as prefs from '../prefs';\n\nexport async function resetSync(\n  keyState?,\n): Promise<{ error?: { reason: string; meta?: unknown } }> {\n  if (!keyState) {\n    // If we aren't resetting the key, make sure our key is up-to-date\n    // so we don't accidentally upload a file encrypted with the wrong\n    // key (or not encrypted at all)\n    const { valid, error } = await cloudStorage.checkKey();\n    if (error) {\n      return { error };\n    } else if (!valid) {\n      return { error: { reason: 'file-has-new-key' } };\n    }\n  }\n\n  const { error } = await cloudStorage.resetSyncState(keyState);\n  if (error) {\n    return { error };\n  }\n\n  await runMutator(async () => {\n    // TOOD: We could automatically generate the list of tables to\n    // cleanup by looking at the schema\n    //\n    // Be VERY careful here since we are bulk deleting data. It should\n    // never delete any data that doesn't have `tombstone = 1`\n    await db.execQuery(`\n      DELETE FROM messages_crdt;\n      DELETE FROM messages_clock;\n      DELETE FROM transactions WHERE tombstone = 1;\n      DELETE FROM accounts WHERE tombstone = 1;\n      DELETE FROM payees WHERE tombstone = 1;\n      DELETE FROM categories WHERE tombstone = 1;\n      DELETE FROM category_groups WHERE tombstone = 1;\n      DELETE FROM schedules WHERE tombstone = 1;\n      DELETE FROM rules WHERE tombstone = 1;\n      ANALYZE;\n      VACUUM;\n    `);\n    await db.loadClock();\n  });\n\n  await prefs.savePrefs({\n    groupId: null,\n    lastSyncedTimestamp: null,\n    lastUploaded: null,\n  });\n\n  if (keyState) {\n    const { key } = keyState;\n    const { cloudFileId } = prefs.getPrefs();\n\n    // The key has changed, we need to update our local data to\n    // store the new key\n\n    // Persist key in async storage\n    const keys = JSON.parse(\n      (await asyncStorage.getItem(`encrypt-keys`)) || '{}',\n    );\n    keys[cloudFileId] = key.serialize();\n    await asyncStorage.setItem('encrypt-keys', JSON.stringify(keys));\n\n    // Save the key id in prefs\n    await prefs.savePrefs({ encryptKeyId: key.getId() });\n  }\n\n  // Finally, upload the file to make it the \"true\" version that all\n  // other clients need to pull down to get back in sync\n  try {\n    await cloudStorage.upload();\n  } catch (e) {\n    if (e.reason) {\n      return { error: e };\n    }\n    captureException(e);\n    return { error: { reason: 'upload-failure' } };\n  } finally {\n    connection.send('prefs-updated');\n  }\n\n  return {};\n}\n","// @ts-strict-ignore\nimport {\n  serializeClock,\n  deserializeClock,\n  getClock,\n  Timestamp,\n  merkle,\n} from '@actual-app/crdt';\n\nimport { captureException } from '../../platform/exceptions';\nimport * as asyncStorage from '../../platform/server/asyncStorage';\nimport * as connection from '../../platform/server/connection';\nimport { logger } from '../../platform/server/log';\nimport { sequential, once } from '../../shared/async';\nimport { setIn, getIn } from '../../shared/util';\nimport { type MetadataPrefs } from '../../types/prefs';\nimport { triggerBudgetChanges, setType as setBudgetType } from '../budget/base';\nimport * as db from '../db';\nimport { PostError, SyncError } from '../errors';\nimport { app } from '../main-app';\nimport { runMutator } from '../mutators';\nimport { postBinary } from '../post';\nimport * as prefs from '../prefs';\nimport { getServer } from '../server-config';\nimport * as sheet from '../sheet';\nimport * as undo from '../undo';\n\nimport * as encoder from './encoder';\nimport { rebuildMerkleHash } from './repair';\nimport { isError } from './utils';\n\nexport { makeTestMessage } from './make-test-message';\nexport { resetSync } from './reset';\nexport { repairSync } from './repair';\n\nconst FULL_SYNC_DELAY = 1000;\nlet SYNCING_MODE = 'enabled';\ntype SyncingMode = 'enabled' | 'offline' | 'disabled' | 'import';\n\nexport function setSyncingMode(mode: SyncingMode) {\n  const prevMode = SYNCING_MODE;\n  switch (mode) {\n    case 'enabled':\n      SYNCING_MODE = 'enabled';\n      break;\n    case 'offline':\n      SYNCING_MODE = 'offline';\n      break;\n    case 'disabled':\n      SYNCING_MODE = 'disabled';\n      break;\n    case 'import':\n      SYNCING_MODE = 'import';\n      break;\n    default:\n      throw new Error('setSyncingMode: invalid mode: ' + mode);\n  }\n  return prevMode;\n}\n\nexport function checkSyncingMode(mode: SyncingMode): boolean {\n  switch (mode) {\n    case 'enabled':\n      return SYNCING_MODE === 'enabled' || SYNCING_MODE === 'offline';\n    case 'disabled':\n      return SYNCING_MODE === 'disabled' || SYNCING_MODE === 'import';\n    case 'offline':\n      return SYNCING_MODE === 'offline';\n    case 'import':\n      return SYNCING_MODE === 'import';\n    default:\n      throw new Error('checkSyncingMode: invalid mode: ' + mode);\n  }\n}\n\nfunction apply(msg: Message, prev?: boolean) {\n  const { dataset, row, column, value } = msg;\n\n  if (dataset === 'prefs') {\n    // Do nothing, it doesn't exist in the db\n  } else {\n    let query;\n    try {\n      if (prev) {\n        query = {\n          sql: `UPDATE ${dataset} SET ${column} = ? WHERE id = ?`,\n          params: [value, row],\n        };\n      } else {\n        query = {\n          sql: `INSERT INTO ${dataset} (id, ${column}) VALUES (?, ?)`,\n          params: [row, value],\n        };\n      }\n\n      db.runQuery(db.cache(query.sql), query.params);\n    } catch (error) {\n      throw new SyncError('invalid-schema', {\n        error: { message: error.message, stack: error.stack },\n        query,\n      });\n    }\n  }\n}\n\n// TODO: convert to `whereIn`\nasync function fetchAll(table, ids) {\n  let results = [];\n\n  // was 500, but that caused a stack overflow in Safari\n  const batchSize = 100;\n\n  for (let i = 0; i < ids.length; i += batchSize) {\n    const partIds = ids.slice(i, i + batchSize);\n    let sql;\n    let column = `${table}.id`;\n\n    // We have to provide *mapped* data so the spreadsheet works. The functions\n    // which trigger budget changes based on data changes assumes data has been\n    // mapped. The only mapped data that the budget is concerned about is\n    // categories. This is kind of annoying, but we manually map it here\n    if (table === 'transactions') {\n      sql = `\n        SELECT t.*, c.transferId AS category\n        FROM transactions t\n        LEFT JOIN category_mapping c ON c.id = t.category\n      `;\n      column = 't.id';\n    } else {\n      sql = `SELECT * FROM ${table}`;\n    }\n\n    sql += ` WHERE `;\n    sql += partIds.map(() => `${column} = ?`).join(' OR ');\n\n    try {\n      const rows = await db.runQuery(sql, partIds, true);\n      results = results.concat(rows);\n    } catch (error) {\n      throw new SyncError('invalid-schema', {\n        error: {\n          message: error.message,\n          stack: error.stack,\n        },\n        query: { sql, params: partIds },\n      });\n    }\n  }\n\n  return results;\n}\n\nexport function serializeValue(value: string | number | null): string {\n  if (value === null) {\n    return '0:';\n  } else if (typeof value === 'number') {\n    return 'N:' + value;\n  } else if (typeof value === 'string') {\n    return 'S:' + value;\n  }\n\n  throw new Error('Unserializable value type: ' + JSON.stringify(value));\n}\n\nexport function deserializeValue(value: string): string | number | null {\n  const type = value[0];\n  switch (type) {\n    case '0':\n      return null;\n    case 'N':\n      return parseFloat(value.slice(2));\n    case 'S':\n      return value.slice(2);\n    default:\n  }\n\n  throw new Error('Invalid type key for value: ' + value);\n}\n\n// TODO make this type stricter.\ntype DataMap = Map<string, unknown>;\ntype SyncListener = (oldData: DataMap, newData: DataMap) => unknown;\nlet _syncListeners: SyncListener[] = [];\n\nexport function addSyncListener(func: SyncListener) {\n  _syncListeners.push(func);\n\n  return () => {\n    _syncListeners = _syncListeners.filter(f => f !== func);\n  };\n}\n\nasync function compareMessages(messages: Message[]): Promise<Message[]> {\n  const newMessages = [];\n\n  for (let i = 0; i < messages.length; i++) {\n    const message = messages[i];\n    const { dataset, row, column, timestamp } = message;\n    const timestampStr = timestamp.toString();\n\n    const res = db.runQuery<Pick<db.DbCrdtMessage, 'timestamp'>>(\n      db.cache(\n        'SELECT timestamp FROM messages_crdt WHERE dataset = ? AND row = ? AND column = ? AND timestamp >= ?',\n      ),\n      [dataset, row, column, timestampStr],\n      true,\n    );\n\n    // Returned message is any one that is \"later\" than this message,\n    // meaning if the result exists this message is an old one\n    if (res.length === 0) {\n      newMessages.push(message);\n    } else if (res[0].timestamp !== timestampStr) {\n      newMessages.push({ ...message, old: true });\n    }\n  }\n\n  return newMessages;\n}\n\n// This is the fast path `apply` function when in \"import\" mode.\n// There's no need to run through the whole sync system when\n// importing, but **there is a caveat**: because we don't run sync\n// listeners importers should not rely on any functions that use any\n// projected state (like rules). We can't fire those because they\n// depend on having both old and new data which we don't quere here\nfunction applyMessagesForImport(messages: Message[]): void {\n  db.transaction(() => {\n    for (let i = 0; i < messages.length; i++) {\n      const msg = messages[i];\n      const { dataset } = msg;\n\n      if (!msg.old) {\n        try {\n          apply(msg);\n        } catch (e) {\n          apply(msg, true);\n        }\n\n        if (dataset === 'prefs') {\n          throw new Error('Cannot set prefs while importing');\n        }\n      }\n    }\n  });\n}\n\nexport type Message = {\n  column: string;\n  dataset: string;\n  old?: unknown;\n  row: string;\n  timestamp: Timestamp;\n  value: string | number | null;\n};\n\nexport const applyMessages = sequential(async (messages: Message[]) => {\n  if (checkSyncingMode('import')) {\n    applyMessagesForImport(messages);\n    return undefined;\n  } else if (checkSyncingMode('enabled')) {\n    // Compare the messages with the existing crdt. This filters out\n    // already applied messages and determines if a message is old or\n    // not. An \"old\" message doesn't need to be applied, but it still\n    // needs to be put into the merkle trie to maintain the hash.\n    messages = await compareMessages(messages);\n  }\n\n  messages = [...messages].sort((m1, m2) => {\n    const t1 = m1.timestamp ? m1.timestamp.toString() : '';\n    const t2 = m2.timestamp ? m2.timestamp.toString() : '';\n    if (t1 < t2) {\n      return -1;\n    } else if (t1 > t2) {\n      return 1;\n    }\n    return 0;\n  });\n\n  const idsPerTable = {};\n  messages.forEach(msg => {\n    if (msg.dataset === 'prefs') {\n      return;\n    }\n\n    if (idsPerTable[msg.dataset] == null) {\n      idsPerTable[msg.dataset] = [];\n    }\n    idsPerTable[msg.dataset].push(msg.row);\n  });\n\n  async function fetchData(): Promise<DataMap> {\n    const data = new Map();\n\n    for (const table of Object.keys(idsPerTable)) {\n      const rows = await fetchAll(table, idsPerTable[table]);\n\n      for (let i = 0; i < rows.length; i++) {\n        const row = rows[i];\n        setIn(data, [table, row.id], row);\n      }\n    }\n\n    return data;\n  }\n\n  const prefsToSet: MetadataPrefs = {};\n  const oldData = await fetchData();\n\n  undo.appendMessages(messages, oldData);\n\n  // It's important to not mutate the clock while processing the\n  // messages. We only want to mutate it if the transaction succeeds.\n  // The merkle variable will be updated while applying the messages and\n  // we'll apply it afterwards.\n  let clock;\n  let currentMerkle;\n  if (checkSyncingMode('enabled')) {\n    clock = getClock();\n    currentMerkle = clock.merkle;\n  }\n\n  if (sheet.get()) {\n    sheet.get().startCacheBarrier();\n  }\n\n  // Now that we have all of the data, go through and apply the\n  // messages carefully. This transaction is **crucial**: it\n  // guarantees that everything is atomically committed to the\n  // database, and if any part of it fails everything aborts and\n  // nothing is changed. This is critical to maintain consistency. We\n  // also avoid any side effects to in-memory objects, and apply them\n  // after this succeeds.\n  db.transaction(() => {\n    const added = new Set();\n\n    for (const msg of messages) {\n      const { dataset, row, column, timestamp, value } = msg;\n\n      if (!msg.old) {\n        apply(msg, getIn(oldData, [dataset, row]) || added.has(dataset + row));\n\n        if (dataset === 'prefs') {\n          prefsToSet[row] = value;\n        } else {\n          // Keep track of which items have been added it in this sync\n          // so it knows whether they already exist in the db or not. We\n          // ignore any changes to the spreadsheet.\n          added.add(dataset + row);\n        }\n      }\n\n      if (checkSyncingMode('enabled')) {\n        db.runQuery(\n          db.cache(`INSERT INTO messages_crdt (timestamp, dataset, row, column, value)\n           VALUES (?, ?, ?, ?, ?)`),\n          [timestamp.toString(), dataset, row, column, serializeValue(value)],\n        );\n\n        currentMerkle = merkle.insert(currentMerkle, timestamp);\n      }\n\n      // Special treatment for some synced prefs\n      if (dataset === 'preferences' && row === 'budgetType') {\n        setBudgetType(value);\n      }\n    }\n\n    if (checkSyncingMode('enabled')) {\n      currentMerkle = merkle.prune(currentMerkle);\n\n      // Save the clock in the db first (queries might throw\n      // exceptions)\n      db.runQuery(\n        db.cache(\n          'INSERT OR REPLACE INTO messages_clock (id, clock) VALUES (1, ?)',\n        ),\n        [serializeClock({ ...clock, merkle: currentMerkle })],\n      );\n    }\n  });\n\n  if (checkSyncingMode('enabled')) {\n    // The transaction succeeded, so we can update in-memory objects\n    // now. Update the in-memory clock.\n    clock.merkle = currentMerkle;\n  }\n\n  // Save any synced prefs\n  if (Object.keys(prefsToSet).length > 0) {\n    prefs.savePrefs(prefsToSet, { avoidSync: true });\n    connection.send('prefs-updated');\n  }\n\n  const newData = await fetchData();\n\n  // In testing, sometimes the spreadsheet isn't loaded, and that's ok\n  if (sheet.get()) {\n    // Need to clean up these APIs and make them consistent\n    sheet.startTransaction();\n    triggerBudgetChanges(oldData, newData);\n    sheet.get().triggerDatabaseChanges(oldData, newData);\n    sheet.endTransaction();\n\n    // Allow the cache to be used in the future. At this point it's guaranteed\n    // to be up-to-date because we are done mutating any other data\n    sheet.get().endCacheBarrier();\n  }\n\n  _syncListeners.forEach(func => func(oldData, newData));\n\n  const tables = getTablesFromMessages(messages.filter(msg => !msg.old));\n  app.events.emit('sync', {\n    type: 'applied',\n    tables,\n    data: newData,\n    prevData: oldData,\n  });\n\n  return messages;\n});\n\nexport function receiveMessages(messages: Message[]): Promise<Message[]> {\n  messages.forEach(msg => {\n    Timestamp.recv(msg.timestamp);\n  });\n\n  return runMutator(() => applyMessages(messages));\n}\n\nasync function _sendMessages(messages: Message[]): Promise<void> {\n  try {\n    await applyMessages(messages);\n  } catch (e) {\n    if (e instanceof SyncError) {\n      if (e.reason === 'invalid-schema') {\n        // We know this message came from a local modification, and it\n        // couldn't apply, which doesn't make any sense. Must be a bug\n        // in the code. Send a specific error type for it for a custom\n        // message.\n        app.events.emit('sync', {\n          type: 'error',\n          subtype: 'apply-failure',\n          meta: e.meta,\n        });\n      } else {\n        app.events.emit('sync', { type: 'error', meta: e.meta });\n      }\n    }\n\n    throw e;\n  }\n\n  await scheduleFullSync();\n}\n\nlet IS_BATCHING = false;\nlet _BATCHED: Message[] = [];\nexport async function batchMessages(func: () => Promise<void>): Promise<void> {\n  if (IS_BATCHING) {\n    await func();\n    return;\n  }\n\n  IS_BATCHING = true;\n  let batched: Message[] = [];\n\n  try {\n    await func();\n    // TODO: if it fails, it shouldn't apply them?\n  } finally {\n    IS_BATCHING = false;\n    batched = _BATCHED;\n    _BATCHED = [];\n  }\n\n  if (batched.length > 0) {\n    await _sendMessages(batched);\n  }\n}\n\nexport async function sendMessages(messages: Message[]) {\n  if (IS_BATCHING) {\n    _BATCHED = _BATCHED.concat(messages);\n  } else {\n    return _sendMessages(messages);\n  }\n}\n\nexport function getMessagesSince(since: string): Message[] {\n  return db.runQuery(\n    'SELECT timestamp, dataset, row, column, value FROM messages_crdt WHERE timestamp > ?',\n    [since],\n    true,\n  );\n}\n\nexport function clearFullSyncTimeout(): void {\n  if (syncTimeout) {\n    clearTimeout(syncTimeout);\n    syncTimeout = null;\n  }\n}\n\nlet syncTimeout = null;\nexport function scheduleFullSync(): Promise<\n  { messages: Message[] } | { error: unknown }\n> {\n  clearFullSyncTimeout();\n\n  if (checkSyncingMode('enabled') && !checkSyncingMode('offline')) {\n    if (process.env.NODE_ENV === 'test') {\n      return fullSync().then(res => {\n        if (isError(res)) {\n          throw res.error;\n        }\n        return res;\n      });\n    } else {\n      syncTimeout = setTimeout(fullSync, FULL_SYNC_DELAY);\n    }\n  }\n}\n\nfunction getTablesFromMessages(messages: Message[]): string[] {\n  return messages.reduce((acc, message) => {\n    const dataset =\n      message.dataset === 'schedules_next_date' ? 'schedules' : message.dataset;\n\n    if (!acc.includes(dataset)) {\n      acc.push(dataset);\n    }\n    return acc;\n  }, []);\n}\n\n// This is different than `fullSync` because it waits for the\n// spreadsheet to finish any processing. This is useful if we want to\n// perform a full sync and wait for everything to finish, usually if\n// you're doing an initial sync before working with a file.\nexport async function initialFullSync(): Promise<{\n  error?: { message: string; reason: string; meta: unknown };\n}> {\n  const result = await fullSync();\n  if (isError(result)) {\n    // Make sure to wait for anything in the spreadsheet to process\n    await sheet.waitOnSpreadsheet();\n    return result;\n  }\n  return {};\n}\n\nexport const fullSync = once(async function (): Promise<\n  | { messages: Message[] }\n  | { error: { message: string; reason: string; meta: unknown } }\n> {\n  app.events.emit('sync', { type: 'start' });\n  let messages;\n\n  try {\n    messages = await _fullSync(null, 0, null);\n  } catch (e) {\n    console.log(e);\n\n    if (e instanceof SyncError) {\n      if (e.reason === 'out-of-sync') {\n        captureException(e);\n\n        app.events.emit('sync', {\n          type: 'error',\n          subtype: 'out-of-sync',\n          meta: e.meta,\n        });\n      } else if (e.reason === 'invalid-schema') {\n        app.events.emit('sync', {\n          type: 'error',\n          subtype: 'invalid-schema',\n          meta: e.meta,\n        });\n      } else if (\n        e.reason === 'decrypt-failure' ||\n        e.reason === 'encrypt-failure'\n      ) {\n        app.events.emit('sync', {\n          type: 'error',\n          subtype: e.reason,\n          meta: e.meta,\n        });\n      } else {\n        app.events.emit('sync', { type: 'error', meta: e.meta });\n      }\n    } else if (e instanceof PostError) {\n      console.log(e);\n      if (e.reason === 'unauthorized') {\n        app.events.emit('sync', { type: 'unauthorized' });\n\n        // Set the user into read-only mode\n        asyncStorage.setItem('readOnly', 'true');\n      } else if (e.reason === 'network-failure') {\n        app.events.emit('sync', { type: 'error', subtype: 'network' });\n      } else {\n        app.events.emit('sync', { type: 'error', subtype: e.reason });\n      }\n    } else {\n      captureException(e);\n      // TODO: Send the message to the client and allow them to expand & view it\n      app.events.emit('sync', { type: 'error' });\n    }\n\n    return { error: { message: e.message, reason: e.reason, meta: e.meta } };\n  }\n\n  const tables = getTablesFromMessages(messages);\n\n  app.events.emit('sync', {\n    type: 'success',\n    tables,\n    syncDisabled: checkSyncingMode('disabled'),\n  });\n  return { messages };\n});\n\nasync function _fullSync(\n  sinceTimestamp: string,\n  count: number,\n  prevDiffTime: number,\n): Promise<Message[]> {\n  const { cloudFileId, groupId, lastSyncedTimestamp } = prefs.getPrefs() || {};\n\n  clearFullSyncTimeout();\n\n  if (checkSyncingMode('disabled') || checkSyncingMode('offline')) {\n    return [];\n  }\n\n  // Snapshot the point at which we are currently syncing\n  const currentTime = getClock().timestamp.toString();\n\n  const since =\n    sinceTimestamp ||\n    lastSyncedTimestamp ||\n    // Default to 5 minutes ago\n    new Timestamp(Date.now() - 5 * 60 * 1000, 0, '0').toString();\n\n  const messages = getMessagesSince(since);\n\n  const userToken = await asyncStorage.getItem('user-token');\n\n  logger.info(\n    'Syncing since',\n    since,\n    messages.length,\n    '(attempt: ' + count + ')',\n  );\n\n  const buffer = await encoder.encode(groupId, cloudFileId, since, messages);\n\n  // TODO: There a limit on how many messages we can send because of\n  // the payload size. Right now it's at 20MB on the server. We should\n  // check the worst case here and make multiple requests if it's\n  // really large.\n  const resBuffer = await postBinary(\n    getServer().SYNC_SERVER + '/sync',\n    buffer,\n    {\n      'X-ACTUAL-TOKEN': userToken,\n    },\n  );\n\n  // Abort if the file is either no longer loaded, the group id has\n  // changed because of a sync reset\n  if (!prefs.getPrefs() || prefs.getPrefs().groupId !== groupId) {\n    return [];\n  }\n\n  const res = await encoder.decode(resBuffer);\n\n  logger.info('Got messages from server', res.messages.length);\n\n  const localTimeChanged = getClock().timestamp.toString() !== currentTime;\n\n  // Apply the new messages\n  let receivedMessages: Message[] = [];\n  if (res.messages.length > 0) {\n    receivedMessages = await receiveMessages(\n      res.messages.map(msg => ({\n        ...msg,\n        value: deserializeValue(msg.value as string),\n      })),\n    );\n  }\n\n  const diffTime = merkle.diff(res.merkle, getClock().merkle);\n\n  if (diffTime !== null) {\n    // This is a bit wonky, but we loop until we are in sync with the\n    // server. While syncing, either the client or server could change\n    // out from under us, so it might take a couple passes to\n    // completely sync up. This is a check that stops the loop in case\n    // we are corrupted and can't sync up. We try 10 times if we keep\n    // getting the same diff time, and add a upper limit of 300 no\n    // matter what (just to stop this from ever being an infinite\n    // loop).\n    //\n    // It's slightly possible for the user to add more messages while we\n    // are in `receiveMessages`, but `localTimeChanged` would still be\n    // false. In that case, we don't reset the counter but it should be\n    // very unlikely that this happens enough to hit the loop limit.\n\n    if ((count >= 10 && diffTime === prevDiffTime) || count >= 100) {\n      logger.info('SENT -------');\n      logger.info(JSON.stringify(messages));\n      logger.info('RECEIVED -------');\n      logger.info(JSON.stringify(res.messages));\n\n      const rebuiltMerkle = rebuildMerkleHash();\n\n      console.log(\n        count,\n        'messages:',\n        messages.length,\n        messages.length > 0 ? messages[0] : null,\n        'res.messages:',\n        res.messages.length,\n        res.messages.length > 0 ? res.messages[0] : null,\n        'clientId',\n        getClock().timestamp.node(),\n        'groupId',\n        groupId,\n        'diffTime:',\n        diffTime,\n        diffTime === prevDiffTime,\n        'local clock:',\n        getClock().timestamp.toString(),\n        getClock().merkle.hash,\n        'rebuilt hash:',\n        rebuiltMerkle.numMessages,\n        rebuiltMerkle.trie.hash,\n        'server hash:',\n        res.merkle.hash,\n        'localTimeChanged:',\n        localTimeChanged,\n      );\n\n      if (rebuiltMerkle.trie.hash === res.merkle.hash) {\n        // Rebuilding the merkle worked... but why?\n        const clocks = await db.all<db.DbClockMessage>(\n          'SELECT * FROM messages_clock',\n        );\n        if (clocks.length !== 1) {\n          console.log('Bad number of clocks:', clocks.length);\n        }\n        const hash = deserializeClock(clocks[0].clock).merkle.hash;\n        console.log('Merkle hash in db:', hash);\n      }\n\n      throw new SyncError('out-of-sync');\n    }\n\n    receivedMessages = receivedMessages.concat(\n      await _fullSync(\n        new Timestamp(diffTime, 0, '0').toString(),\n        // If something local changed while we were syncing, always\n        // reset, token the counter. We never want to think syncing failed\n        // because we tried to syncing many times and couldn't sync,\n        // but it was because the user kept changing stuff in the\n        // middle of syncing.\n        localTimeChanged ? 0 : count + 1,\n        diffTime,\n      ),\n    );\n  } else {\n    // All synced up, store the current time as a simple optimization for the next sync\n    const requiresUpdate =\n      getClock().timestamp.toString() !== lastSyncedTimestamp;\n\n    if (requiresUpdate) {\n      await prefs.savePrefs({\n        lastSyncedTimestamp: getClock().timestamp.toString(),\n      });\n    }\n  }\n\n  return receivedMessages;\n}\n","export const SORT_INCREMENT = 16384;\n\nfunction midpoint<T extends { sort_order: number }>(items: T[], to: number) {\n  const below = items[to - 1];\n  const above = items[to];\n\n  if (!below) {\n    return above.sort_order / 2;\n  } else if (!above) {\n    return below.sort_order + SORT_INCREMENT;\n  } else {\n    return (below.sort_order + above.sort_order) / 2;\n  }\n}\n\nexport function shoveSortOrders<T extends { id: string; sort_order: number }>(\n  items: T[],\n  targetId: string | null = null,\n) {\n  const to = items.findIndex(item => item.id === targetId);\n  const target = items[to];\n  const before = items[to - 1];\n  const updates: Array<{ id: string; sort_order: number }> = [];\n\n  // If no target is specified, append at the end\n  if (!targetId || to === -1) {\n    let order;\n    if (items.length > 0) {\n      // Add a new increment to whatever is the latest sort order\n      order = items[items.length - 1].sort_order + SORT_INCREMENT;\n    } else {\n      // If no items exist, the default is to use the first increment\n      order = SORT_INCREMENT;\n    }\n\n    return { updates, sort_order: order };\n  } else {\n    if (target.sort_order - (before ? before.sort_order : 0) <= 2) {\n      let next = to;\n      let order = Math.floor(items[next].sort_order) + SORT_INCREMENT;\n      while (next < items.length) {\n        // No need to update it if it's already greater than the current\n        // order. This can happen because there may already be large\n        // gaps\n        if (order <= items[next].sort_order) {\n          break;\n        }\n\n        updates.push({ id: items[next].id, sort_order: order });\n\n        next++;\n        order += SORT_INCREMENT;\n      }\n    }\n\n    return { updates, sort_order: midpoint(items, to) };\n  }\n}\n","// @ts-strict-ignore\nimport {\n  makeClock,\n  setClock,\n  serializeClock,\n  deserializeClock,\n  makeClientId,\n  Timestamp,\n} from '@actual-app/crdt';\nimport { Database } from '@jlongster/sql.js';\nimport { LRUCache } from 'lru-cache';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as fs from '../../platform/server/fs';\nimport * as sqlite from '../../platform/server/sqlite';\nimport * as monthUtils from '../../shared/months';\nimport { groupById } from '../../shared/util';\nimport { TransactionEntity } from '../../types/models';\nimport { WithRequired } from '../../types/util';\nimport {\n  schema,\n  schemaConfig,\n  convertForInsert,\n  convertForUpdate,\n  convertFromSelect,\n} from '../aql';\nimport {\n  toDateRepr,\n  accountModel,\n  categoryModel,\n  categoryGroupModel,\n  payeeModel,\n} from '../models';\nimport { sendMessages, batchMessages } from '../sync';\n\nimport { shoveSortOrders, SORT_INCREMENT } from './sort';\nimport {\n  DbAccount,\n  DbBank,\n  DbCategory,\n  DbCategoryGroup,\n  DbCategoryMapping,\n  DbClockMessage,\n  DbPayee,\n  DbPayeeMapping,\n  DbTag,\n  DbTransaction,\n  DbViewTransaction,\n  DbViewTransactionInternalAlive,\n} from './types';\n\nexport * from './types';\n\nexport { toDateRepr, fromDateRepr } from '../models';\n\nlet dbPath: string | null = null;\nlet db: Database | null = null;\n\n// Util\n\nexport function getDatabasePath() {\n  return dbPath;\n}\n\nexport async function openDatabase(id?: string) {\n  if (db) {\n    await sqlite.closeDatabase(db);\n  }\n\n  dbPath = fs.join(fs.getBudgetDir(id), 'db.sqlite');\n  setDatabase(await sqlite.openDatabase(dbPath));\n\n  // await execQuery('PRAGMA journal_mode = WAL');\n}\n\nexport async function closeDatabase() {\n  if (db) {\n    await sqlite.closeDatabase(db);\n    setDatabase(null);\n  }\n}\n\nexport function setDatabase(db_: Database) {\n  db = db_;\n  resetQueryCache();\n}\n\nexport function getDatabase() {\n  return db;\n}\n\nexport async function loadClock() {\n  const row = await first<DbClockMessage>('SELECT * FROM messages_clock');\n  if (row) {\n    const clock = deserializeClock(row.clock);\n    setClock(clock);\n  } else {\n    // No clock exists yet (first run of the app), so create a default\n    // one.\n    const timestamp = new Timestamp(0, 0, makeClientId());\n    const clock = makeClock(timestamp);\n    setClock(clock);\n\n    await runQuery('INSERT INTO messages_clock (id, clock) VALUES (?, ?)', [\n      1,\n      serializeClock(clock),\n    ]);\n  }\n}\n\n// Functions\nexport function runQuery(\n  sql: string,\n  params?: Array<string | number>,\n  fetchAll?: false,\n): { changes: unknown };\n\nexport function runQuery<T>(\n  sql: string,\n  params: Array<string | number> | undefined,\n  fetchAll: true,\n): T[];\n\nexport function runQuery<T>(\n  sql: string,\n  params: (string | number)[],\n  fetchAll: boolean,\n) {\n  if (fetchAll) {\n    return sqlite.runQuery<T>(db, sql, params, true);\n  } else {\n    return sqlite.runQuery(db, sql, params, false);\n  }\n}\n\nexport function execQuery(sql: string) {\n  sqlite.execQuery(db, sql);\n}\n\n// This manages an LRU cache of prepared query statements. This is\n// only needed in hot spots when you are running lots of queries.\nlet _queryCache = new LRUCache<string, string>({ max: 100 });\nexport function cache(sql: string) {\n  const cached = _queryCache.get(sql);\n  if (cached) {\n    return cached;\n  }\n\n  const prepared = sqlite.prepare(db, sql);\n  _queryCache.set(sql, prepared);\n  return prepared;\n}\n\nfunction resetQueryCache() {\n  _queryCache = new LRUCache<string, string>({ max: 100 });\n}\n\nexport function transaction(fn: () => void) {\n  return sqlite.transaction(db, fn);\n}\n\nexport function asyncTransaction(fn: () => Promise<void>) {\n  return sqlite.asyncTransaction(db, fn);\n}\n\n// This function is marked as async because `runQuery` is no longer\n// async. We return a promise here until we've audited all the code to\n// make sure nothing calls `.then` on this.\nexport async function all<T>(sql: string, params?: (string | number)[]) {\n  return runQuery<T>(sql, params, true);\n}\n\nexport async function first<T>(sql, params?: (string | number)[]) {\n  const arr = await runQuery<T>(sql, params, true);\n  return arr.length === 0 ? null : arr[0];\n}\n\n// The underlying sql system is now sync, but we can't update `first` yet\n// without auditing all uses of it\nexport function firstSync<T>(sql, params?: (string | number)[]) {\n  const arr = runQuery<T>(sql, params, true);\n  return arr.length === 0 ? null : arr[0];\n}\n\n// This function is marked as async because `runQuery` is no longer\n// async. We return a promise here until we've audited all the code to\n// make sure nothing calls `.then` on this.\nexport async function run(sql, params?: (string | number)[]) {\n  return runQuery(sql, params);\n}\n\nexport async function select(table, id) {\n  const rows = await runQuery(\n    'SELECT * FROM ' + table + ' WHERE id = ?',\n    [id],\n    true,\n  );\n  // TODO: In the next phase, we will make this function generic\n  // and pass the type of the return type to `runQuery`.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return rows[0] as any;\n}\n\nexport async function update(table, params) {\n  const fields = Object.keys(params).filter(k => k !== 'id');\n\n  if (params.id == null) {\n    throw new Error('update: id is required');\n  }\n\n  await sendMessages(\n    fields.map(k => {\n      return {\n        dataset: table,\n        row: params.id,\n        column: k,\n        value: params[k],\n        timestamp: Timestamp.send(),\n      };\n    }),\n  );\n}\n\nexport async function insertWithUUID(table, row) {\n  if (!row.id) {\n    row = { ...row, id: uuidv4() };\n  }\n\n  await insert(table, row);\n\n  // We can't rely on the return value of insert because if the\n  // primary key is text, sqlite returns the internal row id which we\n  // don't care about. We want to return the generated UUID.\n  return row.id;\n}\n\nexport async function insert(table, row) {\n  const fields = Object.keys(row).filter(k => k !== 'id');\n\n  if (row.id == null) {\n    throw new Error('insert: id is required');\n  }\n\n  await sendMessages(\n    fields.map(k => {\n      return {\n        dataset: table,\n        row: row.id,\n        column: k,\n        value: row[k],\n        timestamp: Timestamp.send(),\n      };\n    }),\n  );\n}\n\nexport async function delete_(table, id) {\n  await sendMessages([\n    {\n      dataset: table,\n      row: id,\n      column: 'tombstone',\n      value: 1,\n      timestamp: Timestamp.send(),\n    },\n  ]);\n}\n\nexport async function deleteAll(table: string) {\n  const rows = await all<{ id: string }>(`\n    SELECT id FROM ${table} WHERE tombstone = 0\n  `);\n  await Promise.all(rows.map(({ id }) => delete_(table, id)));\n}\n\nexport async function selectWithSchema(table, sql, params) {\n  const rows = await runQuery(sql, params, true);\n  const convertedRows = rows\n    .map(row => convertFromSelect(schema, schemaConfig, table, row))\n    .filter(Boolean);\n  // TODO: Make convertFromSelect generic so we don't need this cast\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return convertedRows as any[];\n}\n\nexport async function selectFirstWithSchema(table, sql, params) {\n  const rows = await selectWithSchema(table, sql, params);\n  return rows.length > 0 ? rows[0] : null;\n}\n\nexport function insertWithSchema(table, row) {\n  // Even though `insertWithUUID` does this, we need to do it here so\n  // the schema validation passes\n  if (!row.id) {\n    row = { ...row, id: uuidv4() };\n  }\n\n  return insertWithUUID(\n    table,\n    convertForInsert(schema, schemaConfig, table, row),\n  );\n}\n\nexport function updateWithSchema(table, fields) {\n  return update(table, convertForUpdate(schema, schemaConfig, table, fields));\n}\n\n// Data-specific functions. Ideally this would be split up into\n// different files\n\nexport async function getCategories(\n  ids?: Array<DbCategory['id']>,\n): Promise<DbCategory[]> {\n  const whereIn = ids ? `c.id IN (${toSqlQueryParameters(ids)}) AND` : '';\n  const query = `SELECT c.* FROM categories c WHERE ${whereIn} c.tombstone = 0 ORDER BY c.sort_order, c.id`;\n  return ids\n    ? await all<DbCategory>(query, [...ids])\n    : await all<DbCategory>(query);\n}\n\nexport async function getCategoriesGrouped(\n  ids?: Array<DbCategoryGroup['id']>,\n): Promise<\n  Array<\n    DbCategoryGroup & {\n      categories: DbCategory[];\n    }\n  >\n> {\n  const categoryGroupWhereIn = ids\n    ? `cg.id IN (${toSqlQueryParameters(ids)}) AND`\n    : '';\n  const categoryGroupQuery = `SELECT cg.* FROM category_groups cg WHERE ${categoryGroupWhereIn} cg.tombstone = 0\n    ORDER BY cg.is_income, cg.sort_order, cg.id`;\n\n  const categoryWhereIn = ids\n    ? `c.cat_group IN (${toSqlQueryParameters(ids)}) AND`\n    : '';\n  const categoryQuery = `SELECT c.* FROM categories c WHERE ${categoryWhereIn} c.tombstone = 0\n    ORDER BY c.sort_order, c.id`;\n\n  const groups = ids\n    ? await all<DbCategoryGroup>(categoryGroupQuery, [...ids])\n    : await all<DbCategoryGroup>(categoryGroupQuery);\n\n  const categories = ids\n    ? await all<DbCategory>(categoryQuery, [...ids])\n    : await all<DbCategory>(categoryQuery);\n\n  return groups.map(group => ({\n    ...group,\n    categories: categories.filter(c => c.cat_group === group.id),\n  }));\n}\n\nexport async function insertCategoryGroup(\n  group: WithRequired<Partial<DbCategoryGroup>, 'name'>,\n): Promise<DbCategoryGroup['id']> {\n  // Don't allow duplicate group\n  const existingGroup = await first<\n    Pick<DbCategoryGroup, 'id' | 'name' | 'hidden'>\n  >(\n    `SELECT id, name, hidden FROM category_groups WHERE UPPER(name) = ? and tombstone = 0 LIMIT 1`,\n    [group.name.toUpperCase()],\n  );\n  if (existingGroup) {\n    throw new Error(\n      `A ${existingGroup.hidden ? 'hidden ' : ''}’${existingGroup.name}’ category group already exists.`,\n    );\n  }\n\n  const lastGroup = await first<Pick<DbCategoryGroup, 'sort_order'>>(`\n    SELECT sort_order FROM category_groups WHERE tombstone = 0 ORDER BY sort_order DESC, id DESC LIMIT 1\n  `);\n  const sort_order = (lastGroup ? lastGroup.sort_order : 0) + SORT_INCREMENT;\n\n  group = {\n    ...categoryGroupModel.validate(group),\n    sort_order,\n  };\n  const id: DbCategoryGroup['id'] = await insertWithUUID(\n    'category_groups',\n    group,\n  );\n  return id;\n}\n\nexport function updateCategoryGroup(\n  group: WithRequired<Partial<DbCategoryGroup>, 'name' | 'is_income'>,\n) {\n  group = categoryGroupModel.validate(group, { update: true });\n  return update('category_groups', group);\n}\n\nexport async function moveCategoryGroup(\n  id: DbCategoryGroup['id'],\n  targetId: DbCategoryGroup['id'],\n) {\n  const groups = await all<Pick<DbCategoryGroup, 'id' | 'sort_order'>>(\n    `SELECT id, sort_order FROM category_groups WHERE tombstone = 0 ORDER BY sort_order, id`,\n  );\n\n  const { updates, sort_order } = shoveSortOrders(groups, targetId);\n  for (const info of updates) {\n    await update('category_groups', info);\n  }\n  await update('category_groups', { id, sort_order });\n}\n\nexport async function deleteCategoryGroup(\n  group: Pick<DbCategoryGroup, 'id'>,\n  transferId?: DbCategory['id'],\n) {\n  const categories = await all<DbCategory>(\n    'SELECT * FROM categories WHERE cat_group = ?',\n    [group.id],\n  );\n\n  // Delete all the categories within a group\n  await Promise.all(categories.map(cat => deleteCategory(cat, transferId)));\n  await delete_('category_groups', group.id);\n}\n\nexport async function insertCategory(\n  category: WithRequired<Partial<DbCategory>, 'name' | 'cat_group'>,\n  { atEnd }: { atEnd?: boolean | undefined } = { atEnd: undefined },\n): Promise<DbCategory['id']> {\n  let sort_order;\n\n  let id_: DbCategory['id'];\n  await batchMessages(async () => {\n    // Dont allow duplicated names in groups\n    const existingCatInGroup = await first<Pick<DbCategory, 'id'>>(\n      `SELECT id FROM categories WHERE cat_group = ? and UPPER(name) = ? and tombstone = 0 LIMIT 1`,\n      [category.cat_group, category.name.toUpperCase()],\n    );\n    if (existingCatInGroup) {\n      throw new Error(\n        `Category ‘${category.name}’ already exists in group ‘${category.cat_group}’`,\n      );\n    }\n\n    if (atEnd) {\n      const lastCat = await first<Pick<DbCategory, 'sort_order'>>(`\n        SELECT sort_order FROM categories WHERE tombstone = 0 ORDER BY sort_order DESC, id DESC LIMIT 1\n      `);\n      sort_order = (lastCat ? lastCat.sort_order : 0) + SORT_INCREMENT;\n    } else {\n      // Unfortunately since we insert at the beginning, we need to shove\n      // the sort orders to make sure there's room for it\n      const categories = await all<Pick<DbCategory, 'id' | 'sort_order'>>(\n        `SELECT id, sort_order FROM categories WHERE cat_group = ? AND tombstone = 0 ORDER BY sort_order, id`,\n        [category.cat_group],\n      );\n\n      const { updates, sort_order: order } = shoveSortOrders(\n        categories,\n        categories.length > 0 ? categories[0].id : null,\n      );\n      for (const info of updates) {\n        await update('categories', info);\n      }\n      sort_order = order;\n    }\n\n    category = {\n      ...categoryModel.validate(category),\n      sort_order,\n    };\n\n    const id = await insertWithUUID('categories', category);\n    // Create an entry in the mapping table that points it to itself\n    await insert('category_mapping', { id, transferId: id });\n    id_ = id;\n  });\n  return id_;\n}\n\nexport function updateCategory(\n  category: WithRequired<\n    Partial<DbCategory>,\n    'name' | 'is_income' | 'cat_group'\n  >,\n) {\n  category = categoryModel.validate(category, { update: true });\n  // Change from cat_group to group because category AQL schema named it group.\n  // const { cat_group: group, ...rest } = category;\n  return update('categories', category);\n}\n\nexport async function moveCategory(\n  id: DbCategory['id'],\n  groupId: DbCategoryGroup['id'],\n  targetId: DbCategory['id'] | null,\n) {\n  if (!groupId) {\n    throw new Error('moveCategory: groupId is required');\n  }\n\n  const categories = await all<Pick<DbCategory, 'id' | 'sort_order'>>(\n    `SELECT id, sort_order FROM categories WHERE cat_group = ? AND tombstone = 0 ORDER BY sort_order, id`,\n    [groupId],\n  );\n\n  const { updates, sort_order } = shoveSortOrders(categories, targetId);\n  for (const info of updates) {\n    await update('categories', info);\n  }\n  await update('categories', { id, sort_order, cat_group: groupId });\n}\n\nexport async function deleteCategory(\n  category: Pick<DbCategory, 'id'>,\n  transferId?: DbCategory['id'],\n) {\n  if (transferId) {\n    // We need to update all the deleted categories that currently\n    // point to the one we're about to delete so they all are\n    // \"forwarded\" to the new transferred category.\n    const existingTransfers = await all<DbCategoryMapping>(\n      'SELECT * FROM category_mapping WHERE transferId = ?',\n      [category.id],\n    );\n    for (const mapping of existingTransfers) {\n      await update('category_mapping', {\n        id: mapping.id,\n        transferId,\n      });\n    }\n\n    // Finally, map the category we're about to delete to the new one\n    await update('category_mapping', { id: category.id, transferId });\n  }\n\n  return delete_('categories', category.id);\n}\n\nexport async function getPayee(id: DbPayee['id']) {\n  return first<DbPayee>(`SELECT * FROM payees WHERE id = ?`, [id]);\n}\n\nexport async function getAccount(id: DbAccount['id']) {\n  return first<DbAccount>(`SELECT * FROM accounts WHERE id = ?`, [id]);\n}\n\nexport async function insertPayee(\n  payee: WithRequired<Partial<DbPayee>, 'name'>,\n) {\n  payee = payeeModel.validate(payee);\n  let id: DbPayee['id'];\n  await batchMessages(async () => {\n    id = await insertWithUUID('payees', payee);\n    await insert('payee_mapping', { id, targetId: id });\n  });\n  return id;\n}\n\nexport async function deletePayee(payee: Pick<DbPayee, 'id'>) {\n  const { transfer_acct } = await first<DbPayee>(\n    'SELECT * FROM payees WHERE id = ?',\n    [payee.id],\n  );\n  if (transfer_acct) {\n    // You should never be able to delete transfer payees\n    return;\n  }\n\n  // let mappings = await all('SELECT id FROM payee_mapping WHERE targetId = ?', [\n  //   payee.id\n  // ]);\n  // await Promise.all(\n  //   mappings.map(m => update('payee_mapping', { id: m.id, targetId: null }))\n  // );\n\n  return delete_('payees', payee.id);\n}\n\nexport async function deleteTransferPayee(payee: Pick<DbPayee, 'id'>) {\n  // This allows deleting transfer payees\n  return delete_('payees', payee.id);\n}\n\nexport function updatePayee(payee: WithRequired<Partial<DbPayee>, 'id'>) {\n  payee = payeeModel.validate(payee, { update: true });\n  return update('payees', payee);\n}\n\nexport async function mergePayees(\n  target: DbPayee['id'],\n  ids: Array<DbPayee['id']>,\n) {\n  // Load in payees so we can check some stuff\n  const dbPayees: DbPayee[] = await all<DbPayee>('SELECT * FROM payees');\n  const payees = groupById(dbPayees);\n\n  // Filter out any transfer payees\n  if (payees[target].transfer_acct != null) {\n    return;\n  }\n  ids = ids.filter(id => payees[id].transfer_acct == null);\n\n  await batchMessages(async () => {\n    await Promise.all(\n      ids.map(async id => {\n        const mappings = await all<DbPayeeMapping>(\n          'SELECT id FROM payee_mapping WHERE targetId = ?',\n          [id],\n        );\n        await Promise.all(\n          mappings.map(m =>\n            update('payee_mapping', { id: m.id, targetId: target }),\n          ),\n        );\n      }),\n    );\n\n    await Promise.all(\n      ids.map(id =>\n        Promise.all([\n          update('payee_mapping', { id, targetId: target }),\n          delete_('payees', id),\n        ]),\n      ),\n    );\n  });\n}\n\nexport function getPayees() {\n  return all<DbPayee & { name: DbAccount['name'] | DbPayee['name'] }>(`\n    SELECT p.*, COALESCE(a.name, p.name) AS name FROM payees p\n    LEFT JOIN accounts a ON (p.transfer_acct = a.id AND a.tombstone = 0)\n    WHERE p.tombstone = 0 AND (p.transfer_acct IS NULL OR a.id IS NOT NULL)\n    ORDER BY p.transfer_acct IS NULL DESC, p.name COLLATE NOCASE, a.offbudget, a.sort_order\n  `);\n}\n\nexport function getCommonPayees() {\n  const twelveWeeksAgo = toDateRepr(\n    monthUtils.subWeeks(monthUtils.currentDate(), 12),\n  );\n  const limit = 10;\n  return all<\n    DbPayee & {\n      common: true;\n      transfer_acct: null;\n      c: number;\n      latest: DbViewTransactionInternalAlive['date'];\n    }\n  >(`\n    SELECT     p.id as id, p.name as name, p.favorite as favorite,\n      p.category as category, TRUE as common, NULL as transfer_acct,\n    count(*) as c,\n    max(t.date) as latest\n    FROM payees p\n    LEFT JOIN v_transactions_internal_alive t on t.payee == p.id\n    WHERE LENGTH(p.name) > 0\n    AND p.tombstone = 0\n    AND t.date > ${twelveWeeksAgo}\n    GROUP BY p.id\n    ORDER BY c DESC ,p.transfer_acct IS NULL DESC, p.name\n    COLLATE NOCASE\n    LIMIT ${limit}\n  `);\n}\n\n/* eslint-disable actual/typography */\nconst orphanedPayeesQuery = `\n  SELECT p.id\n  FROM payees p\n    LEFT JOIN payee_mapping pm ON pm.id = p.id\n    LEFT JOIN v_transactions_internal_alive t ON t.payee = pm.targetId\n  WHERE p.tombstone = 0\n    AND p.transfer_acct IS NULL\n    AND t.id IS NULL\n    AND NOT EXISTS (\n      SELECT 1\n      FROM rules r,\n      json_each(r.conditions) as cond\n      WHERE r.tombstone = 0\n        AND json_extract(cond.value, '$.field') = 'description'\n        AND json_extract(cond.value, '$.value') = pm.targetId\n    );\n`;\n/* eslint-enable actual/typography */\n\nexport function syncGetOrphanedPayees() {\n  return all<Pick<DbPayee, 'id'>>(orphanedPayeesQuery);\n}\n\nexport async function getOrphanedPayees() {\n  const rows = await all<Pick<DbPayee, 'id'>>(orphanedPayeesQuery);\n  return rows.map(row => row.id);\n}\n\nexport async function getPayeeByName(name: DbPayee['name']) {\n  return first<DbPayee>(\n    `SELECT * FROM payees WHERE UNICODE_LOWER(name) = ? AND tombstone = 0`,\n    [name.toLowerCase()],\n  );\n}\n\nexport function getAccounts() {\n  return all<\n    DbAccount & {\n      bankName: DbBank['name'];\n      bankId: DbBank['id'];\n    }\n  >(\n    `SELECT a.*, b.name as bankName, b.id as bankId FROM accounts a\n       LEFT JOIN banks b ON a.bank = b.id\n       WHERE a.tombstone = 0\n       ORDER BY sort_order, name`,\n  );\n}\n\nexport async function insertAccount(account) {\n  const accounts = await all<DbAccount>(\n    'SELECT * FROM accounts WHERE offbudget = ? ORDER BY sort_order, name',\n    [account.offbudget ? 1 : 0],\n  );\n\n  // Don't pass a target in, it will default to appending at the end\n  const { sort_order } = shoveSortOrders(accounts);\n\n  account = accountModel.validate({ ...account, sort_order });\n  return insertWithUUID('accounts', account);\n}\n\nexport function updateAccount(account) {\n  account = accountModel.validate(account, { update: true });\n  return update('accounts', account);\n}\n\nexport function deleteAccount(account) {\n  return delete_('accounts', account.id);\n}\n\nexport async function moveAccount(\n  id: DbAccount['id'],\n  targetId: DbAccount['id'] | null,\n) {\n  const account = await first<DbAccount>(\n    'SELECT * FROM accounts WHERE id = ?',\n    [id],\n  );\n  let accounts;\n  if (account.closed) {\n    accounts = await all<Pick<DbAccount, 'id' | 'sort_order'>>(\n      `SELECT id, sort_order FROM accounts WHERE closed = 1 ORDER BY sort_order, name`,\n    );\n  } else {\n    accounts = await all<Pick<DbAccount, 'id' | 'sort_order'>>(\n      `SELECT id, sort_order FROM accounts WHERE tombstone = 0 AND offbudget = ? ORDER BY sort_order, name`,\n      [account.offbudget ? 1 : 0],\n    );\n  }\n\n  const { updates, sort_order } = shoveSortOrders(accounts, targetId);\n  await batchMessages(async () => {\n    for (const info of updates) {\n      update('accounts', info);\n    }\n    update('accounts', { id, sort_order });\n  });\n}\n\nexport async function getTransaction(id: DbViewTransaction['id']) {\n  const rows = await selectWithSchema(\n    'transactions',\n    'SELECT * FROM v_transactions WHERE id = ?',\n    [id],\n  );\n  return rows[0];\n}\n\nexport async function getTransactions(accountId: DbTransaction['acct']) {\n  if (arguments.length > 1) {\n    throw new Error(\n      '`getTransactions` was given a second argument, it now only takes a single argument `accountId`',\n    );\n  }\n\n  return selectWithSchema(\n    'transactions',\n    'SELECT * FROM v_transactions WHERE account = ?',\n    [accountId],\n  );\n}\n\nexport function insertTransaction(\n  transaction,\n): Promise<TransactionEntity['id']> {\n  return insertWithSchema('transactions', transaction);\n}\n\nexport function updateTransaction(transaction) {\n  return updateWithSchema('transactions', transaction);\n}\n\nexport async function deleteTransaction(transaction) {\n  return delete_('transactions', transaction.id);\n}\n\nfunction toSqlQueryParameters(params: unknown[]) {\n  return params.map(() => '?').join(',');\n}\n\nexport function getTags() {\n  return all<DbTag>(`\n    SELECT id, tag, color, description\n    FROM tags\n    ORDER BY tag\n  `);\n}\n\nexport function insertTag(tag): Promise<DbTag['id']> {\n  return insertWithUUID('tags', tag);\n}\n\nexport async function deleteTag(tag) {\n  return transaction(() => {\n    runQuery(`DELETE FROM tags WHERE id = ?`, [tag.id]);\n  });\n}\n\nexport function updateTag(tag) {\n  return update('tags', tag);\n}\n","// @ts-strict-ignore\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as db from '../db';\n\nexport async function findOrCreateBank(institution, requisitionId) {\n  const bank = await db.first<Pick<db.DbBank, 'id' | 'bank_id'>>(\n    'SELECT id, bank_id FROM banks WHERE bank_id = ?',\n    [requisitionId],\n  );\n\n  if (bank) {\n    return bank;\n  }\n\n  const bankData = {\n    id: uuidv4(),\n    bank_id: requisitionId,\n    name: institution.name,\n  };\n\n  await db.insertWithUUID('banks', bankData);\n\n  return bankData;\n}\n","// @ts-strict-ignore\nimport * as db from '../db';\n\nexport async function createPayee(description) {\n  // Check to make sure no payee already exists with exactly the same\n  // name\n  const row = await db.first<Pick<db.DbPayee, 'id'>>(\n    `SELECT id FROM payees WHERE UNICODE_LOWER(name) = ? AND tombstone = 0`,\n    [description.toLowerCase()],\n  );\n\n  if (row) {\n    return row.id;\n  } else {\n    return (await db.insertPayee({ name: description })) as db.DbPayee['id'];\n  }\n}\n\nexport async function getStartingBalancePayee() {\n  let category = await db.first<db.DbCategory>(`\n    SELECT * FROM categories\n      WHERE is_income = 1 AND\n      LOWER(name) = 'starting balances' AND\n      tombstone = 0\n  `);\n  if (category === null) {\n    category = await db.first<db.DbCategory>(\n      'SELECT * FROM categories WHERE is_income = 1 AND tombstone = 0',\n    );\n  }\n\n  const id = await createPayee('Starting Balance');\n  return {\n    id,\n    category: category ? category.id : null,\n  };\n}\n","import { v4 as uuidv4 } from 'uuid';\n\nimport { type TransactionEntity } from '../types/models';\n\nimport { last, diffItems, applyChanges } from './util';\n\nexport function isTemporaryId(id: string) {\n  return id.indexOf('temp') !== -1;\n}\n\nexport function isPreviewId(id: string) {\n  return id.indexOf('preview/') !== -1;\n}\n\n// The amount might be null when adding a new transaction\nfunction num(n: number | null | undefined) {\n  return typeof n === 'number' ? n : 0;\n}\n\nfunction SplitTransactionError(total: number, parent: TransactionEntity) {\n  const difference = num(parent.amount) - total;\n\n  return {\n    type: 'SplitTransactionError' as const,\n    version: 1 as const,\n    difference,\n  };\n}\n\ntype GenericTransactionEntity = TransactionEntity;\n\nexport function makeChild<T extends GenericTransactionEntity>(\n  parent: T,\n  data: object = {},\n) {\n  const prefix = parent.id === 'temp' ? 'temp' : '';\n\n  return {\n    amount: 0,\n    ...data,\n    category: 'category' in data ? data.category : parent.category,\n    payee: 'payee' in data ? data.payee : parent.payee,\n    id: 'id' in data ? data.id : prefix + uuidv4(),\n    account: parent.account,\n    date: parent.date,\n    cleared: parent.cleared != null ? parent.cleared : null,\n    reconciled: 'reconciled' in data ? data.reconciled : parent.reconciled,\n    starting_balance_flag:\n      parent.starting_balance_flag != null\n        ? parent.starting_balance_flag\n        : null,\n    is_child: true,\n    parent_id: parent.id,\n    error: null,\n  } as unknown as T;\n}\n\nfunction makeNonChild<T extends GenericTransactionEntity>(\n  parent: T,\n  data: object,\n) {\n  return {\n    amount: 0,\n    ...data,\n    cleared: parent.cleared != null ? parent.cleared : null,\n    reconciled: parent.reconciled != null ? parent.reconciled : null,\n    sort_order: parent.sort_order || null,\n    starting_balance_flag: null,\n    is_child: false,\n    parent_id: null,\n  } as unknown as T;\n}\n\nexport function recalculateSplit(trans: TransactionEntity) {\n  // Calculate the new total of split transactions and make sure\n  // that it equals the parent amount\n  const total = (trans.subtransactions || []).reduce(\n    (acc, t) => acc + num(t.amount),\n    0,\n  );\n\n  const { error, ...rest } = trans;\n  return {\n    ...rest,\n    error:\n      total === num(trans.amount) ? null : SplitTransactionError(total, trans),\n  } satisfies TransactionEntity;\n}\n\nfunction findParentIndex(\n  transactions: readonly TransactionEntity[],\n  idx: number,\n) {\n  // This relies on transactions being sorted in a way where parents\n  // are always before children, which is enforced in the db layer.\n  // Walk backwards and find the last parent;\n  while (idx >= 0) {\n    const trans = transactions[idx];\n    if (trans.is_parent) {\n      return idx;\n    }\n    idx--;\n  }\n  return null;\n}\n\nfunction getSplit(\n  transactions: readonly TransactionEntity[],\n  parentIndex: number,\n) {\n  const split = [transactions[parentIndex]];\n  let curr = parentIndex + 1;\n  while (curr < transactions.length && transactions[curr].is_child) {\n    split.push(transactions[curr]);\n    curr++;\n  }\n  return split;\n}\n\nexport function ungroupTransactions(transactions: TransactionEntity[]) {\n  return transactions.reduce<TransactionEntity[]>((list, parent) => {\n    const { subtransactions, ...trans } = parent;\n    const _subtransactions = subtransactions || [];\n\n    list.push(trans);\n\n    for (let i = 0; i < _subtransactions.length; i++) {\n      list.push(_subtransactions[i]);\n    }\n    return list;\n  }, []);\n}\n\nexport function groupTransaction(\n  split: TransactionEntity[],\n): TransactionEntity {\n  return {\n    ...split[0],\n    subtransactions: split.slice(1),\n  } satisfies TransactionEntity;\n}\n\nexport function ungroupTransaction(split: TransactionEntity | null) {\n  if (split == null) {\n    return [];\n  }\n  return ungroupTransactions([split]);\n}\n\nexport function applyTransactionDiff(\n  groupedTrans: Parameters<typeof ungroupTransaction>[0],\n  diff: Parameters<typeof applyChanges>[0],\n) {\n  return groupTransaction(\n    applyChanges(\n      diff,\n      ungroupTransaction(groupedTrans) || [],\n    ) as TransactionEntity[],\n  );\n}\n\nfunction replaceTransactions(\n  transactions: readonly TransactionEntity[],\n  id: string,\n  func: (transaction: TransactionEntity) => TransactionEntity | null,\n): {\n  data: TransactionEntity[];\n  newTransaction: TransactionEntity | null;\n  diff: ReturnType<typeof diffItems<TransactionEntity>>;\n} {\n  const idx = transactions.findIndex(t => t.id === id);\n  const trans = transactions[idx];\n  const transactionsCopy = [...transactions];\n\n  if (idx === -1) {\n    throw new Error('Tried to edit unknown transaction id: ' + id);\n  }\n\n  if (trans.is_parent || trans.is_child) {\n    const parentIndex = findParentIndex(transactions, idx);\n    if (parentIndex == null) {\n      console.log('Cannot find parent index');\n      return {\n        data: [],\n        diff: { added: [], deleted: [], updated: [] },\n        newTransaction: null,\n      };\n    }\n\n    const split = getSplit(transactions, parentIndex);\n    let grouped = func(groupTransaction(split));\n    const newSplit = ungroupTransaction(grouped);\n\n    let diff: ReturnType<typeof diffItems<TransactionEntity>>;\n    if (newSplit == null) {\n      // If everything was deleted, just delete the parent which will\n      // delete everything\n      diff = { added: [], deleted: [{ id: split[0].id }], updated: [] };\n      grouped = { ...split[0], _deleted: true };\n      transactionsCopy.splice(parentIndex, split.length);\n    } else {\n      diff = diffItems<TransactionEntity>(split, newSplit);\n      transactionsCopy.splice(parentIndex, split.length, ...newSplit);\n    }\n\n    return { data: transactionsCopy, newTransaction: grouped, diff };\n  } else {\n    const grouped = func(trans);\n    const newTrans = ungroupTransaction(grouped) || [];\n    if (grouped) {\n      grouped.subtransactions = grouped.subtransactions || [];\n    }\n    transactionsCopy.splice(idx, 1, ...newTrans);\n\n    return {\n      data: transactionsCopy,\n      newTransaction: grouped || {\n        ...trans,\n        _deleted: true,\n      },\n      diff: diffItems<TransactionEntity>([trans], newTrans),\n    };\n  }\n}\n\nexport function addSplitTransaction(\n  transactions: readonly TransactionEntity[],\n  id: string,\n) {\n  return replaceTransactions(transactions, id, trans => {\n    if (!trans.is_parent) {\n      return trans;\n    }\n    const prevSub = last(trans.subtransactions || []);\n    trans.subtransactions?.push(\n      makeChild(trans, {\n        amount: 0,\n        sort_order: num(prevSub && prevSub.sort_order) - 1,\n      }),\n    );\n    return trans;\n  });\n}\n\nexport function updateTransaction(\n  transactions: readonly TransactionEntity[],\n  transaction: TransactionEntity,\n) {\n  return replaceTransactions(transactions, transaction.id, trans => {\n    if (trans.is_parent) {\n      const parent = trans.id === transaction.id ? transaction : trans;\n      const originalSubtransactions =\n        parent.subtransactions ?? trans.subtransactions;\n      const sub = originalSubtransactions?.map(t => {\n        // Make sure to update the children to reflect the updated\n        // properties (if the parent updated)\n\n        let child = t;\n        if (trans.id === transaction.id) {\n          const { payee: childPayee, ...rest } = t;\n          const newPayee =\n            childPayee === trans.payee ? transaction.payee : childPayee;\n          child = {\n            ...rest,\n            ...(newPayee != null ? { payee: newPayee } : {}),\n          };\n        } else if (t.id === transaction.id) {\n          child = transaction;\n        }\n\n        return makeChild(parent, child);\n      });\n\n      return recalculateSplit({\n        ...parent,\n        ...(sub && { subtransactions: sub }),\n      });\n    } else {\n      return transaction;\n    }\n  });\n}\n\nexport function deleteTransaction(\n  transactions: TransactionEntity[],\n  id: string,\n) {\n  return replaceTransactions(transactions, id, trans => {\n    if (trans.is_parent) {\n      if (trans.id === id) {\n        return null;\n      } else if (trans.subtransactions?.length === 1) {\n        const { subtransactions, ...rest } = trans;\n        return {\n          ...rest,\n          is_parent: false,\n          error: null,\n        } satisfies TransactionEntity;\n      } else {\n        const sub = trans.subtransactions?.filter(t => t.id !== id);\n        return recalculateSplit({\n          ...trans,\n          ...(sub && { subtransactions: sub }),\n        });\n      }\n    } else {\n      return null;\n    }\n  });\n}\n\nexport function splitTransaction(\n  transactions: readonly TransactionEntity[],\n  id: string,\n  createSubtransactions?: (\n    parentTransaction: TransactionEntity,\n  ) => TransactionEntity[],\n) {\n  return replaceTransactions(transactions, id, trans => {\n    if (trans.is_parent || trans.is_child) {\n      return trans;\n    }\n\n    const subtransactions = createSubtransactions?.(trans) || [\n      makeChild(trans),\n    ];\n\n    const { error, ...rest } = trans;\n\n    return {\n      ...rest,\n      is_parent: true,\n      error: num(trans.amount) === 0 ? null : SplitTransactionError(0, trans),\n      subtransactions: subtransactions.map(t => ({\n        ...t,\n        sort_order: t.sort_order || -1,\n      })),\n    } satisfies TransactionEntity;\n  });\n}\n\nexport function realizeTempTransactions(\n  transactions: TransactionEntity[],\n): TransactionEntity[] {\n  const parent = {\n    ...transactions.find(t => !t.is_child),\n    id: uuidv4(),\n  } as TransactionEntity;\n  const children = transactions.filter(t => t.is_child);\n  return [\n    parent,\n    ...children.map(\n      child =>\n        ({\n          ...child,\n          id: uuidv4(),\n          parent_id: parent.id,\n        }) satisfies TransactionEntity,\n    ),\n  ];\n}\n\nexport function makeAsNonChildTransactions(\n  childTransactionsToUpdate: TransactionEntity[],\n  transactions: TransactionEntity[],\n) {\n  const [parentTransaction, ...childTransactions] = transactions;\n  const newNonChildTransactions = childTransactionsToUpdate.map(t =>\n    makeNonChild(parentTransaction, t),\n  );\n\n  const remainingChildTransactions = childTransactions.filter(\n    t =>\n      !newNonChildTransactions.some(updatedTrans => updatedTrans.id === t.id),\n  );\n\n  const nonChildTransactionsToUpdate =\n    remainingChildTransactions.length === 1\n      ? [\n          ...newNonChildTransactions,\n          makeNonChild(parentTransaction, remainingChildTransactions[0]),\n        ]\n      : newNonChildTransactions;\n\n  const deleteParentTransaction = remainingChildTransactions.length <= 1;\n\n  const updatedParentTransaction = {\n    ...parentTransaction,\n    ...(!deleteParentTransaction\n      ? {\n          amount: remainingChildTransactions\n            .map(t => t.amount)\n            .reduce((total, amount) => total + amount, 0),\n        }\n      : {}),\n  };\n\n  return {\n    updated: [\n      ...(!deleteParentTransaction ? [updatedParentTransaction] : []),\n      ...nonChildTransactionsToUpdate,\n    ],\n    deleted: [...(deleteParentTransaction ? [updatedParentTransaction] : [])],\n  };\n}\n","// @ts-strict-ignore\nimport { t } from 'i18next';\n\nimport { FieldValueTypes, RuleConditionOp } from '../types/models';\n\nimport { integerToAmount, amountToInteger, currencyToAmount } from './util';\n\n// For now, this info is duplicated from the backend. Figure out how\n// to share it later.\nconst TYPE_INFO = {\n  date: {\n    ops: ['is', 'isapprox', 'gt', 'gte', 'lt', 'lte'],\n    nullable: false,\n  },\n  id: {\n    ops: [\n      'is',\n      'contains',\n      'matches',\n      'oneOf',\n      'isNot',\n      'doesNotContain',\n      'notOneOf',\n      'onBudget',\n      'offBudget',\n    ],\n    nullable: true,\n  },\n  saved: {\n    ops: [],\n    nullable: false,\n  },\n  string: {\n    ops: [\n      'is',\n      'contains',\n      'matches',\n      'oneOf',\n      'isNot',\n      'doesNotContain',\n      'notOneOf',\n      'hasTags',\n    ],\n    nullable: true,\n  },\n  number: {\n    ops: ['is', 'isapprox', 'isbetween', 'gt', 'gte', 'lt', 'lte'],\n    nullable: false,\n  },\n  boolean: {\n    ops: ['is'],\n    nullable: false,\n  },\n} as const;\n\ntype FieldInfoConstraint = Record<\n  keyof FieldValueTypes,\n  {\n    type: keyof typeof TYPE_INFO;\n    disallowedOps?: Set<RuleConditionOp>;\n    internalOps?: Set<RuleConditionOp>;\n  }\n>;\n\nconst FIELD_INFO = {\n  imported_payee: {\n    type: 'string',\n    disallowedOps: new Set(['hasTags']),\n  },\n  payee: { type: 'id', disallowedOps: new Set(['onBudget', 'offBudget']) },\n  payee_name: { type: 'string' },\n  date: { type: 'date' },\n  notes: { type: 'string' },\n  amount: { type: 'number' },\n  category: {\n    type: 'id',\n    disallowedOps: new Set(['onBudget', 'offBudget']),\n    internalOps: new Set(['and']),\n  },\n  account: { type: 'id' },\n  cleared: { type: 'boolean' },\n  reconciled: { type: 'boolean' },\n  saved: { type: 'saved' },\n  transfer: { type: 'boolean' },\n  parent: { type: 'boolean' },\n} as const satisfies FieldInfoConstraint;\n\nconst fieldInfo: FieldInfoConstraint = FIELD_INFO;\n\nexport const FIELD_TYPES = new Map<keyof FieldValueTypes, string>(\n  Object.entries(FIELD_INFO).map(([field, info]) => [\n    field as unknown as keyof FieldValueTypes,\n    info.type,\n  ]),\n);\n\nexport function isValidOp(field: keyof FieldValueTypes, op: RuleConditionOp) {\n  const type = FIELD_TYPES.get(field);\n\n  if (!type) return false;\n  if (fieldInfo[field].disallowedOps?.has(op)) return false;\n\n  return (\n    TYPE_INFO[type].ops.includes(op) || fieldInfo[field].internalOps?.has(op)\n  );\n}\n\nexport function getValidOps(field: keyof FieldValueTypes) {\n  const type = FIELD_TYPES.get(field);\n  if (!type) {\n    return [];\n  }\n  return TYPE_INFO[type].ops.filter(\n    op => !fieldInfo[field].disallowedOps?.has(op),\n  );\n}\n\nexport const ALLOCATION_METHODS = {\n  'fixed-amount': 'a fixed amount',\n  'fixed-percent': 'a fixed percent of the remainder',\n  remainder: 'an equal portion of the remainder',\n};\n\nexport function mapField(field, opts?) {\n  opts = opts || {};\n\n  switch (field) {\n    case 'imported_payee':\n      return t('imported payee');\n    case 'payee_name':\n      return t('payee (name)');\n    case 'amount':\n      if (opts.inflow) {\n        return t('amount (inflow)');\n      } else if (opts.outflow) {\n        return t('amount (outflow)');\n      }\n      return t('amount');\n    case 'amount-inflow':\n      return t('amount (inflow)');\n    case 'amount-outflow':\n      return t('amount (outflow)');\n    case 'account':\n      return t('account');\n    case 'date':\n      return t('date');\n    case 'category':\n      return t('category');\n    case 'notes':\n      return t('notes');\n    case 'payee':\n      return t('payee');\n    case 'saved':\n      return t('saved');\n    case 'cleared':\n      return t('cleared');\n    case 'reconciled':\n      return t('reconciled');\n    case 'transfer':\n      return t('transfer');\n    default:\n      return field;\n  }\n}\n\nexport function friendlyOp(op, type?) {\n  switch (op) {\n    case 'oneOf':\n      return t('one of');\n    case 'notOneOf':\n      return t('not one of');\n    case 'is':\n      return t('is');\n    case 'isNot':\n      return t('is not');\n    case 'isapprox':\n      return t('is approx');\n    case 'isbetween':\n      return t('is between');\n    case 'contains':\n      return t('contains');\n    case 'hasTags':\n      return t('has tags');\n    case 'matches':\n      return t('matches');\n    case 'doesNotContain':\n      return t('does not contain');\n    case 'gt':\n      if (type === 'date') {\n        return t('is after');\n      }\n      return t('is greater than');\n    case 'gte':\n      if (type === 'date') {\n        return t('is after or equals');\n      }\n      return t('is greater than or equals');\n    case 'lt':\n      if (type === 'date') {\n        return t('is before');\n      }\n      return t('is less than');\n    case 'lte':\n      if (type === 'date') {\n        return t('is before or equals');\n      }\n      return t('is less than or equals');\n    case 'true':\n      return t('is true');\n    case 'false':\n      return t('is false');\n    case 'set':\n      return t('set');\n    case 'set-split-amount':\n      return t('allocate');\n    case 'link-schedule':\n      return t('link schedule');\n    case 'prepend-notes':\n      return t('prepend to notes');\n    case 'append-notes':\n      return t('append to notes');\n    case 'and':\n      return t('and');\n    case 'or':\n      return t('or');\n    case 'onBudget':\n      return t('is on budget');\n    case 'offBudget':\n      return t('is off budget');\n    default:\n      return '';\n  }\n}\n\nexport function deserializeField(field) {\n  if (field === 'amount-inflow') {\n    return { field: 'amount', options: { inflow: true } };\n  } else if (field === 'amount-outflow') {\n    return { field: 'amount', options: { outflow: true } };\n  } else {\n    return { field };\n  }\n}\n\nexport function getFieldError(type) {\n  switch (type) {\n    case 'date-format':\n      return 'Invalid date format';\n    case 'no-null':\n    case 'no-empty-array':\n    case 'no-empty-string':\n      return 'Value cannot be empty';\n    case 'not-string':\n      return 'Value must be a string';\n    case 'not-boolean':\n      return 'Value must be a boolean';\n    case 'not-number':\n      return 'Value must be a number';\n    case 'invalid-field':\n      return 'Please choose a valid field for this type of rule';\n    case 'invalid-template':\n      return 'Invalid handlebars template';\n    default:\n      return 'Internal error, sorry! Please get in touch https://actualbudget.org/contact/ for support';\n  }\n}\n\nexport function sortNumbers(num1, num2) {\n  if (num1 < num2) {\n    return [num1, num2];\n  }\n  return [num2, num1];\n}\n\nexport function parse(item) {\n  if (item.op === 'set-split-amount') {\n    if (item.options.method === 'fixed-amount') {\n      return { ...item, value: item.value && integerToAmount(item.value) };\n    }\n    return item;\n  }\n\n  switch (item.type) {\n    case 'number': {\n      let parsed = item.value;\n      if (\n        item.field === 'amount' &&\n        item.op !== 'isbetween' &&\n        parsed != null\n      ) {\n        parsed = integerToAmount(parsed);\n      }\n      return { ...item, value: parsed };\n    }\n    case 'string': {\n      const parsed = item.value == null ? '' : item.value;\n      return { ...item, value: parsed };\n    }\n    case 'boolean': {\n      const parsed = item.value;\n      return { ...item, value: parsed };\n    }\n    default:\n  }\n\n  return { ...item, error: null };\n}\n\nexport function unparse({ error, inputKey, ...item }) {\n  if (item.op === 'set-split-amount') {\n    if (item.options.method === 'fixed-amount') {\n      return {\n        ...item,\n        value: item.value && amountToInteger(item.value),\n      };\n    }\n    if (item.options.method === 'fixed-percent') {\n      return {\n        ...item,\n        value: item.value && parseFloat(item.value),\n      };\n    }\n    return item;\n  }\n\n  switch (item.type) {\n    case 'number': {\n      let unparsed = item.value;\n      if (item.field === 'amount' && item.op !== 'isbetween') {\n        unparsed = amountToInteger(unparsed);\n      }\n\n      return { ...item, value: unparsed };\n    }\n    case 'string': {\n      const unparsed = item.value == null ? '' : item.value;\n      return { ...item, value: unparsed };\n    }\n    case 'boolean': {\n      const unparsed = item.value == null ? false : item.value;\n      return { ...item, value: unparsed };\n    }\n    default:\n  }\n\n  return item;\n}\n\nexport function makeValue(value, cond) {\n  switch (cond.type) {\n    case 'number': {\n      if (cond.op !== 'isbetween') {\n        return {\n          ...cond,\n          error: null,\n          value: value ? currencyToAmount(String(value)) || 0 : 0,\n        };\n      }\n      break;\n    }\n    default:\n  }\n\n  const isMulti = ['oneOf', 'notOneOf'].includes(cond.op);\n\n  if (isMulti) {\n    return { ...cond, error: null, value: value || [] };\n  }\n\n  return { ...cond, error: null, value };\n}\n\nexport function getApproxNumberThreshold(number) {\n  return Math.round(Math.abs(number) * 0.075);\n}\n","// @ts-strict-ignore\nimport { addSyncListener } from '../sync/index';\n\nimport * as db from './index';\n\n// This file keeps all the mappings in memory so we can access it\n// synchronously. This is primarily used in the rules system, but\n// there may be other uses in the future. You don't need to worry\n// about this generally; if you are querying transactions, ids are\n// transparently mapped for you. But if you are building something\n// that stores ids and later uses them, you need to remember to map\n// the ids.\n//\n// IMPORTANT: `loadMappings` must be called first before other modules\n// that listen for sync changes. This must be the first sync listener\n// to run in case other listeners use this mapping table; otherwise\n// they might see stale mappings.\n\nlet allMappings;\nlet unlistenSync;\n\nexport async function loadMappings() {\n  // The mappings are separated into tables specific to the type of\n  // data. But you know, we really could keep a global mapping table.\n  const categories = (\n    await db.all<db.DbCategoryMapping>('SELECT * FROM category_mapping')\n  ).map(r => [r.id, r.transferId] as const);\n  const payees = (\n    await db.all<db.DbPayeeMapping>('SELECT * FROM payee_mapping')\n  ).map(r => [r.id, r.targetId] as const);\n\n  // All ids are unique, so we can just keep a global table of mappings\n  allMappings = new Map(categories.concat(payees));\n\n  if (unlistenSync) {\n    unlistenSync();\n  }\n  unlistenSync = addSyncListener(onApplySync);\n}\n\nfunction onApplySync(oldValues, newValues) {\n  newValues.forEach((items, table) => {\n    if (table.indexOf('mapping') !== -1) {\n      const field = table === 'category_mapping' ? 'transferId' : 'targetId';\n\n      items.forEach(newValue => {\n        allMappings.set(newValue.id, newValue[field]);\n      });\n    }\n  });\n}\n\nexport function getMappings() {\n  return allMappings;\n}\n\nexport function getMapping(id) {\n  return allMappings.get(id) || null;\n}\n","// @ts-strict-ignore\nimport type { IRuleOptions } from '@rschedule/core';\nimport * as d from 'date-fns';\nimport { Locale } from 'date-fns';\nimport { t } from 'i18next';\n\nimport { Condition } from '../server/rules';\n\nimport * as monthUtils from './months';\nimport { q } from './query';\n\nexport function getStatus(\n  nextDate: string,\n  completed: boolean,\n  hasTrans: boolean,\n  upcomingLength: string = '7',\n) {\n  const upcomingDays = getUpcomingDays(upcomingLength);\n  const today = monthUtils.currentDay();\n  if (completed) {\n    return 'completed';\n  } else if (hasTrans) {\n    return 'paid';\n  } else if (nextDate === today) {\n    return 'due';\n  } else if (\n    nextDate > today &&\n    nextDate <= monthUtils.addDays(today, upcomingDays)\n  ) {\n    return 'upcoming';\n  } else if (nextDate < today) {\n    return 'missed';\n  } else {\n    return 'scheduled';\n  }\n}\n\nexport function getStatusLabel(status: string) {\n  switch (status) {\n    case 'completed':\n      return t('completed');\n    case 'paid':\n      return t('paid');\n    case 'due':\n      return t('due');\n    case 'upcoming':\n      return t('upcoming');\n    case 'missed':\n      return t('missed');\n    case 'scheduled':\n      return t('scheduled');\n  }\n}\n\nexport function getHasTransactionsQuery(schedules) {\n  const filters = schedules.map(schedule => {\n    const dateCond = schedule._conditions.find(c => c.field === 'date');\n    return {\n      $and: {\n        schedule: schedule.id,\n        date: {\n          $gte:\n            dateCond && dateCond.op === 'is'\n              ? schedule.next_date\n              : monthUtils.subDays(schedule.next_date, 2),\n        },\n      },\n    };\n  });\n\n  return q('transactions')\n    .options({ splits: 'all' })\n    .filter({ $or: filters })\n    .orderBy({ date: 'desc' })\n    .select(['schedule', 'date']);\n}\n\nfunction makeNumberSuffix(num: number, locale: Locale) {\n  // Slight abuse of date-fns to turn a number like \"1\" into the full\n  // form \"1st\" but formatting a date with that number\n  return monthUtils.format(new Date(2020, 0, num, 12), 'do', locale);\n}\n\nfunction prettyDayName(day) {\n  const days = {\n    SU: t('Sunday'),\n    MO: t('Monday'),\n    TU: t('Tuesday'),\n    WE: t('Wednesday'),\n    TH: t('Thursday'),\n    FR: t('Friday'),\n    SA: t('Saturday'),\n  };\n  return days[day];\n}\n\nexport function getRecurringDescription(config, dateFormat, locale: Locale) {\n  const interval = config.interval || 1;\n\n  let endModeSuffix = '';\n  switch (config.endMode) {\n    case 'after_n_occurrences':\n      if (config.endOccurrences === 1) {\n        endModeSuffix = t('once');\n      } else {\n        endModeSuffix = t('{{endOccurrences}} times', {\n          endOccurrences: config.endOccurrences,\n        });\n      }\n      break;\n    case 'on_date':\n      endModeSuffix = t('until {{dateFormatted}}', {\n        dateFormatted: monthUtils.format(config.endDate, dateFormat),\n      });\n      break;\n    default:\n  }\n\n  const weekendSolveModeString = config.weekendSolveMode\n    ? config.weekendSolveMode === 'after'\n      ? t('(after weekend)')\n      : t('(before weekend)')\n    : '';\n\n  const weekendSolveSuffix = config.skipWeekend ? weekendSolveModeString : '';\n  const suffix = endModeSuffix\n    ? `, ${endModeSuffix} ${weekendSolveSuffix}`\n    : `${weekendSolveSuffix}`;\n\n  let desc = null;\n\n  switch (config.frequency) {\n    case 'daily':\n      desc =\n        interval !== 1\n          ? t(`Every {{interval}} days`, { interval })\n          : t('Every day');\n      break;\n    case 'weekly':\n      desc =\n        interval !== 1\n          ? t(`Every {{interval}} weeks on {{dateFormatted}}`, {\n              interval,\n              dateFormatted: monthUtils.format(config.start, 'EEEE', locale),\n            })\n          : t('Every week on {{dateFormatted}}', {\n              dateFormatted: monthUtils.format(config.start, 'EEEE', locale),\n            });\n      break;\n    case 'monthly':\n      if (config.patterns && config.patterns.length > 0) {\n        // Sort the days ascending. We filter out -1 because that\n        // represents \"last days\" and should always be last, but this\n        // sort would put them first\n        let patterns = [...config.patterns]\n          .sort((p1, p2) => {\n            const typeOrder =\n              (p1.type === 'day' ? 1 : 0) - (p2.type === 'day' ? 1 : 0);\n            const valOrder = p1.value - p2.value;\n\n            if (typeOrder === 0) {\n              return valOrder;\n            }\n            return typeOrder;\n          })\n          .filter(p => p.value !== -1);\n\n        // Add on all -1 values to the end\n        patterns = patterns.concat(config.patterns.filter(p => p.value === -1));\n\n        const strs: string[] = [];\n\n        const uniqueDays = new Set(patterns.map(p => p.type));\n        const isSameDay = uniqueDays.size === 1 && !uniqueDays.has('day');\n        for (const pattern of patterns) {\n          if (pattern.type === 'day') {\n            if (pattern.value === -1) {\n              strs.push(t('last day'));\n            } else {\n              // Example: 15th day\n              strs.push(makeNumberSuffix(pattern.value, locale));\n            }\n          } else {\n            const dayName = isSameDay ? '' : ' ' + prettyDayName(pattern.type);\n\n            if (pattern.value === -1) {\n              // Example: last Monday\n              strs.push(t('last') + dayName);\n            } else {\n              // Example: 3rd Monday\n              strs.push(makeNumberSuffix(pattern.value, locale) + dayName);\n            }\n          }\n        }\n\n        let range = '';\n        if (strs.length > 2) {\n          range += strs.slice(0, strs.length - 1).join(', ');\n          range += `, ${t('and')} `;\n          range += strs[strs.length - 1];\n        } else {\n          range += strs.join(` ${t('and')} `);\n        }\n\n        if (isSameDay) {\n          range += ' ' + prettyDayName(patterns[0].type);\n        }\n\n        desc =\n          interval !== 1\n            ? t(`Every {{interval}} months on the {{range}}`, {\n                interval,\n                range,\n              })\n            : t('Every month on the {{range}}', { range });\n      } else {\n        desc =\n          interval !== 1\n            ? t(`Every {{interval}} months on the {{dateFormatted}}`, {\n                interval,\n                dateFormatted: monthUtils.format(config.start, 'do', locale),\n              })\n            : t('Every month on the {{dateFormatted}}', {\n                dateFormatted: monthUtils.format(config.start, 'do', locale),\n              });\n      }\n      break;\n\n    case 'yearly':\n      desc =\n        interval !== 1\n          ? t(`Every {{interval}} years on {{dateFormatted}}`, {\n              interval,\n              dateFormatted: monthUtils.format(config.start, 'LLL do', locale),\n            })\n          : t('Every year on {{dateFormatted}}', {\n              dateFormatted: monthUtils.format(config.start, 'LLL do', locale),\n            });\n      break;\n\n    default:\n      return t('Recurring error');\n  }\n\n  return `${desc}${suffix}`.trim();\n}\n\nexport function recurConfigToRSchedule(config) {\n  const base: IRuleOptions = {\n    start: monthUtils.parseDate(config.start),\n    // @ts-ignore: issues with https://gitlab.com/john.carroll.p/rschedule/-/issues/86\n    frequency: config.frequency.toUpperCase(),\n    byHourOfDay: [12],\n  };\n\n  if (config.interval) {\n    // @ts-ignore: issues with https://gitlab.com/john.carroll.p/rschedule/-/issues/86\n    base.interval = config.interval;\n  }\n\n  switch (config.endMode) {\n    case 'after_n_occurrences':\n      base.count = config.endOccurrences;\n      break;\n    case 'on_date':\n      base.end = monthUtils.parseDate(config.endDate);\n      break;\n    default:\n  }\n\n  const abbrevDay = name => name.slice(0, 2).toUpperCase();\n\n  switch (config.frequency) {\n    case 'daily':\n      // Nothing to do\n      return [base];\n    case 'weekly':\n      // Nothing to do\n      return [base];\n    case 'monthly':\n      if (config.patterns && config.patterns.length > 0) {\n        const days = config.patterns.filter(p => p.type === 'day');\n        const dayNames = config.patterns.filter(p => p.type !== 'day');\n\n        return [\n          days.length > 0 && { ...base, byDayOfMonth: days.map(p => p.value) },\n          dayNames.length > 0 && {\n            ...base,\n            byDayOfWeek: dayNames.map(p => [abbrevDay(p.type), p.value]),\n          },\n        ].filter(Boolean);\n      } else {\n        // Nothing to do\n        return [base];\n      }\n    case 'yearly':\n      return [base];\n    default:\n      throw new Error('Invalid recurring date config');\n  }\n}\n\nexport function extractScheduleConds(conditions) {\n  return {\n    payee:\n      conditions.find(cond => cond.op === 'is' && cond.field === 'payee') ||\n      conditions.find(\n        cond => cond.op === 'is' && cond.field === 'description',\n      ) ||\n      null,\n    account:\n      conditions.find(cond => cond.op === 'is' && cond.field === 'account') ||\n      conditions.find(cond => cond.op === 'is' && cond.field === 'acct') ||\n      null,\n    amount:\n      conditions.find(\n        cond =>\n          (cond.op === 'is' ||\n            cond.op === 'isapprox' ||\n            cond.op === 'isbetween') &&\n          cond.field === 'amount',\n      ) || null,\n    date:\n      conditions.find(\n        cond =>\n          (cond.op === 'is' || cond.op === 'isapprox') && cond.field === 'date',\n      ) || null,\n  };\n}\n\nexport function getNextDate(\n  dateCond,\n  start = new Date(monthUtils.currentDay()),\n  noSkipWeekend = false,\n) {\n  start = d.startOfDay(start);\n\n  const cond = new Condition(dateCond.op, 'date', dateCond.value, null);\n  const value = cond.getValue();\n\n  if (value.type === 'date') {\n    return value.date;\n  } else if (value.type === 'recur') {\n    let dates = value.schedule.occurrences({ start, take: 1 }).toArray();\n\n    if (dates.length === 0) {\n      // Could be a schedule with limited occurrences, so we try to\n      // find the last occurrence\n      dates = value.schedule.occurrences({ reverse: true, take: 1 }).toArray();\n    }\n\n    if (dates.length > 0) {\n      let date = dates[0].date;\n      if (value.schedule.data.skipWeekend && !noSkipWeekend) {\n        date = getDateWithSkippedWeekend(\n          date,\n          value.schedule.data.weekendSolve,\n        );\n      }\n      return monthUtils.dayFromDate(date);\n    }\n  }\n  return null;\n}\n\nexport function getDateWithSkippedWeekend(\n  date: Date,\n  solveMode: 'after' | 'before',\n) {\n  if (d.isWeekend(date)) {\n    if (solveMode === 'after') {\n      return d.nextMonday(date);\n    } else if (solveMode === 'before') {\n      return d.previousFriday(date);\n    } else {\n      throw new Error('Unknown weekend solve mode, this should not happen!');\n    }\n  }\n  return date;\n}\n\nexport function getScheduledAmount(\n  amount: number | { num1: number; num2: number },\n  inverse: boolean = false,\n): number {\n  // this check is temporary, and required at the moment as a schedule rule\n  // allows the amount condition to be deleted which causes a crash\n  if (amount == null) return 0;\n\n  if (typeof amount === 'number') {\n    return inverse ? -amount : amount;\n  }\n  const avg = (amount.num1 + amount.num2) / 2;\n  return inverse ? -Math.round(avg) : Math.round(avg);\n}\n\nexport function describeSchedule(schedule, payee) {\n  if (payee) {\n    return `${payee.name} (${schedule.next_date})`;\n  } else {\n    return `${t('Next:')} ${schedule.next_date}`;\n  }\n}\n\nexport function getUpcomingDays(\n  upcomingLength = '7',\n  today = monthUtils.currentDay(), // for testability\n): number {\n  const month = monthUtils.getMonth(today);\n\n  switch (upcomingLength) {\n    case 'currentMonth': {\n      const day = monthUtils.getDay(today);\n      const end = monthUtils.getDay(monthUtils.getMonthEnd(today));\n      return end - day;\n    }\n    case 'oneMonth': {\n      return monthUtils.differenceInCalendarDays(\n        monthUtils.nextMonth(month),\n        month,\n      );\n    }\n    default:\n      if (upcomingLength.includes('-')) {\n        const [num, unit] = upcomingLength.split('-');\n        const value = Math.max(1, parseInt(num, 10));\n        switch (unit) {\n          case 'day':\n            return value;\n          case 'week':\n            return value * 7;\n          case 'month':\n            const future = monthUtils.addMonths(today, value);\n            return monthUtils.differenceInCalendarDays(future, month) + 1;\n          case 'year':\n            const futureYear = monthUtils.addYears(today, value);\n            return monthUtils.differenceInCalendarDays(futureYear, month) + 1;\n          default:\n            return 7;\n        }\n      }\n      return parseInt(upcomingLength, 10);\n  }\n}\n\nexport function scheduleIsRecurring(dateCond: Condition | null) {\n  if (!dateCond) {\n    return false;\n  }\n  const cond = new Condition(dateCond.op, 'date', dateCond.value, null);\n  const value = cond.getValue();\n\n  return value.type === 'recur';\n}\n","// @ts-strict-ignore\nimport * as dateFns from 'date-fns';\nimport {\n  addMonths,\n  addWeeks,\n  addYears,\n  subMonths,\n  subWeeks,\n  subYears,\n} from 'date-fns';\nimport * as Handlebars from 'handlebars';\n\nimport {\n  monthFromDate,\n  yearFromDate,\n  isBefore,\n  isAfter,\n  addDays,\n  subDays,\n  parseDate,\n  format,\n  currentDay,\n} from '../../shared/months';\nimport {\n  sortNumbers,\n  getApproxNumberThreshold,\n  isValidOp,\n  FIELD_TYPES,\n} from '../../shared/rules';\nimport { recurConfigToRSchedule } from '../../shared/schedules';\nimport {\n  addSplitTransaction,\n  groupTransaction,\n  recalculateSplit,\n  splitTransaction,\n  ungroupTransaction,\n} from '../../shared/transactions';\nimport { fastSetMerge } from '../../shared/util';\nimport { RuleConditionEntity, RuleEntity } from '../../types/models';\nimport { RuleError } from '../errors';\nimport { Schedule as RSchedule } from '../util/rschedule';\n\nfunction registerHandlebarsHelpers() {\n  const regexTest = /^\\/(.*)\\/([gimuy]*)$/;\n\n  function mathHelper(fn: (a: number, b: number) => number) {\n    return (a: unknown, ...b: unknown[]) => {\n      return b.map(Number).reduce(fn, Number(a));\n    };\n  }\n\n  function regexHelper(\n    mapRegex: (regex: string, flags: string) => string | RegExp,\n    mapNonRegex: (value: string) => string | RegExp,\n    apply: (value: string, regex: string | RegExp, replace: string) => string,\n  ) {\n    return (value: unknown, regex: unknown, replace: unknown) => {\n      if (value == null) {\n        return null;\n      }\n\n      if (typeof regex !== 'string' || typeof replace !== 'string') {\n        return '';\n      }\n\n      let regexp: string | RegExp;\n      const match = regexTest.exec(regex);\n      // Regex is in format /regex/flags\n      if (match) {\n        regexp = mapRegex(match[1], match[2]);\n      } else {\n        regexp = mapNonRegex(regex);\n      }\n\n      return apply(String(value), regexp, replace);\n    };\n  }\n\n  const helpers = {\n    regex: regexHelper(\n      (regex, flags) => new RegExp(regex, flags),\n      value => new RegExp(value),\n      (value, regex, replace) => value.replace(regex, replace),\n    ),\n    replace: regexHelper(\n      (regex, flags) => new RegExp(regex, flags),\n      value => value,\n      (value, regex, replace) => value.replace(regex, replace),\n    ),\n    replaceAll: regexHelper(\n      (regex, flags) => new RegExp(regex, flags),\n      value => value,\n      (value, regex, replace) => value.replaceAll(regex, replace),\n    ),\n    add: mathHelper((a, b) => a + b),\n    sub: mathHelper((a, b) => a - b),\n    div: mathHelper((a, b) => a / b),\n    mul: mathHelper((a, b) => a * b),\n    mod: mathHelper((a, b) => a % b),\n    floor: (a: unknown) => Math.floor(Number(a)),\n    ceil: (a: unknown) => Math.ceil(Number(a)),\n    round: (a: unknown) => Math.round(Number(a)),\n    abs: (a: unknown) => Math.abs(Number(a)),\n    min: mathHelper((a, b) => Math.min(a, b)),\n    max: mathHelper((a, b) => Math.max(a, b)),\n    fixed: (a: unknown, digits: unknown) => Number(a).toFixed(Number(digits)),\n    day: (date?: string) => date && format(date, 'd'),\n    month: (date?: string) => date && format(date, 'M'),\n    year: (date?: string) => date && format(date, 'yyyy'),\n    format: (date?: string, f?: string) => date && f && format(date, f),\n    addDays: (date?: string, days?: number) => {\n      if (!date || !days) return date;\n      return format(addDays(date, days), 'yyyy-MM-dd');\n    },\n    subDays: (date?: string, days?: number) => {\n      if (!date || !days) return date;\n      return format(subDays(date, days), 'yyyy-MM-dd');\n    },\n    addMonths: (date?: string, months?: number) => {\n      if (!date || !months) return date;\n      return format(addMonths(parseDate(date), months), 'yyyy-MM-dd');\n    },\n    subMonths: (date?: string, months?: number) => {\n      if (!date || !months) return date;\n      return format(subMonths(parseDate(date), months), 'yyyy-MM-dd');\n    },\n    addWeeks: (date?: string, weeks?: number) => {\n      if (!date || !weeks) return date;\n      return format(addWeeks(parseDate(date), weeks), 'yyyy-MM-dd');\n    },\n    subWeeks: (date?: string, weeks?: number) => {\n      if (!date || !weeks) return date;\n      return format(subWeeks(parseDate(date), weeks), 'yyyy-MM-dd');\n    },\n    addYears: (date?: string, years?: number) => {\n      if (!date || !years) return date;\n      return format(addYears(parseDate(date), years), 'yyyy-MM-dd');\n    },\n    subYears: (date?: string, years?: number) => {\n      if (!date || !years) return date;\n      return format(subYears(parseDate(date), years), 'yyyy-MM-dd');\n    },\n    setDay: (date?: string, day?: number) => {\n      if (!date) return date;\n      const actualDay = Number(format(date, 'd'));\n      return format(addDays(date, day - actualDay), 'yyyy-MM-dd');\n    },\n    debug: (value: unknown) => {\n      console.log(value);\n    },\n    concat: (...args: unknown[]) => args.join(''),\n  } as Record<string, Handlebars.HelperDelegate>;\n\n  for (const [name, fn] of Object.entries(helpers)) {\n    Handlebars.registerHelper(name, (...args: unknown[]) => {\n      //The last argument is the Handlebars options object\n      return fn(...args.slice(0, -1));\n    });\n  }\n}\n\nregisterHandlebarsHelpers();\n\nfunction assert(test: unknown, type: string, msg: string): asserts test {\n  if (!test) {\n    throw new RuleError(type, msg);\n  }\n}\n\nfunction parseRecurDate(desc) {\n  try {\n    const rules = recurConfigToRSchedule(desc);\n\n    return {\n      type: 'recur',\n      schedule: new RSchedule({\n        rrules: rules,\n        data: {\n          skipWeekend: desc.skipWeekend,\n          weekendSolve: desc.weekendSolveMode,\n        },\n      }),\n    };\n  } catch (e) {\n    throw new RuleError('parse-recur-date', e.message);\n  }\n}\n\nexport function parseDateString(str) {\n  if (typeof str !== 'string') {\n    return null;\n  } else if (str.length === 10) {\n    // YYYY-MM-DD\n    if (!dateFns.isValid(dateFns.parseISO(str))) {\n      return null;\n    }\n\n    return { type: 'date', date: str };\n  } else if (str.length === 7) {\n    // YYYY-MM\n    if (!dateFns.isValid(dateFns.parseISO(str + '-01'))) {\n      return null;\n    }\n\n    return { type: 'month', date: str };\n  } else if (str.length === 4) {\n    // YYYY\n    if (!dateFns.isValid(dateFns.parseISO(str + '-01-01'))) {\n      return null;\n    }\n\n    return { type: 'year', date: str };\n  }\n\n  return null;\n}\n\nfunction parseBetweenAmount(between) {\n  const { num1, num2 } = between;\n  if (typeof num1 !== 'number' || typeof num2 !== 'number') {\n    return null;\n  }\n  return { type: 'between', num1, num2 };\n}\n\nconst CONDITION_TYPES = {\n  date: {\n    ops: ['is', 'isapprox', 'gt', 'gte', 'lt', 'lte'],\n    nullable: false,\n    parse(op, value, fieldName) {\n      const parsed =\n        typeof value === 'string'\n          ? parseDateString(value)\n          : value.frequency != null\n            ? parseRecurDate(value)\n            : null;\n      assert(\n        parsed,\n        'date-format',\n        `Invalid date format (field: ${fieldName})`,\n      );\n\n      // Approximate only works with exact & recurring dates\n      if (op === 'isapprox') {\n        assert(\n          parsed.type === 'date' || parsed.type === 'recur',\n          'date-format',\n          `Invalid date value for “isapprox” (field: ${fieldName})`,\n        );\n      }\n      // These only work with exact dates\n      else if (op === 'gt' || op === 'gte' || op === 'lt' || op === 'lte') {\n        assert(\n          parsed.type === 'date',\n          'date-format',\n          `Invalid date value for “${op}” (field: ${fieldName})`,\n        );\n      }\n\n      return parsed;\n    },\n  },\n  id: {\n    ops: [\n      'is',\n      'contains',\n      'matches',\n      'oneOf',\n      'isNot',\n      'doesNotContain',\n      'notOneOf',\n      'and',\n      'onBudget',\n      'offBudget',\n    ],\n    nullable: true,\n    parse(op, value, fieldName) {\n      if (op === 'oneOf' || op === 'notOneOf' || op === 'and') {\n        assert(\n          Array.isArray(value),\n          'no-empty-array',\n          `oneOf must have an array value (field: ${fieldName})`,\n        );\n        return value;\n      }\n      return value;\n    },\n  },\n  string: {\n    ops: [\n      'is',\n      'contains',\n      'matches',\n      'oneOf',\n      'isNot',\n      'doesNotContain',\n      'notOneOf',\n      'hasTags',\n    ],\n    nullable: true,\n    parse(op, value, fieldName) {\n      if (op === 'oneOf' || op === 'notOneOf') {\n        assert(\n          Array.isArray(value),\n          'no-empty-array',\n          `oneOf must have an array value (field: ${fieldName}): ${JSON.stringify(\n            value,\n          )}`,\n        );\n        return value.filter(Boolean).map(val => val.toLowerCase());\n      }\n\n      assert(\n        typeof value === 'string',\n        'not-string',\n        `Invalid string value (field: ${fieldName})`,\n      );\n\n      if (\n        op === 'contains' ||\n        op === 'matches' ||\n        op === 'doesNotContain' ||\n        op === 'hasTags'\n      ) {\n        assert(\n          value.length > 0,\n          'no-empty-string',\n          `${op} must have non-empty string (field: ${fieldName})`,\n        );\n      }\n\n      return value.toLowerCase();\n    },\n  },\n  number: {\n    ops: ['is', 'isapprox', 'isbetween', 'gt', 'gte', 'lt', 'lte'],\n    nullable: false,\n    parse(op, value, fieldName) {\n      const parsed =\n        typeof value === 'number'\n          ? { type: 'literal', value }\n          : parseBetweenAmount(value);\n\n      assert(\n        parsed != null,\n        'not-number',\n        `Value must be a number or between amount: ${JSON.stringify(\n          value,\n        )} (field: ${fieldName})`,\n      );\n\n      if (op === 'isbetween') {\n        assert(\n          parsed.type === 'between',\n          'number-format',\n          `Invalid between value for “${op}” (field: ${fieldName})`,\n        );\n      } else {\n        assert(\n          parsed.type === 'literal',\n          'number-format',\n          `Invalid number value for “${op}” (field: ${fieldName})`,\n        );\n      }\n\n      return parsed;\n    },\n  },\n  boolean: {\n    ops: ['is'],\n    nullable: false,\n    parse(op, value, fieldName) {\n      assert(\n        typeof value === 'boolean',\n        'not-boolean',\n        `Value must be a boolean: ${value} (field: ${fieldName})`,\n      );\n\n      return value;\n    },\n  },\n};\n\nexport class Condition {\n  field;\n  op;\n  options;\n  rawValue;\n  type;\n  unparsedValue;\n  value;\n\n  constructor(op, field, value, options) {\n    const typeName = FIELD_TYPES.get(field);\n    assert(typeName, 'internal', 'Invalid condition field: ' + field);\n\n    const type = CONDITION_TYPES[typeName];\n\n    // It's important to validate rules because a faulty rule might mess\n    // up the user's transaction (and be very confusing)\n    assert(\n      type,\n      'internal',\n      `Invalid condition type: ${typeName} (field: ${field})`,\n    );\n    assert(\n      isValidOp(field, op),\n      'internal',\n      `Invalid condition operator: ${op} (type: ${typeName}, field: ${field})`,\n    );\n\n    if (type.nullable !== true) {\n      assert(value != null, 'no-null', `Field cannot be empty: ${field}`);\n    }\n\n    // For strings, an empty string is equal to null\n    if (typeName === 'string' && type.nullable !== true) {\n      assert(value !== '', 'no-null', `Field cannot be empty: ${field}`);\n    }\n\n    this.rawValue = value;\n    this.unparsedValue = value;\n    this.op = op;\n    this.field = field;\n    this.value = type.parse ? type.parse(op, value, field) : value;\n    this.options = options;\n    this.type = typeName;\n  }\n\n  eval(object) {\n    let fieldValue = object[this.field];\n    const type = this.type;\n\n    if (type === 'string') {\n      fieldValue ??= '';\n    }\n\n    if (fieldValue === undefined) {\n      return false;\n    }\n\n    if (typeof fieldValue === 'string') {\n      fieldValue = fieldValue.toLowerCase();\n    }\n\n    if (type === 'number' && this.options) {\n      if (this.options.outflow) {\n        if (fieldValue > 0) {\n          return false;\n        }\n\n        fieldValue = -fieldValue;\n      } else if (this.options.inflow) {\n        if (fieldValue < 0) {\n          return false;\n        }\n      }\n    }\n\n    const extractValue = v => (type === 'number' ? v.value : v);\n\n    switch (this.op) {\n      case 'isapprox':\n      case 'is':\n        if (type === 'date') {\n          if (fieldValue == null) {\n            return false;\n          }\n\n          if (this.value.type === 'recur') {\n            const { schedule } = this.value;\n            if (this.op === 'isapprox') {\n              const fieldDate = parseDate(fieldValue);\n              return schedule.occursBetween(\n                dateFns.subDays(fieldDate, 2),\n                dateFns.addDays(fieldDate, 2),\n              );\n            } else {\n              return schedule.occursOn({ date: parseDate(fieldValue) });\n            }\n          } else {\n            const { date } = this.value;\n\n            if (this.op === 'isapprox') {\n              const fullDate = parseDate(date);\n              const high = addDays(fullDate, 2);\n              const low = subDays(fullDate, 2);\n\n              return fieldValue >= low && fieldValue <= high;\n            } else {\n              switch (this.value.type) {\n                case 'date':\n                  return fieldValue === date;\n                case 'month':\n                  return monthFromDate(fieldValue) === date;\n                case 'year':\n                  return yearFromDate(fieldValue) === date;\n                default:\n              }\n            }\n          }\n        } else if (type === 'number') {\n          const number = this.value.value;\n          if (this.op === 'isapprox') {\n            const threshold = getApproxNumberThreshold(number);\n            return (\n              fieldValue >= number - threshold &&\n              fieldValue <= number + threshold\n            );\n          }\n          return fieldValue === number;\n        }\n        return fieldValue === this.value;\n\n      case 'isNot':\n        return fieldValue !== this.value;\n      case 'isbetween': {\n        // The parsing logic already checks that the value is of the\n        // right type (only numbers with high and low)\n        const [low, high] = sortNumbers(this.value.num1, this.value.num2);\n        return fieldValue >= low && fieldValue <= high;\n      }\n      case 'contains':\n        if (fieldValue === null) {\n          return false;\n        }\n        return String(fieldValue).indexOf(this.value) !== -1;\n      case 'doesNotContain':\n        if (fieldValue === null) {\n          return false;\n        }\n        return String(fieldValue).indexOf(this.value) === -1;\n      case 'oneOf':\n        if (fieldValue === null) {\n          return false;\n        }\n        return this.value.indexOf(fieldValue) !== -1;\n\n      case 'hasTags':\n        if (fieldValue === null) {\n          return false;\n        }\n        return String(fieldValue).indexOf(this.value) !== -1;\n\n      case 'notOneOf':\n        if (fieldValue === null) {\n          return false;\n        }\n        return this.value.indexOf(fieldValue) === -1;\n      case 'gt':\n        if (fieldValue === null) {\n          return false;\n        } else if (type === 'date') {\n          return isAfter(fieldValue, this.value.date);\n        }\n\n        return fieldValue > extractValue(this.value);\n      case 'gte':\n        if (fieldValue === null) {\n          return false;\n        } else if (type === 'date') {\n          return (\n            fieldValue === this.value.date ||\n            isAfter(fieldValue, this.value.date)\n          );\n        }\n\n        return fieldValue >= extractValue(this.value);\n      case 'lt':\n        if (fieldValue === null) {\n          return false;\n        } else if (type === 'date') {\n          return isBefore(fieldValue, this.value.date);\n        }\n        return fieldValue < extractValue(this.value);\n      case 'lte':\n        if (fieldValue === null) {\n          return false;\n        } else if (type === 'date') {\n          return (\n            fieldValue === this.value.date ||\n            isBefore(fieldValue, this.value.date)\n          );\n        }\n        return fieldValue <= extractValue(this.value);\n      case 'matches':\n        if (fieldValue === null) {\n          return false;\n        }\n        try {\n          return new RegExp(this.value).test(fieldValue);\n        } catch (e) {\n          console.log('invalid regexp in matches condition', e);\n          return false;\n        }\n\n      case 'onBudget':\n        if (!object._account) {\n          return false;\n        }\n\n        return object._account.offbudget === 0;\n\n      case 'offBudget':\n        if (!object._account) {\n          return false;\n        }\n\n        return object._account.offbudget === 1;\n\n      default:\n    }\n\n    return false;\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  serialize() {\n    return {\n      op: this.op,\n      field: this.field,\n      value: this.unparsedValue,\n      type: this.type,\n      ...(this.options ? { options: this.options } : null),\n    };\n  }\n}\n\nconst ACTION_OPS = [\n  'set',\n  'set-split-amount',\n  'link-schedule',\n  'prepend-notes',\n  'append-notes',\n] as const;\ntype ActionOperator = (typeof ACTION_OPS)[number];\n\nexport class Action {\n  field;\n  op: ActionOperator;\n  options;\n  rawValue;\n  type;\n  value;\n\n  private handlebarsTemplate?: Handlebars.TemplateDelegate;\n\n  constructor(op: ActionOperator, field, value, options) {\n    assert(\n      ACTION_OPS.includes(op),\n      'internal',\n      `Invalid action operation: ${op}`,\n    );\n\n    if (op === 'set') {\n      const typeName = FIELD_TYPES.get(field);\n      assert(typeName, 'internal', `Invalid field for action: ${field}`);\n      this.field = field;\n      this.type = typeName;\n      if (options?.template) {\n        this.handlebarsTemplate = Handlebars.compile(options.template, {\n          noEscape: true,\n        });\n        try {\n          this.handlebarsTemplate({});\n        } catch (e) {\n          console.debug(e);\n          assert(false, 'invalid-template', `Invalid Handlebars template`);\n        }\n      }\n    } else if (op === 'set-split-amount') {\n      this.field = null;\n      this.type = 'number';\n    } else if (op === 'link-schedule') {\n      this.field = null;\n      this.type = 'id';\n    } else if (op === 'prepend-notes' || op === 'append-notes') {\n      this.field = 'notes';\n      this.type = 'id';\n    }\n\n    if (field === 'account') {\n      assert(value, 'no-null', `Field cannot be empty: ${field}`);\n    }\n\n    this.op = op;\n    this.rawValue = value;\n    this.value = value;\n    this.options = options;\n  }\n\n  exec(object) {\n    switch (this.op) {\n      case 'set':\n        if (this.handlebarsTemplate) {\n          object[this.field] = this.handlebarsTemplate({\n            ...object,\n            today: currentDay(),\n          });\n\n          // Handlebars always returns a string, so we need to convert\n          switch (this.type) {\n            case 'number':\n              object[this.field] = parseFloat(object[this.field]);\n              break;\n            case 'date':\n              const parsed = parseDate(object[this.field]);\n              if (parsed && dateFns.isValid(parsed)) {\n                object[this.field] = format(parsed, 'yyyy-MM-dd');\n              } else {\n                // Keep original string; log for diagnostics but avoid hard crash\n                console.error(\n                  `rules: invalid date produced by template for field “${this.field}”:`,\n                  object[this.field],\n                );\n                // Make it stick like a sore thumb\n                object[this.field] = '9999-12-31';\n              }\n              break;\n            case 'boolean':\n              object[this.field] = object[this.field] === 'true';\n              break;\n          }\n        } else {\n          object[this.field] = this.value;\n        }\n\n        if (this.field === 'payee_name') {\n          object['payee'] = 'new';\n        }\n        break;\n      case 'set-split-amount':\n        switch (this.options.method) {\n          case 'fixed-amount':\n            object.amount = this.value;\n            break;\n          default:\n        }\n        break;\n      case 'link-schedule':\n        object.schedule = this.value;\n        break;\n      case 'prepend-notes':\n        object[this.field] = object[this.field]\n          ? this.value + object[this.field]\n          : this.value;\n        break;\n      case 'append-notes':\n        object[this.field] = object[this.field]\n          ? object[this.field] + this.value\n          : this.value;\n        break;\n      default:\n    }\n  }\n\n  serialize() {\n    return {\n      op: this.op,\n      field: this.field,\n      value: this.value,\n      type: this.type,\n      ...(this.options ? { options: this.options } : null),\n    };\n  }\n}\n\nfunction execNonSplitActions(actions: Action[], transaction) {\n  const update = transaction;\n  actions.forEach(action => action.exec(update));\n  return update;\n}\n\nfunction getSplitRemainder(transactions) {\n  const { error } = recalculateSplit(groupTransaction(transactions));\n  return error ? error.difference : 0;\n}\n\nfunction execSplitActions(actions: Action[], transaction) {\n  const splitAmountActions = actions.filter(\n    action => action.op === 'set-split-amount',\n  );\n\n  // Convert the transaction to a split transaction.\n  const { data } = splitTransaction(\n    ungroupTransaction(transaction),\n    transaction.id,\n  );\n  let newTransactions = data;\n\n  // Add empty splits, and apply non-set-amount actions.\n  // This also populates any fixed-amount splits.\n  actions.forEach(action => {\n    const splitTransactionIndex = (action.options?.splitIndex ?? 0) + 1;\n    if (splitTransactionIndex >= newTransactions.length) {\n      const { data } = addSplitTransaction(newTransactions, transaction.id);\n      newTransactions = data;\n    }\n    action.exec(newTransactions[splitTransactionIndex]);\n  });\n\n  // Distribute to fixed-percent splits.\n  const remainingAfterFixedAmounts = getSplitRemainder(newTransactions);\n  splitAmountActions\n    .filter(action => action.options.method === 'fixed-percent')\n    .forEach(action => {\n      const splitTransactionIndex = (action.options?.splitIndex ?? 0) + 1;\n      const percent = action.value / 100;\n      const amount = Math.round(remainingAfterFixedAmounts * percent);\n      newTransactions[splitTransactionIndex].amount = amount;\n    });\n\n  // Distribute to remainder splits.\n  const remainderActions = splitAmountActions.filter(\n    action => action.options.method === 'remainder',\n  );\n  const remainingAfterFixedPercents = getSplitRemainder(newTransactions);\n  if (remainderActions.length !== 0) {\n    const amountPerRemainderSplit = Math.round(\n      remainingAfterFixedPercents / remainderActions.length,\n    );\n    let lastNonFixedTransactionIndex = -1;\n    remainderActions.forEach(action => {\n      const splitTransactionIndex = (action.options?.splitIndex ?? 0) + 1;\n      newTransactions[splitTransactionIndex].amount = amountPerRemainderSplit;\n      lastNonFixedTransactionIndex = Math.max(\n        lastNonFixedTransactionIndex,\n        splitTransactionIndex,\n      );\n    });\n\n    // The last remainder split will be adjusted for any leftovers from rounding.\n    newTransactions[lastNonFixedTransactionIndex].amount +=\n      getSplitRemainder(newTransactions);\n  }\n\n  // The split index 0 (transaction index 1) is reserved for \"Apply to all\" actions.\n  // Remove that entry from the transaction list.\n  newTransactions.splice(1, 1);\n  return recalculateSplit(groupTransaction(newTransactions));\n}\n\nexport function execActions(actions: Action[], transaction) {\n  const parentActions = actions.filter(action => !action.options?.splitIndex);\n  const childActions = actions.filter(action => action.options?.splitIndex);\n  const totalSplitCount =\n    actions.reduce(\n      (prev, cur) => Math.max(prev, cur.options?.splitIndex ?? 0),\n      0,\n    ) + 1;\n\n  const nonSplitResult = execNonSplitActions(parentActions, transaction);\n  if (totalSplitCount === 1) {\n    // No splits, no need to do anything else.\n    return nonSplitResult;\n  }\n\n  if (nonSplitResult.is_child) {\n    // Rules with splits can't be applied to child transactions.\n    return nonSplitResult;\n  }\n\n  return execSplitActions(childActions, nonSplitResult);\n}\n\nexport class Rule {\n  actions: Action[];\n  conditions: Condition[];\n  conditionsOp;\n  id?: string;\n  stage: 'pre' | null | 'post';\n\n  constructor({\n    id,\n    stage,\n    conditionsOp,\n    conditions,\n    actions,\n  }: {\n    id?: string;\n    stage?: 'pre' | null | 'post';\n    conditionsOp;\n    conditions;\n    actions;\n  }) {\n    this.id = id;\n    this.stage = stage ?? null;\n    this.conditionsOp = conditionsOp;\n    this.conditions = conditions.map(\n      c => new Condition(c.op, c.field, c.value, c.options),\n    );\n    this.actions = actions.map(\n      a => new Action(a.op, a.field, a.value, a.options),\n    );\n  }\n\n  evalConditions(object): boolean {\n    if (this.conditions.length === 0) {\n      return false;\n    }\n\n    const method = this.conditionsOp === 'or' ? 'some' : 'every';\n    return this.conditions[method](condition => {\n      return condition.eval(object);\n    });\n  }\n\n  execActions<T>(object: T): Partial<T> {\n    const result = execActions(this.actions, {\n      ...object,\n    });\n    const changes = Object.keys(result).reduce((prev, cur) => {\n      if (result[cur] !== object[cur]) {\n        prev[cur] = result[cur];\n      }\n      return prev;\n    }, {} as T);\n    return changes;\n  }\n\n  exec(object) {\n    if (this.evalConditions(object)) {\n      return this.execActions(object);\n    }\n    return null;\n  }\n\n  // Apply is similar to exec but applies the changes for you\n  apply(object) {\n    const changes = this.exec(object);\n    return Object.assign({}, object, changes);\n  }\n\n  getId(): string | undefined {\n    return this.id;\n  }\n\n  serialize(): RuleEntity {\n    return {\n      id: this.id,\n      stage: this.stage,\n      conditionsOp: this.conditionsOp,\n      conditions: this.conditions.map(c => c.serialize()),\n      actions: this.actions.map(a => a.serialize()),\n    };\n  }\n}\n\nexport class RuleIndexer {\n  field: string;\n  method?: string;\n  rules: Map<string, Set<Rule>>;\n\n  constructor({ field, method }: { field: string; method?: string }) {\n    this.field = field;\n    this.method = method;\n    this.rules = new Map();\n  }\n\n  getIndex(key: string | null): Set<Rule> {\n    if (!this.rules.has(key)) {\n      this.rules.set(key, new Set());\n    }\n    return this.rules.get(key);\n  }\n\n  getIndexForValue(value: unknown): Set<Rule> {\n    return this.getIndex(this.getKey(value) || '*');\n  }\n\n  getKey(value: unknown): string | null {\n    if (typeof value === 'string' && value !== '') {\n      if (this.method === 'firstchar') {\n        return value[0].toLowerCase();\n      }\n      return value.toLowerCase();\n    }\n    return null;\n  }\n\n  getIndexes(rule: Rule): Set<Rule>[] {\n    const cond = rule.conditions.find(cond => cond.field === this.field);\n    const indexes = [];\n\n    if (\n      cond &&\n      (cond.op === 'oneOf' ||\n        cond.op === 'is' ||\n        cond.op === 'isNot' ||\n        cond.op === 'notOneOf')\n    ) {\n      if (cond.op === 'oneOf' || cond.op === 'notOneOf') {\n        cond.value.forEach(val => indexes.push(this.getIndexForValue(val)));\n      } else {\n        indexes.push(this.getIndexForValue(cond.value));\n      }\n    } else {\n      indexes.push(this.getIndex('*'));\n    }\n\n    return indexes;\n  }\n\n  index(rule: Rule): void {\n    const indexes = this.getIndexes(rule);\n    indexes.forEach(index => {\n      index.add(rule);\n    });\n  }\n\n  remove(rule: Rule): void {\n    const indexes = this.getIndexes(rule);\n    indexes.forEach(index => {\n      index.delete(rule);\n    });\n  }\n\n  getApplicableRules(object): Set<Rule> {\n    let indexedRules;\n    if (this.field in object) {\n      const key = this.getKey(object[this.field]);\n      if (key) {\n        indexedRules = this.rules.get(key);\n      }\n    }\n\n    return fastSetMerge(\n      indexedRules || new Set(),\n      this.rules.get('*') || new Set(),\n    );\n  }\n}\n\nconst OP_SCORES: Record<RuleConditionEntity['op'], number> = {\n  is: 10,\n  isNot: 10,\n  oneOf: 9,\n  notOneOf: 9,\n  isapprox: 5,\n  isbetween: 5,\n  gt: 1,\n  gte: 1,\n  lt: 1,\n  lte: 1,\n  contains: 0,\n  doesNotContain: 0,\n  matches: 0,\n  hasTags: 0,\n  onBudget: 0,\n  offBudget: 0,\n};\n\nfunction computeScore(rule: Rule): number {\n  const initialScore = rule.conditions.reduce((score, condition) => {\n    if (OP_SCORES[condition.op] == null) {\n      console.log(`Found invalid operation while ranking: ${condition.op}`);\n      return 0;\n    }\n\n    return score + OP_SCORES[condition.op];\n  }, 0);\n\n  if (\n    rule.conditions.every(\n      cond =>\n        cond.op === 'is' ||\n        cond.op === 'isNot' ||\n        cond.op === 'isapprox' ||\n        cond.op === 'oneOf' ||\n        cond.op === 'notOneOf',\n    )\n  ) {\n    return initialScore * 2;\n  }\n  return initialScore;\n}\n\nfunction _rankRules(rules: Rule[]): Rule[] {\n  const scores = new Map();\n  rules.forEach(rule => {\n    scores.set(rule, computeScore(rule));\n  });\n\n  // No matter the order of rules, this must always return exactly the same\n  // order. That's why rules have ids: if two rules have the same score, it\n  // sorts by id\n  return [...rules].sort((r1, r2) => {\n    const score1 = scores.get(r1);\n    const score2 = scores.get(r2);\n    if (score1 < score2) {\n      return -1;\n    } else if (score1 > score2) {\n      return 1;\n    } else {\n      const id1 = r1.getId();\n      const id2 = r2.getId();\n      return id1 < id2 ? -1 : id1 > id2 ? 1 : 0;\n    }\n  });\n}\n\nexport function rankRules(rules: Iterable<Rule>): Rule[] {\n  let pre = [];\n  let normal = [];\n  let post = [];\n\n  for (const rule of rules) {\n    switch (rule.stage) {\n      case 'pre':\n        pre.push(rule);\n        break;\n      case 'post':\n        post.push(rule);\n        break;\n      default:\n        normal.push(rule);\n    }\n  }\n\n  pre = _rankRules(pre);\n  normal = _rankRules(normal);\n  post = _rankRules(post);\n\n  return pre.concat(normal).concat(post);\n}\n\nexport function migrateIds(rule: Rule, mappings: Map<string, string>): void {\n  // Go through the in-memory rules and patch up ids that have been\n  // \"migrated\" to other ids. This is a little tricky, but a lot\n  // easier than trying to keep an up-to-date mapping in the db. This\n  // is necessary because ids can be transparently mapped as items are\n  // merged/deleted in the system.\n  //\n  // It's very important here that we look at `rawValue` specifically,\n  // and only apply the patches to the other `value` fields. We always\n  // need to keep the original id around because undo can walk\n  // backwards, and we need to be able to consistently apply a\n  // \"projection\" of these mapped values. For example: if we have ids\n  // [1, 2] and applying mappings transforms it to [2, 2], if `1` gets\n  // mapped to something else there's no way to no to map *only* the\n  // first id back to make [1, 2]. Keeping the original value around\n  // solves this.\n  for (let ci = 0; ci < rule.conditions.length; ci++) {\n    const cond = rule.conditions[ci];\n    if (cond.type === 'id') {\n      switch (cond.op) {\n        case 'is':\n          cond.value = mappings.get(cond.rawValue) || cond.rawValue;\n          cond.unparsedValue = cond.value;\n          break;\n        case 'isNot':\n          cond.value = mappings.get(cond.rawValue) || cond.rawValue;\n          cond.unparsedValue = cond.value;\n          break;\n        case 'oneOf':\n          cond.value = cond.rawValue.map(v => mappings.get(v) || v);\n          cond.unparsedValue = [...cond.value];\n          break;\n        case 'notOneOf':\n          cond.value = cond.rawValue.map(v => mappings.get(v) || v);\n          cond.unparsedValue = [...cond.value];\n          break;\n        default:\n      }\n    }\n  }\n\n  for (let ai = 0; ai < rule.actions.length; ai++) {\n    const action = rule.actions[ai];\n    if (action.type === 'id') {\n      if (action.op === 'set') {\n        action.value = mappings.get(action.rawValue) || action.rawValue;\n      }\n    }\n  }\n}\n\n// This finds all the rules that reference the `id`\nexport function iterateIds(\n  rules: Rule[],\n  fieldName: string,\n  func: (rule: Rule, id: string) => void | boolean,\n): void {\n  let i;\n\n  ruleiter: for (i = 0; i < rules.length; i++) {\n    const rule = rules[i];\n    for (let ci = 0; ci < rule.conditions.length; ci++) {\n      const cond = rule.conditions[ci];\n      if (cond.type === 'id' && cond.field === fieldName) {\n        switch (cond.op) {\n          case 'is':\n            if (func(rule, cond.value)) {\n              continue ruleiter;\n            }\n            break;\n          case 'isNot':\n            if (func(rule, cond.value)) {\n              continue ruleiter;\n            }\n            break;\n          case 'oneOf':\n            for (let vi = 0; vi < cond.value.length; vi++) {\n              if (func(rule, cond.value[vi])) {\n                continue ruleiter;\n              }\n            }\n            break;\n          case 'notOneOf':\n            for (let vi = 0; vi < cond.value.length; vi++) {\n              if (func(rule, cond.value[vi])) {\n                continue ruleiter;\n              }\n            }\n            break;\n          default:\n        }\n      }\n    }\n\n    for (let ai = 0; ai < rule.actions.length; ai++) {\n      const action = rule.actions[ai];\n      if (action.type === 'id' && action.field === fieldName) {\n        // Currently `set` is the only op, but if we add more this\n        // will need to be extended\n        if (action.op === 'set') {\n          if (func(rule, action.value)) {\n            break;\n          }\n        }\n      }\n    }\n  }\n}\n","// @ts-strict-ignore\n\nimport {\n  currentDay,\n  addDays,\n  subDays,\n  parseDate,\n  dayFromDate,\n} from '../../shared/months';\nimport { sortNumbers, getApproxNumberThreshold } from '../../shared/rules';\nimport { ungroupTransaction } from '../../shared/transactions';\nimport { partitionByField, fastSetMerge } from '../../shared/util';\nimport {\n  type TransactionEntity,\n  type RuleActionEntity,\n  type RuleEntity,\n} from '../../types/models';\nimport { schemaConfig } from '../aql';\nimport * as db from '../db';\nimport { getPayee, getPayeeByName, insertPayee, getAccount } from '../db';\nimport { getMappings } from '../db/mappings';\nimport { RuleError } from '../errors';\nimport { requiredFields, toDateRepr } from '../models';\nimport {\n  Condition,\n  Action,\n  Rule,\n  RuleIndexer,\n  rankRules,\n  migrateIds,\n  iterateIds,\n  execActions,\n} from '../rules';\nimport { batchMessages, addSyncListener } from '../sync';\n\nimport { batchUpdateTransactions } from '.';\n\n// TODO: Detect if it looks like the user is creating a rename rule\n// and prompt to create it in the pre phase instead\n// * We could also make the \"create rule\" button a dropdown that\n//   provides different \"templates\" like \"create renaming rule\"\n\nexport { iterateIds } from '../rules';\n\nlet allRules;\nlet unlistenSync;\nlet firstcharIndexer;\nlet payeeIndexer;\n\nexport function resetState() {\n  allRules = new Map();\n  firstcharIndexer = new RuleIndexer({\n    field: 'imported_payee',\n    method: 'firstchar',\n  });\n  payeeIndexer = new RuleIndexer({ field: 'payee' });\n}\n\n// Database functions\n\nfunction invert(obj) {\n  return Object.fromEntries(\n    Object.entries(obj).map(entry => {\n      return [entry[1], entry[0]];\n    }),\n  );\n}\n\nconst internalFields = schemaConfig.views.transactions.fields;\nconst publicFields = invert(schemaConfig.views.transactions.fields);\n\nfunction fromInternalField<T extends { field: string }>(obj: T): T {\n  return {\n    ...obj,\n    field: publicFields[obj.field] || obj.field,\n  };\n}\n\nfunction toInternalField<T extends { field: string }>(obj: T): T {\n  return {\n    ...obj,\n    field: internalFields[obj.field] || obj.field,\n  };\n}\n\nfunction parseArray(str) {\n  let value;\n  try {\n    value = typeof str === 'string' ? JSON.parse(str) : str;\n  } catch (e) {\n    throw new RuleError('internal', 'Cannot parse rule json');\n  }\n\n  if (!Array.isArray(value)) {\n    throw new RuleError('internal', 'Rule json must be an array');\n  }\n  return value;\n}\n\nexport function parseConditionsOrActions(str) {\n  return str ? parseArray(str).map(item => fromInternalField(item)) : [];\n}\n\nexport function serializeConditionsOrActions(arr) {\n  return JSON.stringify(arr.map(item => toInternalField(item)));\n}\n\nexport const ruleModel = {\n  validate(rule, { update }: { update?: boolean } = {}) {\n    requiredFields('rules', rule, ['conditions', 'actions'], update);\n\n    if (!update || 'stage' in rule) {\n      if (\n        rule.stage !== 'pre' &&\n        rule.stage !== 'post' &&\n        rule.stage !== null\n      ) {\n        throw new Error('Invalid rule stage: ' + rule.stage);\n      }\n    }\n    if (!update || 'conditionsOp' in rule) {\n      if (!['and', 'or'].includes(rule.conditionsOp)) {\n        throw new Error('Invalid rule conditionsOp: ' + rule.conditionsOp);\n      }\n    }\n\n    return rule;\n  },\n\n  toJS(row) {\n    const { conditions, conditions_op, actions, ...fields } = row;\n    return {\n      ...fields,\n      conditionsOp: conditions_op,\n      conditions: parseConditionsOrActions(conditions),\n      actions: parseConditionsOrActions(actions),\n    };\n  },\n\n  fromJS(rule) {\n    const { conditions, conditionsOp, actions, ...row } = rule;\n    if (conditionsOp) {\n      row.conditions_op = conditionsOp;\n    }\n    if (Array.isArray(conditions)) {\n      row.conditions = serializeConditionsOrActions(conditions);\n    }\n    if (Array.isArray(actions)) {\n      row.actions = serializeConditionsOrActions(actions);\n    }\n    return row;\n  },\n};\n\nexport function makeRule(data) {\n  let rule;\n  try {\n    rule = new Rule(ruleModel.toJS(data));\n  } catch (e) {\n    console.warn('Invalid rule', e);\n    if (e instanceof RuleError) {\n      return null;\n    }\n    throw e;\n  }\n\n  // This is needed because we map ids on the fly, and they might\n  // not be persisted into the db. Mappings allow items to\n  // transparently merge with other items\n  migrateIds(rule, getMappings());\n\n  return rule;\n}\n\nexport async function loadRules() {\n  resetState();\n\n  const rules = await db.all<db.DbRule>(`\n    SELECT * FROM rules\n      WHERE conditions IS NOT NULL AND actions IS NOT NULL AND tombstone = 0\n  `);\n\n  for (let i = 0; i < rules.length; i++) {\n    const desc = rules[i];\n    // These are old stages, can be removed before release\n    if (desc.stage === 'cleanup' || desc.stage === 'modify') {\n      desc.stage = 'pre';\n    }\n\n    const rule = makeRule(desc);\n    if (rule) {\n      allRules.set(rule.id, rule);\n      firstcharIndexer.index(rule);\n      payeeIndexer.index(rule);\n    }\n  }\n\n  if (unlistenSync) {\n    unlistenSync();\n  }\n  unlistenSync = addSyncListener(onApplySync);\n}\n\nexport function getRules() {\n  // This can simply return the in-memory data\n  return [...allRules.values()];\n}\n\nexport async function insertRule(\n  rule: Omit<RuleEntity, 'id'> & { id?: string },\n) {\n  rule = ruleModel.validate(rule);\n  return db.insertWithUUID('rules', ruleModel.fromJS(rule));\n}\n\nexport async function updateRule(rule) {\n  rule = ruleModel.validate(rule, { update: true });\n  return db.update('rules', ruleModel.fromJS(rule));\n}\n\nexport async function deleteRule(id: string) {\n  const schedule = await db.first<Pick<db.DbSchedule, 'id'>>(\n    'SELECT id FROM schedules WHERE rule = ?',\n    [id],\n  );\n\n  if (schedule) {\n    return false;\n  }\n\n  await db.delete_('rules', id);\n  return true;\n}\n\n// Sync projections\n\nfunction onApplySync(oldValues, newValues) {\n  newValues.forEach((items, table) => {\n    if (table === 'rules') {\n      items.forEach(newValue => {\n        const oldRule = allRules.get(newValue.id);\n\n        if (newValue.tombstone === 1) {\n          // Deleted, need to remove it from in-memory\n          const rule = allRules.get(newValue.id);\n          if (rule) {\n            allRules.delete(rule.getId());\n            firstcharIndexer.remove(rule);\n            payeeIndexer.remove(rule);\n          }\n        } else {\n          // Inserted/updated\n          const rule = makeRule(newValue);\n          if (rule) {\n            if (oldRule) {\n              firstcharIndexer.remove(oldRule);\n              payeeIndexer.remove(oldRule);\n            }\n            allRules.set(newValue.id, rule);\n            firstcharIndexer.index(rule);\n            payeeIndexer.index(rule);\n          }\n        }\n      });\n    }\n  });\n\n  // If any of the mapping tables have changed, we need to refresh the\n  // ids\n  const tables = [...newValues.keys()];\n  if (tables.find(table => table.indexOf('mapping') !== -1)) {\n    getRules().forEach(rule => {\n      migrateIds(rule, getMappings());\n    });\n  }\n}\n\n// Runner\nexport async function runRules(\n  trans,\n  accounts: Map<string, db.DbAccount> | null = null,\n) {\n  let accountsMap = null;\n  if (accounts === null) {\n    accountsMap = new Map(\n      (await db.getAccounts()).map(account => [account.id, account]),\n    );\n  } else {\n    accountsMap = accounts;\n  }\n\n  let finalTrans = await prepareTransactionForRules({ ...trans }, accountsMap);\n\n  const rules = rankRules(\n    fastSetMerge(\n      firstcharIndexer.getApplicableRules(trans),\n      payeeIndexer.getApplicableRules(trans),\n    ),\n  );\n\n  for (let i = 0; i < rules.length; i++) {\n    finalTrans = rules[i].apply(finalTrans);\n  }\n\n  return await finalizeTransactionForRules(finalTrans);\n}\n\nfunction conditionSpecialCases(cond: Condition | null): Condition | null {\n  if (!cond) {\n    return cond;\n  }\n\n  //special cases that require multiple conditions\n  if (cond.op === 'is' && cond.field === 'category' && cond.value === null) {\n    return new Condition(\n      'and',\n      cond.field,\n      [\n        cond,\n        new Condition('is', 'transfer', false, null),\n        new Condition('is', 'parent', false, null),\n      ],\n      {},\n    );\n  } else if (\n    cond.op === 'isNot' &&\n    cond.field === 'category' &&\n    cond.value === null\n  ) {\n    return new Condition(\n      'and',\n      cond.field,\n      [cond, new Condition('is', 'parent', false, null)],\n      {},\n    );\n  }\n  return cond;\n}\n\n// This does the inverse: finds all the transactions matching a rule\nexport function conditionsToAQL(\n  conditions,\n  { recurDateBounds = 100, applySpecialCases = true } = {},\n) {\n  const errors = [];\n\n  conditions = conditions\n    .map(cond => {\n      if (cond instanceof Condition) {\n        return cond;\n      }\n\n      try {\n        return new Condition(cond.op, cond.field, cond.value, cond.options);\n      } catch (e) {\n        errors.push(e.type || 'internal');\n        console.log('conditionsToAQL: invalid condition: ' + e.message);\n        return null;\n      }\n    })\n    .map(cond => (applySpecialCases ? conditionSpecialCases(cond) : cond))\n    .filter(Boolean);\n\n  // rule -> actualql\n  const mapConditionToActualQL = cond => {\n    const { type, options } = cond;\n    let { field, op, value } = cond;\n\n    const getValue = value => {\n      if (type === 'number') {\n        return value.value;\n      }\n      return value;\n    };\n\n    if (field === 'transfer' && op === 'is') {\n      field = 'transfer_id';\n      if (value) {\n        op = 'isNot';\n        value = null;\n      } else {\n        value = null;\n      }\n    } else if (field === 'parent' && op === 'is') {\n      field = 'is_parent';\n      if (value) {\n        op = 'true';\n      } else {\n        op = 'false';\n      }\n    }\n\n    const apply = (field, op, value) => {\n      if (type === 'number') {\n        if (options) {\n          if (options.outflow) {\n            return {\n              $and: [\n                { amount: { $lt: 0 } },\n                { [field]: { $transform: '$neg', [op]: value } },\n              ],\n            };\n          } else if (options.inflow) {\n            return {\n              $and: [{ amount: { $gt: 0 } }, { [field]: { [op]: value } }],\n            };\n          }\n        }\n\n        return { amount: { [op]: value } };\n      } else if (type === 'string') {\n        return { [field]: { $transform: '$lower', [op]: value } };\n      } else if (type === 'date') {\n        return { [field]: { [op]: value.date } };\n      }\n      return { [field]: { [op]: value } };\n    };\n\n    switch (op) {\n      case 'isapprox':\n      case 'is':\n        if (type === 'date') {\n          if (value.type === 'recur') {\n            const dates = value.schedule\n              .occurrences({ take: recurDateBounds })\n              .toArray()\n              .map(d => dayFromDate(d.date));\n\n            return {\n              $or: dates.map(d => {\n                if (op === 'isapprox') {\n                  return {\n                    $and: [\n                      { date: { $gte: subDays(d, 2) } },\n                      { date: { $lte: addDays(d, 2) } },\n                    ],\n                  };\n                }\n                return { date: d };\n              }),\n            };\n          } else {\n            if (op === 'isapprox') {\n              const fullDate = parseDate(value.date);\n              const high = addDays(fullDate, 2);\n              const low = subDays(fullDate, 2);\n\n              return {\n                $and: [{ date: { $gte: low } }, { date: { $lte: high } }],\n              };\n            } else {\n              switch (value.type) {\n                case 'date':\n                  return { date: value.date };\n                case 'month': {\n                  const low = value.date + '-00';\n                  const high = value.date + '-99';\n                  return {\n                    $and: [{ date: { $gte: low } }, { date: { $lte: high } }],\n                  };\n                }\n                case 'year': {\n                  const low = value.date + '-00-00';\n                  const high = value.date + '-99-99';\n                  return {\n                    $and: [{ date: { $gte: low } }, { date: { $lte: high } }],\n                  };\n                }\n                default:\n              }\n            }\n          }\n        } else if (type === 'number') {\n          const number = value.value;\n          if (op === 'isapprox') {\n            const threshold = getApproxNumberThreshold(number);\n\n            return {\n              $and: [\n                apply(field, '$gte', number - threshold),\n                apply(field, '$lte', number + threshold),\n              ],\n            };\n          }\n          return apply(field, '$eq', number);\n        } else if (type === 'string') {\n          if (value === '') {\n            return {\n              $or: [apply(field, '$eq', null), apply(field, '$eq', '')],\n            };\n          }\n        }\n        return apply(field, '$eq', value);\n      case 'isNot':\n        return apply(field, '$ne', value);\n\n      case 'isbetween':\n        // This operator is only applicable to the specific `between`\n        // number type so we don't use `apply`\n        const [low, high] = sortNumbers(value.num1, value.num2);\n        return {\n          [field]: [{ $gte: low }, { $lte: high }],\n        };\n      case 'contains':\n        // Running contains with id will automatically reach into\n        // the `name` of the referenced table and do a string match\n        return apply(\n          type === 'id' ? field + '.name' : field,\n          '$like',\n          '%' + value + '%',\n        );\n      case 'matches':\n        // Running contains with id will automatically reach into\n        // the `name` of the referenced table and do a regex match\n        return apply(type === 'id' ? field + '.name' : field, '$regexp', value);\n      case 'doesNotContain':\n        // Running contains with id will automatically reach into\n        // the `name` of the referenced table and do a string match\n        return apply(\n          type === 'id' ? field + '.name' : field,\n          '$notlike',\n          '%' + value + '%',\n        );\n      case 'oneOf':\n        const values = value;\n        if (values.length === 0) {\n          // This forces it to match nothing\n          return { id: null };\n        }\n        return { $or: values.map(v => apply(field, '$eq', v)) };\n\n      case 'hasTags':\n        const words = value.split(/\\s+/);\n        const tagValues = [];\n        words.forEach(word => {\n          const startsWithHash = word.startsWith('#');\n          const containsMultipleHash = word.slice(1).includes('#');\n          const correctlyFormatted = word.match(/#[\\w\\d\\p{Emoji}-]+/gu);\n          const validHashtag =\n            startsWithHash && !containsMultipleHash && correctlyFormatted;\n\n          if (validHashtag) {\n            tagValues.push(word);\n          }\n        });\n\n        return {\n          $and: tagValues.map(v => {\n            const regex = new RegExp(\n              `(^|\\\\s)${v.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}(\\\\s|$)`,\n            );\n            return apply(field, '$regexp', regex.source);\n          }),\n        };\n\n      case 'notOneOf':\n        const notValues = value;\n        if (notValues.length === 0) {\n          // This forces it to match nothing\n          return { id: null };\n        }\n        return { $and: notValues.map(v => apply(field, '$ne', v)) };\n      case 'gt':\n        return apply(field, '$gt', getValue(value));\n      case 'gte':\n        return apply(field, '$gte', getValue(value));\n      case 'lt':\n        return apply(field, '$lt', getValue(value));\n      case 'lte':\n        return apply(field, '$lte', getValue(value));\n      case 'true':\n        return apply(field, '$eq', true);\n      case 'false':\n        return apply(field, '$eq', false);\n      case 'and':\n        return {\n          $and: getValue(value).map(subExpr => mapConditionToActualQL(subExpr)),\n        };\n\n      case 'onBudget':\n        return { 'account.offbudget': false };\n      case 'offBudget':\n        return { 'account.offbudget': true };\n\n      default:\n        throw new Error('Unhandled operator: ' + op);\n    }\n  };\n\n  const filters = conditions.map(mapConditionToActualQL);\n  return { filters, errors };\n}\n\nexport async function applyActions(\n  transactions: TransactionEntity[],\n  actions: Array<Action | RuleActionEntity>,\n) {\n  const parsedActions = actions\n    .map(action => {\n      if (action instanceof Action) {\n        return action;\n      }\n\n      try {\n        if (action.op === 'set-split-amount') {\n          return new Action(action.op, null, action.value, action.options);\n        } else if (action.op === 'link-schedule') {\n          return new Action(action.op, null, action.value, null);\n        } else if (\n          action.op === 'prepend-notes' ||\n          action.op === 'append-notes'\n        ) {\n          return new Action(action.op, null, action.value, null);\n        }\n\n        return new Action(\n          action.op,\n          action.field,\n          action.value,\n          action.options,\n        );\n      } catch (e) {\n        console.log('Action error', e);\n        return null;\n      }\n    })\n    .filter(Boolean);\n\n  if (parsedActions.length !== actions.length) {\n    // An error happened while parsing\n    return null;\n  }\n\n  const accounts: db.DbAccount[] = await db.getAccounts();\n  const accountsMap = new Map(accounts.map(account => [account.id, account]));\n  const transactionsForRules = await Promise.all(\n    transactions.map(transactions =>\n      prepareTransactionForRules(transactions, accountsMap),\n    ),\n  );\n\n  const updated = transactionsForRules.flatMap(trans => {\n    return ungroupTransaction(execActions(parsedActions, trans));\n  });\n\n  const finalized: TransactionEntity[] = [];\n  for (const trans of updated) {\n    finalized.push(await finalizeTransactionForRules(trans));\n  }\n\n  return batchUpdateTransactions({ updated: finalized });\n}\n\nexport function getRulesForPayee(payeeId) {\n  const rules = new Set<Rule>();\n  iterateIds(getRules(), 'payee', (rule, id) => {\n    if (id === payeeId) {\n      rules.add(rule);\n    }\n  });\n\n  return rankRules([...rules]);\n}\n\nfunction* getIsSetterRules(\n  stage,\n  condField,\n  actionField,\n  { condValue, actionValue }: { condValue?: string; actionValue?: string },\n) {\n  const rules = getRules();\n  for (let i = 0; i < rules.length; i++) {\n    const rule = rules[i];\n\n    if (\n      rule.stage === stage &&\n      rule.actions.length === 1 &&\n      rule.actions[0].op === 'set' &&\n      rule.actions[0].field === actionField &&\n      (actionValue === undefined || rule.actions[0].value === actionValue) &&\n      rule.conditions.length === 1 &&\n      (rule.conditions[0].op === 'is' || rule.conditions[0].op === 'isNot') &&\n      rule.conditions[0].field === condField &&\n      (condValue === undefined || rule.conditions[0].value === condValue)\n    ) {\n      yield rule.serialize();\n    }\n  }\n\n  return null;\n}\n\nfunction* getOneOfSetterRules(\n  stage,\n  condField,\n  actionField,\n  { condValue, actionValue }: { condValue?: string; actionValue: string },\n) {\n  const rules = getRules();\n  for (let i = 0; i < rules.length; i++) {\n    const rule = rules[i];\n\n    if (\n      rule.stage === stage &&\n      rule.actions.length === 1 &&\n      rule.actions[0].op === 'set' &&\n      rule.actions[0].field === actionField &&\n      (actionValue == null || rule.actions[0].value === actionValue) &&\n      rule.conditions.length === 1 &&\n      (rule.conditions[0].op === 'oneOf' ||\n        rule.conditions[0].op === 'oneOf') &&\n      rule.conditions[0].field === condField &&\n      (condValue == null || rule.conditions[0].value.indexOf(condValue) !== -1)\n    ) {\n      yield rule.serialize();\n    }\n  }\n\n  return null;\n}\n\nexport async function updatePayeeRenameRule(fromNames: string[], to: string) {\n  const renameRule = getOneOfSetterRules('pre', 'imported_payee', 'payee', {\n    actionValue: to,\n  }).next().value;\n\n  // Note that we don't check for existing rules that set this\n  // `imported_payee` to something else. It's important to do\n  // that for categories because categories will be changes frequently\n  // for the same payee, but renames won't be changed much. It's a use\n  // case we could improve in the future, but this is fine for now.\n\n  if (renameRule) {\n    const condition = renameRule.conditions[0];\n    const newValue = [\n      ...fastSetMerge(\n        new Set(condition.value),\n        new Set(fromNames.filter(name => name !== '')),\n      ),\n    ];\n    const rule = {\n      ...renameRule,\n      conditions: [{ ...condition, value: newValue }],\n    };\n    await updateRule(rule);\n    return renameRule.id;\n  } else {\n    const rule = new Rule({\n      stage: 'pre',\n      conditionsOp: 'and',\n      conditions: [{ op: 'oneOf', field: 'imported_payee', value: fromNames }],\n      actions: [{ op: 'set', field: 'payee', value: to }],\n    });\n    return insertRule(rule.serialize());\n  }\n}\n\nexport function getProbableCategory(transactions) {\n  const scores = new Map();\n\n  transactions.forEach(trans => {\n    if (trans.category) {\n      scores.set(trans.category, (scores.get(trans.category) || 0) + 1);\n    }\n  });\n\n  const winner = transactions.reduce((winner, trans) => {\n    const score = scores.get(trans.category);\n    if (!winner || score > winner.score) {\n      return { score, category: trans.category };\n    }\n    return winner;\n  }, null);\n\n  return winner.score >= 3 ? winner.category : null;\n}\n\nexport async function updateCategoryRules(transactions) {\n  if (transactions.length === 0) {\n    return;\n  }\n\n  const payeeIds = new Set(transactions.map(trans => trans.payee));\n  const transIds = new Set(transactions.map(trans => trans.id));\n\n  // It's going to be quickest to get the oldest date and then query\n  // all transactions since then so we can work in memory\n  let oldestDate = null;\n  for (let i = 0; i < transactions.length; i++) {\n    if (oldestDate === null || transactions[i].date < oldestDate) {\n      oldestDate = transactions[i].date;\n    }\n  }\n\n  // We look 6 months behind to include any other transaction. This\n  // makes it so we, 1. don't have to load in all transactions ever\n  // and 2. \"forget\" really old transactions which might be nice and\n  // 3. don't have to individually run a query for each payee\n  oldestDate = subDays(oldestDate, 180);\n\n  // Also look 180 days in the future to get any future transactions\n  // (this might change when we think about scheduled transactions)\n  const register = await db.all<db.DbViewTransaction>(\n    `SELECT t.* FROM v_transactions t\n     LEFT JOIN accounts a ON a.id = t.account\n     LEFT JOIN payees p ON p.id = t.payee\n     WHERE date >= ? AND date <= ? AND is_parent = 0 AND a.closed = 0 AND p.learn_categories = 1\n     ORDER BY date DESC`,\n    [toDateRepr(oldestDate), toDateRepr(addDays(currentDay(), 180))],\n  );\n\n  const allTransactions = partitionByField(register, 'payee');\n  const categoriesToSet = new Map();\n\n  for (const payeeId of payeeIds) {\n    // Don't do anything if payee is null\n    if (payeeId) {\n      const latestTrans = (allTransactions.get(payeeId) || []).slice(0, 5);\n\n      // Check if one of the latest transactions was one that was\n      // updated. We only want to update anything if so.\n      if (latestTrans.find(trans => transIds.has(trans.id))) {\n        const category = getProbableCategory(latestTrans);\n        if (category) {\n          categoriesToSet.set(payeeId, category);\n        }\n      }\n    }\n  }\n\n  await batchMessages(async () => {\n    for (const [payeeId, category] of categoriesToSet.entries()) {\n      const ruleSetters = [\n        ...getIsSetterRules(null, 'payee', 'category', {\n          condValue: payeeId,\n        }),\n      ];\n\n      if (ruleSetters.length > 0) {\n        // If there are existing rules, change all of them to the new\n        // category (if they aren't already using it). We set all of\n        // them because it's possible that multiple rules exist\n        // because 2 clients made them independently. Not really a big\n        // deal, but to make sure our update gets applied set it to\n        // all of them\n        for (const rule of ruleSetters) {\n          const action = rule.actions[0];\n          if (action.value !== category) {\n            await updateRule({\n              ...rule,\n              actions: [{ ...action, value: category }],\n            });\n          }\n        }\n      } else {\n        // No existing rules, so create one\n        const newRule = new Rule({\n          stage: null,\n          conditionsOp: 'and',\n          conditions: [{ op: 'is', field: 'payee', value: payeeId }],\n          actions: [{ op: 'set', field: 'category', value: category }],\n        });\n        await insertRule(newRule.serialize());\n      }\n    }\n  });\n}\n\nexport type TransactionForRules = TransactionEntity & {\n  payee_name?: string;\n  _account?: db.DbAccount;\n};\n\nexport async function prepareTransactionForRules(\n  trans: TransactionEntity,\n  accounts: Map<string, db.DbAccount> | null = null,\n): Promise<TransactionForRules> {\n  const r: TransactionForRules = { ...trans };\n  if (trans.payee) {\n    const payee = await getPayee(trans.payee);\n    if (payee) {\n      r.payee_name = payee.name;\n    }\n  }\n\n  if (trans.account) {\n    if (accounts !== null && accounts.has(trans.account)) {\n      r._account = accounts.get(trans.account);\n    } else {\n      r._account = await getAccount(trans.account);\n    }\n  }\n\n  return r;\n}\n\nexport async function finalizeTransactionForRules(\n  trans: TransactionEntity | TransactionForRules,\n): Promise<TransactionEntity> {\n  if ('payee_name' in trans) {\n    if (trans.payee === 'new') {\n      if (trans.payee_name) {\n        let payeeId = (await getPayeeByName(trans.payee_name))?.id;\n        payeeId ??= await insertPayee({\n          name: trans.payee_name,\n        });\n\n        trans.payee = payeeId;\n      } else {\n        trans.payee = null;\n      }\n    }\n\n    delete trans.payee_name;\n  }\n\n  return trans;\n}\n","// @ts-strict-ignore\nimport * as db from '../db';\n\nimport { runRules } from './transaction-rules';\n\nasync function getPayee(acct) {\n  return db.first<db.DbPayee>('SELECT * FROM payees WHERE transfer_acct = ?', [\n    acct,\n  ]);\n}\n\nasync function getTransferredAccount(transaction) {\n  if (transaction.payee) {\n    const result = await db.first<Pick<db.DbViewPayee, 'transfer_acct'>>(\n      'SELECT transfer_acct FROM v_payees WHERE id = ?',\n      [transaction.payee],\n    );\n\n    return result?.transfer_acct || null;\n  }\n  return null;\n}\n\nasync function clearCategory(transaction, transferAcct) {\n  const { offbudget: fromOffBudget } = await db.first<\n    Pick<db.DbAccount, 'offbudget'>\n  >('SELECT offbudget FROM accounts WHERE id = ?', [transaction.account]);\n  const { offbudget: toOffBudget } = await db.first<\n    Pick<db.DbAccount, 'offbudget'>\n  >('SELECT offbudget FROM accounts WHERE id = ?', [transferAcct]);\n\n  // If the transfer is between two on budget or two off budget accounts,\n  // we should clear the category, because the category is not relevant\n  if (fromOffBudget === toOffBudget) {\n    await db.updateTransaction({ id: transaction.id, category: null });\n    if (transaction.transfer_id) {\n      await db.updateTransaction({\n        id: transaction.transfer_id,\n        category: null,\n      });\n    }\n    return true;\n  }\n  return false;\n}\n\nexport async function addTransfer(transaction, transferredAccount) {\n  if (transaction.is_parent) {\n    // For split transactions, we should create transfers using child transactions.\n    // This is to ensure that the amounts received by the transferred account\n    // reflects the amounts in the child transactions and not the parent transaction\n    // amount which is the total amount.\n    return null;\n  }\n\n  const { id: fromPayee } = await db.first<Pick<db.DbPayee, 'id'>>(\n    'SELECT id FROM payees WHERE transfer_acct = ?',\n    [transaction.account],\n  );\n\n  const transferTransaction = {\n    account: transferredAccount,\n    amount: -transaction.amount,\n    payee: fromPayee,\n    date: transaction.date,\n    transfer_id: transaction.id,\n    notes: transaction.notes || null,\n    schedule: transaction.schedule,\n    cleared: false,\n  };\n  const { notes, cleared } = await runRules(transferTransaction);\n  const id = await db.insertTransaction({\n    ...transferTransaction,\n    notes,\n    cleared,\n  });\n\n  await db.updateTransaction({ id: transaction.id, transfer_id: id });\n  const categoryCleared = await clearCategory(transaction, transferredAccount);\n\n  return {\n    id: transaction.id,\n    transfer_id: id,\n    ...(categoryCleared ? { category: null } : {}),\n  };\n}\n\nexport async function removeTransfer(transaction) {\n  const transferTrans = await db.getTransaction(transaction.transfer_id);\n\n  // Perform operations on the transfer transaction only\n  // if it is found. For example: when users delete both\n  // (in & out) transfer transactions at the same time -\n  // transfer transaction will not be found.\n  if (transferTrans) {\n    if (transferTrans.is_child) {\n      // If it's a child transaction, we don't delete it because that\n      // would invalidate the whole split transaction. Instead of turn\n      // it into a normal transaction\n      await db.updateTransaction({\n        id: transaction.transfer_id,\n        transfer_id: null,\n        payee: null,\n      });\n    } else {\n      await db.deleteTransaction({ id: transaction.transfer_id });\n    }\n  }\n  await db.updateTransaction({ id: transaction.id, transfer_id: null });\n  return { id: transaction.id, transfer_id: null };\n}\n\nexport async function updateTransfer(transaction, transferredAccount) {\n  const payee = await getPayee(transaction.account);\n\n  await db.updateTransaction({\n    id: transaction.transfer_id,\n    account: transferredAccount,\n    // Make sure to update the payee on the other side in case the\n    // user moved this transaction into another account\n    payee: payee.id,\n    date: transaction.date,\n    notes: transaction.notes,\n    amount: -transaction.amount,\n    schedule: transaction.schedule,\n  });\n\n  const categoryCleared = await clearCategory(transaction, transferredAccount);\n  if (categoryCleared) {\n    return { id: transaction.id, category: null };\n  }\n}\n\nexport async function onInsert(transaction) {\n  const transferredAccount = await getTransferredAccount(transaction);\n\n  if (transferredAccount) {\n    return addTransfer(transaction, transferredAccount);\n  }\n}\n\nexport async function onDelete(transaction) {\n  if (transaction.transfer_id) {\n    await removeTransfer(transaction);\n  }\n}\n\nexport async function onUpdate(transaction) {\n  const transferredAccount = await getTransferredAccount(transaction);\n\n  if (transaction.is_parent) {\n    return removeTransfer(transaction);\n  }\n\n  if (transferredAccount && !transaction.transfer_id) {\n    return addTransfer(transaction, transferredAccount);\n  }\n\n  if (!transferredAccount && transaction.transfer_id) {\n    return removeTransfer(transaction);\n  }\n\n  if (transferredAccount && transaction.transfer_id) {\n    return updateTransfer(transaction, transferredAccount);\n  }\n}\n","// @ts-strict-ignore\n\nimport * as connection from '../../platform/server/connection';\nimport { Diff } from '../../shared/util';\nimport { PayeeEntity, TransactionEntity } from '../../types/models';\nimport * as db from '../db';\nimport { incrFetch, whereIn } from '../db/util';\nimport { batchMessages } from '../sync';\n\nimport * as rules from './transaction-rules';\nimport * as transfer from './transfer';\n\nasync function idsWithChildren(ids: string[]) {\n  const whereIds = whereIn(ids, 'parent_id');\n  const rows = await db.all<Pick<db.DbViewTransactionInternal, 'id'>>(\n    `SELECT id FROM v_transactions_internal WHERE ${whereIds}`,\n  );\n  const set = new Set(ids);\n  for (const row of rows) {\n    set.add(row.id);\n  }\n  return [...set];\n}\n\nasync function getTransactionsByIds(\n  ids: string[],\n): Promise<TransactionEntity[]> {\n  // TODO: convert to whereIn\n  //\n  // or better yet, use ActualQL\n  return incrFetch(\n    (query, params) => db.selectWithSchema('transactions', query, params),\n    ids,\n    // eslint-disable-next-line actual/typography\n    id => `id = '${id}'`,\n    where => `SELECT * FROM v_transactions_internal WHERE ${where}`,\n  );\n}\n\nexport async function batchUpdateTransactions({\n  added,\n  deleted,\n  updated,\n  learnCategories = false,\n  detectOrphanPayees = true,\n  runTransfers = true,\n}: Partial<Diff<TransactionEntity>> & {\n  learnCategories?: boolean;\n  detectOrphanPayees?: boolean;\n  runTransfers?: boolean;\n}) {\n  // Track the ids of each type of transaction change (see below for why)\n  let addedIds = [];\n  const updatedIds = updated ? updated.map(u => u.id) : [];\n  const deletedIds = deleted\n    ? await idsWithChildren(deleted.map(d => d.id))\n    : [];\n\n  const oldPayees = new Set<PayeeEntity['id']>();\n  const accounts = await db.all<db.DbAccount>(\n    'SELECT * FROM accounts WHERE tombstone = 0',\n  );\n\n  // We need to get all the payees of updated transactions _before_\n  // making changes\n  if (updated) {\n    const descUpdatedIds = updated\n      .filter(update => update.payee)\n      .map(update => update.id);\n\n    const transactions = await getTransactionsByIds(descUpdatedIds);\n\n    for (let i = 0; i < transactions.length; i++) {\n      oldPayees.add(transactions[i].payee);\n    }\n  }\n\n  // Apply all the updates. We can batch this now! This is important\n  // and makes bulk updates much faster\n  await batchMessages(async () => {\n    if (added) {\n      addedIds = await Promise.all(\n        added.map(async t => {\n          // Offbudget account transactions and parent transactions should not have categories.\n          const account = accounts.find(acct => acct.id === t.account);\n          if (t.is_parent || account.offbudget === 1) {\n            t.category = null;\n          }\n          return db.insertTransaction(t);\n        }),\n      );\n    }\n\n    if (deleted) {\n      await Promise.all(\n        // It's important to use `deletedIds` and not `deleted` here\n        // because we've expanded it to include children above. The\n        // inconsistency of the delete APIs is annoying and should\n        // be fixed (it should only take an id)\n        deletedIds.map(async id => {\n          await db.deleteTransaction({ id });\n        }),\n      );\n    }\n\n    if (updated) {\n      await Promise.all(\n        updated.map(async t => {\n          if (t.account) {\n            // Moving transactions off budget should always clear the\n            // category. Parent transactions should not have categories.\n            const account = accounts.find(acct => acct.id === t.account);\n            if (t.is_parent || account.offbudget === 1) {\n              t.category = null;\n            }\n          }\n\n          await db.updateTransaction(t);\n        }),\n      );\n    }\n  });\n\n  // Get all of the full transactions that were changed. This is\n  // needed to run any cascading logic that depends on the full\n  // transaction. Things like transfers, analyzing rule updates, and\n  // more\n  const allAdded = await getTransactionsByIds(addedIds);\n  const allUpdated = await getTransactionsByIds(updatedIds);\n  const allDeleted = await getTransactionsByIds(deletedIds);\n\n  // Post-processing phase: first do any updates to transfers.\n  // Transfers update the transactions and we need to return updates\n  // to the client so that can apply them. Note that added\n  // transactions just return the full transaction.\n  const resultAdded = allAdded;\n  const resultUpdated = allUpdated;\n  let transfersUpdated: Awaited<ReturnType<typeof transfer.onUpdate>>[];\n\n  if (runTransfers) {\n    await batchMessages(async () => {\n      await Promise.all(allAdded.map(t => transfer.onInsert(t)));\n\n      // Return any updates from here\n      transfersUpdated = (\n        await Promise.all(allUpdated.map(t => transfer.onUpdate(t)))\n      ).filter(Boolean);\n\n      await Promise.all(allDeleted.map(t => transfer.onDelete(t)));\n    });\n  }\n\n  if (learnCategories) {\n    // Analyze any updated categories and update rules to learn from\n    // the user's activity\n    const ids = new Set([\n      ...(added ? added.filter(add => add.category).map(add => add.id) : []),\n      ...(updated\n        ? updated.filter(update => update.category).map(update => update.id)\n        : []),\n    ]);\n    await rules.updateCategoryRules(\n      allAdded.concat(allUpdated).filter(trans => ids.has(trans.id)),\n    );\n  }\n\n  if (detectOrphanPayees) {\n    // Look for any orphaned payees and notify the user about merging\n    // them\n\n    if (updated) {\n      const newPayeeIds = updated.map(u => u.payee).filter(Boolean);\n      if (newPayeeIds.length > 0) {\n        const allOrphaned = new Set(await db.getOrphanedPayees());\n\n        const orphanedIds = [...oldPayees].filter(id => allOrphaned.has(id));\n\n        if (orphanedIds.length > 0) {\n          connection.send('orphaned-payees', {\n            orphanedIds,\n            updatedPayeeIds: newPayeeIds,\n          });\n        }\n      }\n    }\n  }\n\n  return {\n    added: resultAdded,\n    updated: runTransfers ? transfersUpdated : resultUpdated,\n    deleted: allDeleted,\n  };\n}\n","export type Mappings = Map<string, Map<string, string>>;\n\nexport const mappingsToString = (mapping: Mappings): string =>\n  JSON.stringify(\n    Object.fromEntries(\n      [...mapping.entries()].map(([key, value]) => [\n        key,\n        Object.fromEntries(value),\n      ]),\n    ),\n  );\n\nexport const mappingsFromString = (str: string): Mappings => {\n  try {\n    const parsed = JSON.parse(str);\n    if (typeof parsed !== 'object' || parsed === null) {\n      throw new Error('Invalid mapping format');\n    }\n    return new Map(\n      Object.entries(parsed).map(([key, value]) => [\n        key,\n        new Map(Object.entries(value as object)),\n      ]),\n    );\n  } catch (e) {\n    const message = e instanceof Error ? e.message : e;\n    throw new Error(`Failed to parse mapping: ${message}`);\n  }\n};\n\nexport const defaultMappings: Mappings = new Map([\n  [\n    'payment',\n    new Map([\n      ['date', 'date'],\n      ['payee', 'payeeName'],\n      ['notes', 'notes'],\n    ]),\n  ],\n  [\n    'deposit',\n    new Map([\n      ['date', 'date'],\n      ['payee', 'payeeName'],\n      ['notes', 'notes'],\n    ]),\n  ],\n]);\n","const conjunctions = [\n  'for', //\n  'and',\n  'nor',\n  'but',\n  'or',\n  'yet',\n  'so',\n];\n\nconst articles = [\n  'a', //\n  'an',\n  'the',\n];\n\nconst prepositions = [\n  'aboard',\n  'about',\n  'above',\n  'across',\n  'after',\n  'against',\n  'along',\n  'amid',\n  'among',\n  'anti',\n  'around',\n  'as',\n  'at',\n  'before',\n  'behind',\n  'below',\n  'beneath',\n  'beside',\n  'besides',\n  'between',\n  'beyond',\n  'but',\n  'by',\n  'concerning',\n  'considering',\n  'despite',\n  'down',\n  'during',\n  'except',\n  'excepting',\n  'excluding',\n  'following',\n  'for',\n  'from',\n  'in',\n  'inside',\n  'into',\n  'like',\n  'minus',\n  'near',\n  'of',\n  'off',\n  'on',\n  'onto',\n  'opposite',\n  'over',\n  'past',\n  'per',\n  'plus',\n  'regarding',\n  'round',\n  'save',\n  'since',\n  'than',\n  'through',\n  'to',\n  'toward',\n  'towards',\n  'under',\n  'underneath',\n  'unlike',\n  'until',\n  'up',\n  'upon',\n  'versus',\n  'via',\n  'with',\n  'within',\n  'without',\n];\n\nexport const lowerCaseSet = new Set([\n  ...conjunctions,\n  ...articles,\n  ...prepositions,\n]);\n","export const specials = [\n  'CLI',\n  'API',\n  'HTTP',\n  'HTTPS',\n  'JSX',\n  'DNS',\n  'URL',\n  'CI',\n  'CDN',\n  'GitHub',\n  'CSS',\n  'JS',\n  'JavaScript',\n  'TypeScript',\n  'HTML',\n  'WordPress',\n  'JavaScript',\n  'Next.js',\n  'Node.js',\n];\n","// @ts-strict-ignore\n// Utilities\nimport { lowerCaseSet } from './lower-case';\nimport { specials } from './specials';\n\nconst character =\n  '[0-9\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376-\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0523\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0621-\\u064A\\u066E-\\u066F\\u0671-\\u06D3\\u06D5\\u06E5-\\u06E6\\u06EE-\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4-\\u07F5\\u07FA\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0972\\u097B-\\u097F\\u0985-\\u098C\\u098F-\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC-\\u09DD\\u09DF-\\u09E1\\u09F0-\\u09F1\\u0A05-\\u0A0A\\u0A0F-\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32-\\u0A33\\u0A35-\\u0A36\\u0A38-\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2-\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0-\\u0AE1\\u0B05-\\u0B0C\\u0B0F-\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32-\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C-\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99-\\u0B9A\\u0B9C\\u0B9E-\\u0B9F\\u0BA3-\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58-\\u0C59\\u0C60-\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0-\\u0CE1\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D28\\u0D2A-\\u0D39\\u0D3D\\u0D60-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32-\\u0E33\\u0E40-\\u0E46\\u0E81-\\u0E82\\u0E84\\u0E87-\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA-\\u0EAB\\u0EAD-\\u0EB0\\u0EB2-\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDD\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8B\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065-\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10D0-\\u10FA\\u10FC\\u1100-\\u1159\\u115F-\\u11A2\\u11A8-\\u11F9\\u1200-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u1676\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19A9\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE-\\u1BAF\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u2094\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2C6F\\u2C71-\\u2C7D\\u2C80-\\u2CE4\\u2D00-\\u2D25\\u2D30-\\u2D65\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31B7\\u31F0-\\u31FF\\u3400\\u4DB5\\u4E00\\u9FC3\\uA000-\\uA48C\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A-\\uA62B\\uA640-\\uA65F\\uA662-\\uA66E\\uA67F-\\uA697\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78C\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA90A-\\uA925\\uA930-\\uA946\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAC00\\uD7A3\\uF900-\\uFA2D\\uFA30-\\uFA6A\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40-\\uFB41\\uFB43-\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]';\nconst regex = new RegExp(\n  `(?:(?:(\\\\s?(?:^|[.\\\\(\\\\)!?;:\"-])\\\\s*)(${character}))|(${character}))(${character}*[’']*${character}*)`,\n  'g',\n);\n\nconst convertToRegExp = specials =>\n  specials.map(s => [new RegExp(`\\\\b${s}\\\\b`, 'gi'), s]);\n\nfunction parseMatch(match) {\n  const firstCharacter = match[0];\n\n  // test first character\n  if (/\\s/.test(firstCharacter)) {\n    // if whitespace - trim and return\n    return match.substr(1);\n  }\n  if (/[()]/.test(firstCharacter)) {\n    // if parens - this shouldn't be replaced\n    return null;\n  }\n\n  return match;\n}\n\nexport function title(str, options = { special: undefined }) {\n  str = str\n    .toLowerCase()\n    .replace(regex, (m, lead = '', forced, lower, rest) => {\n      const parsedMatch = parseMatch(m);\n      if (!parsedMatch) {\n        return m;\n      }\n      if (!forced) {\n        const fullLower = lower + rest;\n\n        if (lowerCaseSet.has(fullLower)) {\n          return parsedMatch;\n        }\n      }\n\n      return lead + (lower || forced).toUpperCase() + rest;\n    });\n\n  const customSpecials = options.special || [];\n  const replace = [...specials, ...customSpecials];\n  const replaceRegExp = convertToRegExp(replace);\n\n  replaceRegExp.forEach(([pattern, s]) => {\n    str = str.replace(pattern, s);\n  });\n\n  return str;\n}\n","// @ts-strict-ignore\nimport * as dateFns from 'date-fns';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as asyncStorage from '../../platform/server/asyncStorage';\nimport * as monthUtils from '../../shared/months';\nimport { q } from '../../shared/query';\nimport {\n  makeChild as makeChildTransaction,\n  recalculateSplit,\n} from '../../shared/transactions';\nimport {\n  hasFieldsChanged,\n  amountToInteger,\n  integerToAmount,\n} from '../../shared/util';\nimport {\n  AccountEntity,\n  BankSyncResponse,\n  SimpleFinBatchSyncResponse,\n  TransactionEntity,\n} from '../../types/models';\nimport { aqlQuery } from '../aql';\nimport * as db from '../db';\nimport { runMutator } from '../mutators';\nimport { post } from '../post';\nimport { getServer } from '../server-config';\nimport { batchMessages } from '../sync';\nimport { batchUpdateTransactions } from '../transactions';\nimport { runRules } from '../transactions/transaction-rules';\nimport {\n  defaultMappings,\n  mappingsFromString,\n} from '../util/custom-sync-mapping';\n\nimport { getStartingBalancePayee } from './payees';\nimport { title } from './title';\n\nfunction BankSyncError(type: string, code: string, details?: object) {\n  return { type: 'BankSyncError', category: type, code, details };\n}\n\nfunction makeSplitTransaction(trans, subtransactions) {\n  // We need to calculate the final state of split transactions\n  const { subtransactions: sub, ...parent } = recalculateSplit({\n    ...trans,\n    is_parent: true,\n    subtransactions: subtransactions.map((transaction, idx) =>\n      makeChildTransaction(trans, {\n        ...transaction,\n        sort_order: 0 - idx,\n      }),\n    ),\n  });\n  return [parent, ...sub];\n}\n\nfunction getAccountBalance(account) {\n  // Debt account types need their balance reversed\n  switch (account.type) {\n    case 'credit':\n    case 'loan':\n      return -account.balances.current;\n    default:\n      return account.balances.current;\n  }\n}\n\nasync function updateAccountBalance(id: AccountEntity['id'], balance: number) {\n  await db.runQuery('UPDATE accounts SET balance_current = ? WHERE id = ?', [\n    balance,\n    id,\n  ]);\n}\n\nasync function getAccountOldestTransaction(id): Promise<TransactionEntity> {\n  return (\n    await aqlQuery(\n      q('transactions')\n        .filter({\n          account: id,\n          date: { $lte: monthUtils.currentDay() },\n        })\n        .select('date')\n        .orderBy('date')\n        .limit(1),\n    )\n  ).data?.[0];\n}\n\nasync function getAccountSyncStartDate(id) {\n  // Many GoCardless integrations do not support getting more than 90 days\n  // worth of data, so make that the earliest possible limit.\n  const dates = [monthUtils.subDays(monthUtils.currentDay(), 90)];\n\n  const oldestTransaction = await getAccountOldestTransaction(id);\n\n  if (oldestTransaction) dates.push(oldestTransaction.date);\n\n  return monthUtils.dayFromDate(\n    dateFns.max(dates.map(d => monthUtils.parseDate(d))),\n  );\n}\n\nexport async function getGoCardlessAccounts(userId, userKey, id) {\n  const userToken = await asyncStorage.getItem('user-token');\n  if (!userToken) return;\n\n  const res = await post(\n    getServer().GOCARDLESS_SERVER + '/accounts',\n    {\n      userId,\n      key: userKey,\n      item_id: id,\n    },\n    {\n      'X-ACTUAL-TOKEN': userToken,\n    },\n  );\n\n  const { accounts } = res;\n\n  accounts.forEach(acct => {\n    acct.balances.current = getAccountBalance(acct);\n  });\n\n  return accounts;\n}\n\nasync function downloadGoCardlessTransactions(\n  userId,\n  userKey,\n  acctId,\n  bankId,\n  since,\n  includeBalance = true,\n) {\n  const userToken = await asyncStorage.getItem('user-token');\n  if (!userToken) return;\n\n  console.log('Pulling transactions from GoCardless');\n\n  const res = await post(\n    getServer().GOCARDLESS_SERVER + '/transactions',\n    {\n      userId,\n      key: userKey,\n      requisitionId: bankId,\n      accountId: acctId,\n      startDate: since,\n      includeBalance,\n    },\n    {\n      'X-ACTUAL-TOKEN': userToken,\n    },\n  );\n\n  if (res.error_code) {\n    const errorDetails = {\n      rateLimitHeaders: res.rateLimitHeaders,\n    };\n\n    throw BankSyncError(res.error_type, res.error_code, errorDetails);\n  }\n\n  if (includeBalance) {\n    const {\n      transactions: { all },\n      balances,\n      startingBalance,\n    } = res;\n\n    console.log('Response:', res);\n\n    return {\n      transactions: all,\n      accountBalance: balances,\n      startingBalance,\n    };\n  } else {\n    console.log('Response:', res);\n\n    return {\n      transactions: res.transactions.all,\n    };\n  }\n}\n\nasync function downloadSimpleFinTransactions(\n  acctId: AccountEntity['id'] | AccountEntity['id'][],\n  since: string | string[],\n) {\n  const userToken = await asyncStorage.getItem('user-token');\n  if (!userToken) return;\n\n  const batchSync = Array.isArray(acctId);\n\n  console.log('Pulling transactions from SimpleFin');\n\n  let res;\n  try {\n    res = await post(\n      getServer().SIMPLEFIN_SERVER + '/transactions',\n      {\n        accountId: acctId,\n        startDate: since,\n      },\n      {\n        'X-ACTUAL-TOKEN': userToken,\n      },\n      // 5 minute timeout for batch sync, one minute for individual accounts\n      Array.isArray(acctId) ? 300000 : 60000,\n    );\n  } catch (error) {\n    console.error('Suspected timeout during bank sync:', error);\n    throw BankSyncError('TIMED_OUT', 'TIMED_OUT');\n  }\n\n  if (Object.keys(res).length === 0) {\n    throw BankSyncError('NO_DATA', 'NO_DATA');\n  }\n  if (res.error_code) {\n    throw BankSyncError(res.error_type, res.error_code);\n  }\n\n  let retVal = {};\n  if (batchSync) {\n    for (const [accountId, data] of Object.entries(\n      res as SimpleFinBatchSyncResponse,\n    )) {\n      if (accountId === 'errors') continue;\n\n      const error = res?.errors?.[accountId]?.[0];\n\n      retVal[accountId] = {\n        transactions: data?.transactions?.all,\n        accountBalance: data?.balances,\n        startingBalance: data?.startingBalance,\n      };\n\n      if (error) {\n        retVal[accountId].error_type = error.error_type;\n        retVal[accountId].error_code = error.error_code;\n      }\n    }\n  } else {\n    const singleRes = res as BankSyncResponse;\n    retVal = {\n      transactions: singleRes.transactions.all,\n      accountBalance: singleRes.balances,\n      startingBalance: singleRes.startingBalance,\n    };\n  }\n\n  console.log('Response:', retVal);\n  return retVal;\n}\n\nasync function downloadPluggyAiTransactions(\n  acctId: AccountEntity['id'],\n  since: string,\n) {\n  const userToken = await asyncStorage.getItem('user-token');\n  if (!userToken) return;\n\n  console.log('Pulling transactions from Pluggy.ai');\n\n  const res = await post(\n    getServer().PLUGGYAI_SERVER + '/transactions',\n    {\n      accountId: acctId,\n      startDate: since,\n    },\n    {\n      'X-ACTUAL-TOKEN': userToken,\n    },\n    60000,\n  );\n\n  if (res.error_code) {\n    throw BankSyncError(res.error_type, res.error_code);\n  } else if ('error' in res) {\n    throw BankSyncError('Connection', res.error);\n  }\n\n  let retVal = {};\n  const singleRes = res as BankSyncResponse;\n  retVal = {\n    transactions: singleRes.transactions.all,\n    accountBalance: singleRes.balances,\n    startingBalance: singleRes.startingBalance,\n  };\n\n  console.log('Response:', retVal);\n  return retVal;\n}\n\nasync function resolvePayee(trans, payeeName, payeesToCreate) {\n  if (trans.payee == null && payeeName) {\n    // First check our registry of new payees (to avoid a db access)\n    // then check the db for existing payees\n    let payee = payeesToCreate.get(payeeName.toLowerCase());\n    payee = payee || (await db.getPayeeByName(payeeName));\n\n    if (payee != null) {\n      return payee.id;\n    } else {\n      // Otherwise we're going to create a new one\n      const newPayee = { id: uuidv4(), name: payeeName };\n      payeesToCreate.set(payeeName.toLowerCase(), newPayee);\n      return newPayee.id;\n    }\n  }\n\n  return trans.payee;\n}\n\nasync function normalizeTransactions(\n  transactions,\n  acctId,\n  { rawPayeeName = false } = {},\n) {\n  const payeesToCreate = new Map();\n\n  const normalized = [];\n  for (let trans of transactions) {\n    // Validate the date because we do some stuff with it. The db\n    // layer does better validation, but this will give nicer errors\n    if (trans.date == null) {\n      throw new Error('`date` is required when adding a transaction');\n    }\n\n    // Strip off the irregular properties\n    const { payee_name: originalPayeeName, subtransactions, ...rest } = trans;\n    trans = rest;\n\n    let payee_name = originalPayeeName;\n    if (payee_name) {\n      const trimmed = payee_name.trim();\n      if (trimmed === '') {\n        payee_name = null;\n      } else {\n        payee_name = rawPayeeName ? trimmed : title(trimmed);\n      }\n    }\n\n    trans.imported_payee = trans.imported_payee || payee_name;\n    if (trans.imported_payee) {\n      trans.imported_payee = trans.imported_payee.trim();\n    }\n\n    // It's important to resolve both the account and payee early so\n    // when rules are run, they have the right data. Resolving payees\n    // also simplifies the payee creation process\n    trans.account = acctId;\n    trans.payee = await resolvePayee(trans, payee_name, payeesToCreate);\n\n    trans.category = trans.category ?? null;\n\n    normalized.push({\n      payee_name,\n      subtransactions: subtransactions\n        ? subtransactions.map(t => ({ ...t, account: acctId }))\n        : null,\n      trans,\n    });\n  }\n\n  return { normalized, payeesToCreate };\n}\n\nasync function normalizeBankSyncTransactions(transactions, acctId) {\n  const payeesToCreate = new Map();\n\n  const [customMappingsRaw, importPending, importNotes] = await Promise.all([\n    aqlQuery(\n      q('preferences')\n        .filter({ id: `custom-sync-mappings-${acctId}` })\n        .select('value'),\n    ).then(data => data?.data?.[0]?.value),\n    aqlQuery(\n      q('preferences')\n        .filter({ id: `sync-import-pending-${acctId}` })\n        .select('value'),\n    ).then(data => String(data?.data?.[0]?.value ?? 'true') === 'true'),\n    aqlQuery(\n      q('preferences')\n        .filter({ id: `sync-import-notes-${acctId}` })\n        .select('value'),\n    ).then(data => String(data?.data?.[0]?.value ?? 'true') === 'true'),\n  ]);\n\n  const mappings = customMappingsRaw\n    ? mappingsFromString(customMappingsRaw)\n    : defaultMappings;\n\n  const normalized = [];\n  for (const trans of transactions) {\n    trans.cleared = Boolean(trans.booked);\n\n    if (!importPending && !trans.cleared) continue;\n\n    if (!trans.amount) {\n      trans.amount = trans.transactionAmount.amount;\n    }\n\n    const mapping = mappings.get(trans.amount <= 0 ? 'payment' : 'deposit');\n\n    const date = trans[mapping.get('date')] ?? trans.date;\n    const payeeName = trans[mapping.get('payee')];\n    const notes = trans[mapping.get('notes')];\n\n    // Validate the date because we do some stuff with it. The db\n    // layer does better validation, but this will give nicer errors\n    if (date == null) {\n      throw new Error('`date` is required when adding a transaction');\n    }\n\n    if (payeeName == null) {\n      throw new Error('`payeeName` is required when adding a transaction');\n    }\n\n    trans.imported_payee = trans.imported_payee || payeeName;\n    if (trans.imported_payee) {\n      trans.imported_payee = trans.imported_payee.trim();\n    }\n\n    let imported_id = trans.transactionId;\n    if (trans.cleared && !trans.transactionId && trans.internalTransactionId) {\n      imported_id = `${trans.account}-${trans.internalTransactionId}`;\n    }\n\n    // It's important to resolve both the account and payee early so\n    // when rules are run, they have the right data. Resolving payees\n    // also simplifies the payee creation process\n    trans.account = acctId;\n    trans.payee = await resolvePayee(trans, payeeName, payeesToCreate);\n\n    normalized.push({\n      payee_name: payeeName,\n      trans: {\n        amount: amountToInteger(trans.amount),\n        payee: trans.payee,\n        account: trans.account,\n        date,\n        notes: importNotes && notes ? notes.trim().replace(/#/g, '##') : null,\n        category: trans.category ?? null,\n        imported_id,\n        imported_payee: trans.imported_payee,\n        cleared: trans.cleared,\n        raw_synced_data: JSON.stringify(trans),\n      },\n    });\n  }\n\n  return { normalized, payeesToCreate };\n}\n\nasync function createNewPayees(payeesToCreate, addsAndUpdates) {\n  const usedPayeeIds = new Set(addsAndUpdates.map(t => t.payee));\n\n  await batchMessages(async () => {\n    for (const payee of payeesToCreate.values()) {\n      // Only create the payee if it ended up being used\n      if (usedPayeeIds.has(payee.id)) {\n        await db.insertPayee(payee);\n      }\n    }\n  });\n}\n\nexport type ReconcileTransactionsResult = {\n  added: string[];\n  updated: string[];\n  updatedPreview: Array<{\n    transaction: TransactionEntity;\n    existing?: TransactionEntity;\n    ignored?: boolean;\n  }>;\n};\n\nexport async function reconcileTransactions(\n  acctId,\n  transactions,\n  isBankSyncAccount = false,\n  strictIdChecking = true,\n  isPreview = false,\n  defaultCleared = true,\n): Promise<ReconcileTransactionsResult> {\n  console.log('Performing transaction reconciliation');\n\n  const updated = [];\n  const added = [];\n  const updatedPreview = [];\n  const existingPayeeMap = new Map<string, string>();\n\n  const {\n    payeesToCreate,\n    transactionsStep1,\n    transactionsStep2,\n    transactionsStep3,\n  } = await matchTransactions(\n    acctId,\n    transactions,\n    isBankSyncAccount,\n    strictIdChecking,\n  );\n\n  // Finally, generate & commit the changes\n  for (const { trans, subtransactions, match } of transactionsStep3) {\n    if (match && !trans.forceAddTransaction) {\n      // Skip updating already reconciled (locked) transactions\n      if (match.reconciled) {\n        updatedPreview.push({ transaction: trans, ignored: true });\n        continue;\n      }\n\n      // TODO: change the above sql query to use aql\n      const existing = {\n        ...match,\n        cleared: match.cleared === 1,\n        date: db.fromDateRepr(match.date),\n      };\n\n      // Update the transaction\n      const updates = {\n        imported_id: trans.imported_id || null,\n        payee: existing.payee || trans.payee || null,\n        category: existing.category || trans.category || null,\n        imported_payee: trans.imported_payee || null,\n        notes: existing.notes || trans.notes || null,\n        cleared: trans.cleared ?? existing.cleared,\n        raw_synced_data:\n          existing.raw_synced_data ?? trans.raw_synced_data ?? null,\n      };\n\n      const fieldsToMarkUpdated = Object.keys(updates).filter(k => {\n        // do not mark raw_synced_data if it's gone from falsy to falsy\n        if (!existing.raw_synced_data && !trans.raw_synced_data) {\n          return k !== 'raw_synced_data';\n        }\n\n        return true;\n      });\n\n      if (hasFieldsChanged(existing, updates, fieldsToMarkUpdated)) {\n        updated.push({ id: existing.id, ...updates });\n        if (!existingPayeeMap.has(existing.payee)) {\n          const payee = await db.getPayee(existing.payee);\n          existingPayeeMap.set(existing.payee, payee?.name);\n        }\n        existing.payee_name = existingPayeeMap.get(existing.payee);\n        existing.amount = integerToAmount(existing.amount);\n        updatedPreview.push({ transaction: trans, existing });\n      } else {\n        updatedPreview.push({ transaction: trans, ignored: true });\n      }\n\n      if (existing.is_parent && existing.cleared !== updates.cleared) {\n        const children = await db.all<Pick<db.DbViewTransaction, 'id'>>(\n          'SELECT id FROM v_transactions WHERE parent_id = ?',\n          [existing.id],\n        );\n        for (const child of children) {\n          updated.push({ id: child.id, cleared: updates.cleared });\n        }\n      }\n    } else {\n      // Insert a new transaction\n      const { forceAddTransaction, ...newTrans } = trans;\n      const finalTransaction = {\n        ...newTrans,\n        id: uuidv4(),\n        category: trans.category || null,\n        cleared: trans.cleared ?? defaultCleared,\n      };\n\n      if (subtransactions && subtransactions.length > 0) {\n        added.push(...makeSplitTransaction(finalTransaction, subtransactions));\n      } else {\n        added.push(finalTransaction);\n      }\n    }\n  }\n\n  // Maintain the sort order of the server\n  const now = Date.now();\n  added.forEach((t, index) => {\n    t.sort_order ??= now - index;\n  });\n\n  if (!isPreview) {\n    await createNewPayees(payeesToCreate, [...added, ...updated]);\n    await batchUpdateTransactions({ added, updated });\n  }\n\n  console.log('Debug data for the operations:', {\n    transactionsStep1,\n    transactionsStep2,\n    transactionsStep3,\n    added,\n    updated,\n    updatedPreview,\n  });\n\n  return {\n    added: added.map(trans => trans.id),\n    updated: updated.map(trans => trans.id),\n    updatedPreview,\n  };\n}\n\nexport async function matchTransactions(\n  acctId,\n  transactions,\n  isBankSyncAccount = false,\n  strictIdChecking = true,\n) {\n  console.log('Performing transaction reconciliation matching');\n\n  const reimportDeleted = await aqlQuery(\n    q('preferences')\n      .filter({ id: `sync-reimport-deleted-${acctId}` })\n      .select('value'),\n  ).then(data => String(data?.data?.[0]?.value ?? 'true') === 'true');\n\n  const hasMatched = new Set();\n\n  const transactionNormalization = isBankSyncAccount\n    ? normalizeBankSyncTransactions\n    : normalizeTransactions;\n\n  const { normalized, payeesToCreate } = await transactionNormalization(\n    transactions,\n    acctId,\n  );\n\n  // The first pass runs the rules, and preps data for fuzzy matching\n  const accounts: db.DbAccount[] = await db.getAccounts();\n  const accountsMap = new Map(accounts.map(account => [account.id, account]));\n\n  const transactionsStep1 = [];\n  for (const {\n    payee_name,\n    trans: originalTrans,\n    subtransactions,\n  } of normalized) {\n    // Run the rules\n    const trans = await runRules(originalTrans, accountsMap);\n\n    let match = null;\n    let fuzzyDataset = null;\n\n    // First, match with an existing transaction's imported_id. This\n    // is the highest fidelity match and should always be attempted\n    // first.\n    if (trans.imported_id) {\n      const table = reimportDeleted\n        ? 'v_transactions'\n        : 'v_transactions_internal';\n      match = await db.first<db.DbTransaction>(\n        `SELECT * FROM ${table} WHERE imported_id = ? AND account = ?`,\n        [trans.imported_id, acctId],\n      );\n\n      if (match) {\n        hasMatched.add(match.id);\n      }\n    }\n\n    // If it didn't match, query data needed for fuzzy matching\n    if (!match) {\n      // Fuzzy matching looks 7 days ahead and 7 days back. This\n      // needs to select all fields that need to be read from the\n      // matched transaction. See the final pass below for the needed\n      // fields.\n      const sevenDaysBefore = db.toDateRepr(monthUtils.subDays(trans.date, 7));\n      const sevenDaysAfter = db.toDateRepr(monthUtils.addDays(trans.date, 7));\n      // strictIdChecking has the added behaviour of only matching on transactions with no import ID\n      // if the transaction being imported has an import ID.\n      if (strictIdChecking) {\n        fuzzyDataset = await db.all<\n          Pick<\n            db.DbViewTransaction,\n            | 'id'\n            | 'is_parent'\n            | 'date'\n            | 'imported_id'\n            | 'payee'\n            | 'imported_payee'\n            | 'category'\n            | 'notes'\n            | 'reconciled'\n            | 'cleared'\n            | 'amount'\n          >\n        >(\n          `SELECT id, is_parent, date, imported_id, payee, imported_payee, category, notes, reconciled, cleared, amount\n          FROM v_transactions\n          WHERE\n            -- If both ids are set, and we didn't match earlier then skip dedup\n            (imported_id IS NULL OR ? IS NULL)\n            AND date >= ? AND date <= ? AND amount = ?\n            AND account = ?`,\n          [\n            trans.imported_id || null,\n            sevenDaysBefore,\n            sevenDaysAfter,\n            trans.amount || 0,\n            acctId,\n          ],\n        );\n      } else {\n        fuzzyDataset = await db.all<\n          Pick<\n            db.DbViewTransaction,\n            | 'id'\n            | 'is_parent'\n            | 'date'\n            | 'imported_id'\n            | 'payee'\n            | 'imported_payee'\n            | 'category'\n            | 'notes'\n            | 'reconciled'\n            | 'cleared'\n            | 'amount'\n          >\n        >(\n          `SELECT id, is_parent, date, imported_id, payee, imported_payee, category, notes, reconciled, cleared, amount\n          FROM v_transactions\n          WHERE date >= ? AND date <= ? AND amount = ? AND account = ?`,\n          [sevenDaysBefore, sevenDaysAfter, trans.amount || 0, acctId],\n        );\n      }\n\n      // Sort the matched transactions according to the distance from the original\n      // transactions date. i.e. if the original transaction is in 21-02-2024 and\n      // the matched transactions are: 20-02-2024, 21-02-2024, 29-02-2024 then\n      // the resulting data-set should be: 21-02-2024, 20-02-2024, 29-02-2024.\n      fuzzyDataset = fuzzyDataset.sort((a, b) => {\n        const aDistance = Math.abs(\n          dateFns.differenceInMilliseconds(\n            dateFns.parseISO(trans.date),\n            dateFns.parseISO(db.fromDateRepr(a.date)),\n          ),\n        );\n        const bDistance = Math.abs(\n          dateFns.differenceInMilliseconds(\n            dateFns.parseISO(trans.date),\n            dateFns.parseISO(db.fromDateRepr(b.date)),\n          ),\n        );\n        return aDistance > bDistance ? 1 : -1;\n      });\n    }\n\n    transactionsStep1.push({\n      payee_name,\n      trans,\n      subtransactions: trans.subtransactions || subtransactions,\n      match,\n      fuzzyDataset,\n    });\n  }\n\n  // Next, do the fuzzy matching. This first pass matches based on the\n  // payee id. We do this in multiple passes so that higher fidelity\n  // matching always happens first, i.e. a transaction should match\n  // match with low fidelity if a later transaction is going to match\n  // the same one with high fidelity.\n  const transactionsStep2 = transactionsStep1.map(data => {\n    if (!data.match && data.fuzzyDataset) {\n      // Try to find one where the payees match.\n      const match = data.fuzzyDataset.find(\n        row => !hasMatched.has(row.id) && data.trans.payee === row.payee,\n      );\n\n      if (match) {\n        hasMatched.add(match.id);\n        return { ...data, match };\n      }\n    }\n    return data;\n  });\n\n  // The final fuzzy matching pass. This is the lowest fidelity\n  // matching: it just find the first transaction that hasn't been\n  // matched yet. Remember the dataset only contains transactions\n  // around the same date with the same amount.\n  const transactionsStep3 = transactionsStep2.map(data => {\n    if (!data.match && data.fuzzyDataset) {\n      const match = data.fuzzyDataset.find(row => !hasMatched.has(row.id));\n      if (match) {\n        hasMatched.add(match.id);\n        return { ...data, match };\n      }\n    }\n    return data;\n  });\n\n  return {\n    payeesToCreate,\n    transactionsStep1,\n    transactionsStep2,\n    transactionsStep3,\n  };\n}\n\n// This is similar to `reconcileTransactions` except much simpler: it\n// does not try to match any transactions. It just adds them\nexport async function addTransactions(\n  acctId,\n  transactions,\n  { runTransfers = true, learnCategories = false } = {},\n) {\n  const added = [];\n\n  const { normalized, payeesToCreate } = await normalizeTransactions(\n    transactions,\n    acctId,\n    { rawPayeeName: true },\n  );\n\n  const accounts: db.DbAccount[] = await db.getAccounts();\n  const accountsMap = new Map(accounts.map(account => [account.id, account]));\n\n  for (const { trans: originalTrans, subtransactions } of normalized) {\n    // Run the rules\n    const trans = await runRules(originalTrans, accountsMap);\n\n    const finalTransaction = {\n      id: uuidv4(),\n      ...trans,\n      account: acctId,\n      cleared: trans.cleared != null ? trans.cleared : true,\n    };\n\n    // Add split transactions if they are given\n    const updatedSubtransactions =\n      finalTransaction.subtransactions || subtransactions;\n    if (updatedSubtransactions && updatedSubtransactions.length > 0) {\n      added.push(\n        ...makeSplitTransaction(finalTransaction, updatedSubtransactions),\n      );\n    } else {\n      added.push(finalTransaction);\n    }\n  }\n\n  await createNewPayees(payeesToCreate, added);\n\n  let newTransactions;\n  if (runTransfers || learnCategories) {\n    const res = await batchUpdateTransactions({\n      added,\n      learnCategories,\n      runTransfers,\n    });\n    newTransactions = res.added.map(t => t.id);\n  } else {\n    await batchMessages(async () => {\n      newTransactions = await Promise.all(\n        added.map(async trans => db.insertTransaction(trans)),\n      );\n    });\n  }\n  return newTransactions;\n}\n\nasync function processBankSyncDownload(\n  download,\n  id,\n  acctRow,\n  initialSync = false,\n) {\n  // If syncing an account from sync source it must not use strictIdChecking. This allows\n  // the fuzzy search to match transactions where the import IDs are different. It is a known quirk\n  // that account sync sources can give two different transaction IDs even though it's the same transaction.\n  const useStrictIdChecking = !acctRow.account_sync_source;\n\n  /** Starting balance is actually the current balance of the account. */\n  const {\n    transactions: originalTransactions,\n    startingBalance: currentBalance,\n  } = download;\n\n  if (initialSync) {\n    const { transactions } = download;\n    let balanceToUse = currentBalance;\n\n    if (acctRow.account_sync_source === 'simpleFin') {\n      const previousBalance = transactions.reduce((total, trans) => {\n        return (\n          total - parseInt(trans.transactionAmount.amount.replace('.', ''))\n        );\n      }, currentBalance);\n      balanceToUse = previousBalance;\n    }\n\n    if (acctRow.account_sync_source === 'pluggyai') {\n      const currentBalance = download.startingBalance;\n      const previousBalance = transactions.reduce(\n        (total, trans) => total - trans.transactionAmount.amount * 100,\n        currentBalance,\n      );\n      balanceToUse = Math.round(previousBalance);\n    }\n\n    const oldestTransaction = transactions[transactions.length - 1];\n\n    const oldestDate =\n      transactions.length > 0\n        ? oldestTransaction.date\n        : monthUtils.currentDay();\n\n    const payee = await getStartingBalancePayee();\n\n    return runMutator(async () => {\n      const initialId = await db.insertTransaction({\n        account: id,\n        amount: balanceToUse,\n        category: acctRow.offbudget === 0 ? payee.category : null,\n        payee: payee.id,\n        date: oldestDate,\n        cleared: true,\n        starting_balance_flag: true,\n      });\n\n      const result = await reconcileTransactions(\n        id,\n        transactions,\n        true,\n        useStrictIdChecking,\n      );\n      return {\n        ...result,\n        added: [initialId, ...result.added],\n      };\n    });\n  }\n\n  if (originalTransactions.length === 0) {\n    return { added: [], updated: [] };\n  }\n\n  const transactions = originalTransactions.map(trans => ({\n    ...trans,\n    account: id,\n  }));\n\n  return runMutator(async () => {\n    const result = await reconcileTransactions(\n      id,\n      transactions,\n      true,\n      useStrictIdChecking,\n    );\n\n    /** Starting balance is actually the current balance of the account. */\n    if (currentBalance) await updateAccountBalance(id, currentBalance);\n\n    return result;\n  });\n}\n\nexport async function syncAccount(\n  userId: string | undefined,\n  userKey: string | undefined,\n  id: string,\n  acctId: string,\n  bankId: string,\n) {\n  const acctRow = await db.select('accounts', id);\n\n  const syncStartDate = await getAccountSyncStartDate(id);\n  const oldestTransaction = await getAccountOldestTransaction(id);\n  const newAccount = oldestTransaction == null;\n\n  let download;\n  if (acctRow.account_sync_source === 'simpleFin') {\n    download = await downloadSimpleFinTransactions(acctId, syncStartDate);\n  } else if (acctRow.account_sync_source === 'pluggyai') {\n    download = await downloadPluggyAiTransactions(acctId, syncStartDate);\n  } else if (acctRow.account_sync_source === 'goCardless') {\n    download = await downloadGoCardlessTransactions(\n      userId,\n      userKey,\n      acctId,\n      bankId,\n      syncStartDate,\n      newAccount,\n    );\n  } else {\n    throw new Error(\n      `Unrecognized bank-sync provider: ${acctRow.account_sync_source}`,\n    );\n  }\n\n  return processBankSyncDownload(download, id, acctRow, newAccount);\n}\n\nexport async function simpleFinBatchSync(\n  accounts: Array<Pick<AccountEntity, 'id' | 'account_id'>>,\n) {\n  const startDates = await Promise.all(\n    accounts.map(async a => getAccountSyncStartDate(a.id)),\n  );\n\n  const res = await downloadSimpleFinTransactions(\n    accounts.map(a => a.account_id),\n    startDates,\n  );\n\n  const promises = [];\n  for (let i = 0; i < accounts.length; i++) {\n    const account = accounts[i];\n    const download = res[account.account_id];\n\n    const acctRow = await db.select('accounts', account.id);\n    const oldestTransaction = await getAccountOldestTransaction(account.id);\n    const newAccount = oldestTransaction == null;\n\n    if (download.error_code) {\n      promises.push(\n        Promise.resolve({\n          accountId: account.id,\n          res: download,\n        }),\n      );\n\n      continue;\n    }\n\n    promises.push(\n      processBankSyncDownload(download, account.id, acctRow, newAccount).then(\n        res => ({\n          accountId: account.id,\n          res,\n        }),\n      ),\n    );\n  }\n\n  return await Promise.all(promises);\n}\n","import { t } from 'i18next';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { captureException } from '../../platform/exceptions';\nimport * as asyncStorage from '../../platform/server/asyncStorage';\nimport * as connection from '../../platform/server/connection';\nimport { isNonProductionEnvironment } from '../../shared/environment';\nimport { dayFromDate } from '../../shared/months';\nimport * as monthUtils from '../../shared/months';\nimport { amountToInteger } from '../../shared/util';\nimport {\n  AccountEntity,\n  CategoryEntity,\n  SyncServerGoCardlessAccount,\n  TransactionEntity,\n  SyncServerSimpleFinAccount,\n  SyncServerPluggyAiAccount,\n  type GoCardlessToken,\n  ImportTransactionEntity,\n} from '../../types/models';\nimport { createApp } from '../app';\nimport * as db from '../db';\nimport {\n  APIError,\n  BankSyncError,\n  PostError,\n  TransactionError,\n} from '../errors';\nimport { app as mainApp } from '../main-app';\nimport { mutator } from '../mutators';\nimport { get, post } from '../post';\nimport { getServer } from '../server-config';\nimport { batchMessages } from '../sync';\nimport { undoable, withUndo } from '../undo';\n\nimport * as link from './link';\nimport { getStartingBalancePayee } from './payees';\nimport * as bankSync from './sync';\n\nexport type AccountHandlers = {\n  'account-update': typeof updateAccount;\n  'accounts-get': typeof getAccounts;\n  'account-balance': typeof getAccountBalance;\n  'account-properties': typeof getAccountProperties;\n  'gocardless-accounts-link': typeof linkGoCardlessAccount;\n  'simplefin-accounts-link': typeof linkSimpleFinAccount;\n  'pluggyai-accounts-link': typeof linkPluggyAiAccount;\n  'account-create': typeof createAccount;\n  'account-close': typeof closeAccount;\n  'account-reopen': typeof reopenAccount;\n  'account-move': typeof moveAccount;\n  'secret-set': typeof setSecret;\n  'secret-check': typeof checkSecret;\n  'gocardless-poll-web-token': typeof pollGoCardlessWebToken;\n  'gocardless-poll-web-token-stop': typeof stopGoCardlessWebTokenPolling;\n  'gocardless-status': typeof goCardlessStatus;\n  'simplefin-status': typeof simpleFinStatus;\n  'pluggyai-status': typeof pluggyAiStatus;\n  'simplefin-accounts': typeof simpleFinAccounts;\n  'pluggyai-accounts': typeof pluggyAiAccounts;\n  'gocardless-get-banks': typeof getGoCardlessBanks;\n  'gocardless-create-web-token': typeof createGoCardlessWebToken;\n  'accounts-bank-sync': typeof accountsBankSync;\n  'simplefin-batch-sync': typeof simpleFinBatchSync;\n  'transactions-import': typeof importTransactions;\n  'account-unlink': typeof unlinkAccount;\n};\n\nasync function updateAccount({\n  id,\n  name,\n  last_reconciled,\n}: Pick<AccountEntity, 'id' | 'name'> &\n  Partial<Pick<AccountEntity, 'last_reconciled'>>) {\n  await db.update('accounts', {\n    id,\n    name,\n    ...(last_reconciled && { last_reconciled }),\n  });\n  return {};\n}\n\nasync function getAccounts() {\n  return db.getAccounts();\n}\n\nasync function getAccountBalance({\n  id,\n  cutoff,\n}: {\n  id: string;\n  cutoff: string | Date;\n}) {\n  const result = await db.first<{ balance: number }>(\n    'SELECT sum(amount) as balance FROM transactions WHERE acct = ? AND isParent = 0 AND tombstone = 0 AND date <= ?',\n    [id, db.toDateRepr(dayFromDate(cutoff))],\n  );\n  return result?.balance ? result.balance : 0;\n}\n\nasync function getAccountProperties({ id }: { id: AccountEntity['id'] }) {\n  const balanceResult = await db.first<{ balance: number }>(\n    'SELECT sum(amount) as balance FROM transactions WHERE acct = ? AND isParent = 0 AND tombstone = 0',\n    [id],\n  );\n  const countResult = await db.first<{ count: number }>(\n    'SELECT count(id) as count FROM transactions WHERE acct = ? AND tombstone = 0',\n    [id],\n  );\n\n  return {\n    balance: balanceResult?.balance || 0,\n    numTransactions: countResult?.count || 0,\n  };\n}\n\nasync function linkGoCardlessAccount({\n  requisitionId,\n  account,\n  upgradingId,\n  offBudget = false,\n}: {\n  requisitionId: string;\n  account: SyncServerGoCardlessAccount;\n  upgradingId?: AccountEntity['id'] | undefined;\n  offBudget?: boolean | undefined;\n}) {\n  let id;\n  const bank = await link.findOrCreateBank(account.institution, requisitionId);\n\n  if (upgradingId) {\n    const accRow = await db.first<db.DbAccount>(\n      'SELECT * FROM accounts WHERE id = ?',\n      [upgradingId],\n    );\n\n    if (!accRow) {\n      throw new Error(`Account with ID ${upgradingId} not found.`);\n    }\n\n    id = accRow.id;\n    await db.update('accounts', {\n      id,\n      account_id: account.account_id,\n      bank: bank.id,\n      account_sync_source: 'goCardless',\n    });\n  } else {\n    id = uuidv4();\n    await db.insertWithUUID('accounts', {\n      id,\n      account_id: account.account_id,\n      mask: account.mask,\n      name: account.name,\n      official_name: account.official_name,\n      bank: bank.id,\n      offbudget: offBudget ? 1 : 0,\n      account_sync_source: 'goCardless',\n    });\n    await db.insertPayee({\n      name: '',\n      transfer_acct: id,\n    });\n  }\n\n  await bankSync.syncAccount(\n    undefined,\n    undefined,\n    id,\n    account.account_id,\n    bank.bank_id,\n  );\n\n  connection.send('sync-event', {\n    type: 'success',\n    tables: ['transactions'],\n  });\n\n  return 'ok';\n}\n\nasync function linkSimpleFinAccount({\n  externalAccount,\n  upgradingId,\n  offBudget = false,\n}: {\n  externalAccount: SyncServerSimpleFinAccount;\n  upgradingId?: AccountEntity['id'] | undefined;\n  offBudget?: boolean | undefined;\n}) {\n  let id;\n\n  const institution = {\n    name: externalAccount.institution ?? t('Unknown'),\n  };\n\n  const bank = await link.findOrCreateBank(\n    institution,\n    externalAccount.orgDomain ?? externalAccount.orgId,\n  );\n\n  if (upgradingId) {\n    const accRow = await db.first<db.DbAccount>(\n      'SELECT * FROM accounts WHERE id = ?',\n      [upgradingId],\n    );\n\n    if (!accRow) {\n      throw new Error(`Account with ID ${upgradingId} not found.`);\n    }\n\n    id = accRow.id;\n    await db.update('accounts', {\n      id,\n      account_id: externalAccount.account_id,\n      bank: bank.id,\n      account_sync_source: 'simpleFin',\n    });\n  } else {\n    id = uuidv4();\n    await db.insertWithUUID('accounts', {\n      id,\n      account_id: externalAccount.account_id,\n      name: externalAccount.name,\n      official_name: externalAccount.name,\n      bank: bank.id,\n      offbudget: offBudget ? 1 : 0,\n      account_sync_source: 'simpleFin',\n    });\n    await db.insertPayee({\n      name: '',\n      transfer_acct: id,\n    });\n  }\n\n  await bankSync.syncAccount(\n    undefined,\n    undefined,\n    id,\n    externalAccount.account_id,\n    bank.bank_id,\n  );\n\n  await connection.send('sync-event', {\n    type: 'success',\n    tables: ['transactions'],\n  });\n\n  return 'ok';\n}\n\nasync function linkPluggyAiAccount({\n  externalAccount,\n  upgradingId,\n  offBudget = false,\n}: {\n  externalAccount: SyncServerPluggyAiAccount;\n  upgradingId?: AccountEntity['id'] | undefined;\n  offBudget?: boolean | undefined;\n}) {\n  let id;\n\n  const institution = {\n    name: externalAccount.institution ?? t('Unknown'),\n  };\n\n  const bank = await link.findOrCreateBank(\n    institution,\n    externalAccount.orgDomain ?? externalAccount.orgId,\n  );\n\n  if (upgradingId) {\n    const accRow = await db.first<db.DbAccount>(\n      'SELECT * FROM accounts WHERE id = ?',\n      [upgradingId],\n    );\n\n    if (!accRow) {\n      throw new Error(`Account with ID ${upgradingId} not found.`);\n    }\n\n    id = accRow.id;\n    await db.update('accounts', {\n      id,\n      account_id: externalAccount.account_id,\n      bank: bank.id,\n      account_sync_source: 'pluggyai',\n    });\n  } else {\n    id = uuidv4();\n    await db.insertWithUUID('accounts', {\n      id,\n      account_id: externalAccount.account_id,\n      name: externalAccount.name,\n      official_name: externalAccount.name,\n      bank: bank.id,\n      offbudget: offBudget ? 1 : 0,\n      account_sync_source: 'pluggyai',\n    });\n    await db.insertPayee({\n      name: '',\n      transfer_acct: id,\n    });\n  }\n\n  await bankSync.syncAccount(\n    undefined,\n    undefined,\n    id,\n    externalAccount.account_id,\n    bank.bank_id,\n  );\n\n  await connection.send('sync-event', {\n    type: 'success',\n    tables: ['transactions'],\n  });\n\n  return 'ok';\n}\n\nasync function createAccount({\n  name,\n  balance = 0,\n  offBudget = false,\n  closed = false,\n}: {\n  name: string;\n  balance?: number | undefined;\n  offBudget?: boolean | undefined;\n  closed?: boolean | undefined;\n}) {\n  const id: AccountEntity['id'] = await db.insertAccount({\n    name,\n    offbudget: offBudget ? 1 : 0,\n    closed: closed ? 1 : 0,\n  });\n\n  await db.insertPayee({\n    name: '',\n    transfer_acct: id,\n  });\n\n  if (balance != null && balance !== 0) {\n    const payee = await getStartingBalancePayee();\n\n    await db.insertTransaction({\n      account: id,\n      amount: amountToInteger(balance),\n      category: offBudget ? null : payee.category,\n      payee: payee.id,\n      date: monthUtils.currentDay(),\n      cleared: true,\n      starting_balance_flag: true,\n    });\n  }\n\n  return id;\n}\n\nasync function closeAccount({\n  id,\n  transferAccountId,\n  categoryId,\n  forced = false,\n}: {\n  id: AccountEntity['id'];\n  transferAccountId?: AccountEntity['id'] | undefined;\n  categoryId?: CategoryEntity['id'] | undefined;\n  forced?: boolean | undefined;\n}) {\n  // Unlink the account if it's linked. This makes sure to remove it from\n  // bank-sync providers. (This should not be undo-able, as it mutates the\n  // remote server and the user will have to link the account again)\n  await unlinkAccount({ id });\n\n  return withUndo(async () => {\n    const account = await db.first<db.DbAccount>(\n      'SELECT * FROM accounts WHERE id = ? AND tombstone = 0',\n      [id],\n    );\n\n    // Do nothing if the account doesn't exist or it's already been\n    // closed\n    if (!account || account.closed === 1) {\n      return;\n    }\n\n    const { balance, numTransactions } = await getAccountProperties({ id });\n\n    // If there are no transactions, we can simply delete the account\n    if (numTransactions === 0) {\n      await db.deleteAccount({ id });\n    } else if (forced) {\n      const rows = await db.runQuery<\n        Pick<db.DbViewTransaction, 'id' | 'transfer_id'>\n      >(\n        'SELECT id, transfer_id FROM v_transactions WHERE account = ?',\n        [id],\n        true,\n      );\n\n      const transferPayee = await db.first<Pick<db.DbPayee, 'id'>>(\n        'SELECT id FROM payees WHERE transfer_acct = ?',\n        [id],\n      );\n\n      if (!transferPayee) {\n        throw new Error(`Transfer payee with account ID ${id} not found.`);\n      }\n\n      await batchMessages(async () => {\n        // TODO: what this should really do is send a special message that\n        // automatically marks the tombstone value for all transactions\n        // within an account... or something? This is problematic\n        // because another client could easily add new data that\n        // should be marked as deleted.\n\n        rows.forEach(row => {\n          if (row.transfer_id) {\n            db.updateTransaction({\n              id: row.transfer_id,\n              payee: null,\n              transfer_id: null,\n            });\n          }\n\n          db.deleteTransaction({ id: row.id });\n        });\n\n        db.deleteAccount({ id });\n        db.deleteTransferPayee({ id: transferPayee.id });\n      });\n    } else {\n      if (balance !== 0 && transferAccountId == null) {\n        throw APIError('balance is non-zero: transferAccountId is required');\n      }\n\n      await db.update('accounts', { id, closed: 1 });\n\n      // If there is a balance we need to transfer it to the specified\n      // account (and possibly categorize it)\n      if (balance !== 0 && transferAccountId) {\n        const transferPayee = await db.first<Pick<db.DbPayee, 'id'>>(\n          'SELECT id FROM payees WHERE transfer_acct = ?',\n          [transferAccountId],\n        );\n\n        if (!transferPayee) {\n          throw new Error(\n            `Transfer payee with account ID ${transferAccountId} not found.`,\n          );\n        }\n\n        await mainApp.handlers['transaction-add']({\n          id: uuidv4(),\n          payee: transferPayee.id,\n          amount: -balance,\n          account: id,\n          date: monthUtils.currentDay(),\n          notes: 'Closing account',\n          category: categoryId,\n        });\n      }\n    }\n  });\n}\n\nasync function reopenAccount({ id }: { id: AccountEntity['id'] }) {\n  await db.update('accounts', { id, closed: 0 });\n}\n\nasync function moveAccount({\n  id,\n  targetId,\n}: {\n  id: AccountEntity['id'];\n  targetId: AccountEntity['id'] | null;\n}) {\n  await db.moveAccount(id, targetId);\n}\n\nasync function setSecret({\n  name,\n  value,\n}: {\n  name: string;\n  value: string | null;\n}) {\n  const userToken = await asyncStorage.getItem('user-token');\n\n  if (!userToken) {\n    return { error: 'unauthorized' };\n  }\n\n  const serverConfig = getServer();\n  if (!serverConfig) {\n    throw new Error('Failed to get server config.');\n  }\n\n  try {\n    return await post(\n      serverConfig.BASE_SERVER + '/secret',\n      {\n        name,\n        value,\n      },\n      {\n        'X-ACTUAL-TOKEN': userToken,\n      },\n    );\n  } catch (error) {\n    return {\n      error: 'failed',\n      reason: error instanceof PostError ? error.reason : undefined,\n    };\n  }\n}\nasync function checkSecret(name: string) {\n  const userToken = await asyncStorage.getItem('user-token');\n\n  if (!userToken) {\n    return { error: 'unauthorized' };\n  }\n\n  const serverConfig = getServer();\n  if (!serverConfig) {\n    throw new Error('Failed to get server config.');\n  }\n\n  try {\n    return await get(serverConfig.BASE_SERVER + '/secret/' + name, {\n      'X-ACTUAL-TOKEN': userToken,\n    });\n  } catch (error) {\n    console.error(error);\n    return { error: 'failed' };\n  }\n}\n\nlet stopPolling = false;\n\nasync function pollGoCardlessWebToken({\n  requisitionId,\n}: {\n  requisitionId: string;\n}) {\n  const userToken = await asyncStorage.getItem('user-token');\n  if (!userToken) return { error: 'unknown' };\n\n  const startTime = Date.now();\n  stopPolling = false;\n\n  async function getData(\n    cb: (\n      data:\n        | { status: 'timeout' }\n        | { status: 'unknown'; message?: string }\n        | { status: 'success'; data: GoCardlessToken },\n    ) => void,\n  ) {\n    if (stopPolling) {\n      return;\n    }\n\n    if (Date.now() - startTime >= 1000 * 60 * 10) {\n      cb({ status: 'timeout' });\n      return;\n    }\n\n    const serverConfig = getServer();\n    if (!serverConfig) {\n      throw new Error('Failed to get server config.');\n    }\n\n    const data = await post(\n      serverConfig.GOCARDLESS_SERVER + '/get-accounts',\n      {\n        requisitionId,\n      },\n      {\n        'X-ACTUAL-TOKEN': userToken,\n      },\n    );\n\n    if (data) {\n      if (data.error_code) {\n        console.error('Failed linking gocardless account:', data);\n        cb({ status: 'unknown', message: data.error_type });\n      } else {\n        cb({ status: 'success', data });\n      }\n    } else {\n      setTimeout(() => getData(cb), 3000);\n    }\n  }\n\n  return new Promise(resolve => {\n    getData(data => {\n      if (data.status === 'success') {\n        resolve({ data: data.data });\n        return;\n      }\n\n      if (data.status === 'timeout') {\n        resolve({ error: data.status });\n        return;\n      }\n\n      resolve({\n        error: data.status,\n        message: data.message,\n      });\n    });\n  });\n}\n\nasync function stopGoCardlessWebTokenPolling() {\n  stopPolling = true;\n  return 'ok';\n}\n\nasync function goCardlessStatus() {\n  const userToken = await asyncStorage.getItem('user-token');\n\n  if (!userToken) {\n    return { error: 'unauthorized' };\n  }\n\n  const serverConfig = getServer();\n  if (!serverConfig) {\n    throw new Error('Failed to get server config.');\n  }\n\n  return post(\n    serverConfig.GOCARDLESS_SERVER + '/status',\n    {},\n    {\n      'X-ACTUAL-TOKEN': userToken,\n    },\n  );\n}\n\nasync function simpleFinStatus() {\n  const userToken = await asyncStorage.getItem('user-token');\n\n  if (!userToken) {\n    return { error: 'unauthorized' };\n  }\n\n  const serverConfig = getServer();\n  if (!serverConfig) {\n    throw new Error('Failed to get server config.');\n  }\n\n  return post(\n    serverConfig.SIMPLEFIN_SERVER + '/status',\n    {},\n    {\n      'X-ACTUAL-TOKEN': userToken,\n    },\n  );\n}\n\nasync function pluggyAiStatus() {\n  const userToken = await asyncStorage.getItem('user-token');\n\n  if (!userToken) {\n    return { error: 'unauthorized' };\n  }\n\n  const serverConfig = getServer();\n  if (!serverConfig) {\n    throw new Error('Failed to get server config.');\n  }\n\n  return post(\n    serverConfig.PLUGGYAI_SERVER + '/status',\n    {},\n    {\n      'X-ACTUAL-TOKEN': userToken,\n    },\n  );\n}\n\nasync function simpleFinAccounts() {\n  const userToken = await asyncStorage.getItem('user-token');\n\n  if (!userToken) {\n    return { error: 'unauthorized' };\n  }\n\n  const serverConfig = getServer();\n  if (!serverConfig) {\n    throw new Error('Failed to get server config.');\n  }\n\n  try {\n    return await post(\n      serverConfig.SIMPLEFIN_SERVER + '/accounts',\n      {},\n      {\n        'X-ACTUAL-TOKEN': userToken,\n      },\n      60000,\n    );\n  } catch (error) {\n    return { error_code: 'TIMED_OUT' };\n  }\n}\n\nasync function pluggyAiAccounts() {\n  const userToken = await asyncStorage.getItem('user-token');\n\n  if (!userToken) {\n    return { error: 'unauthorized' };\n  }\n\n  const serverConfig = getServer();\n  if (!serverConfig) {\n    throw new Error('Failed to get server config.');\n  }\n\n  try {\n    return await post(\n      serverConfig.PLUGGYAI_SERVER + '/accounts',\n      {},\n      {\n        'X-ACTUAL-TOKEN': userToken,\n      },\n      60000,\n    );\n  } catch (error) {\n    return { error_code: 'TIMED_OUT' };\n  }\n}\n\nasync function getGoCardlessBanks(country: string) {\n  const userToken = await asyncStorage.getItem('user-token');\n\n  if (!userToken) {\n    return { error: 'unauthorized' };\n  }\n\n  const serverConfig = getServer();\n  if (!serverConfig) {\n    throw new Error('Failed to get server config.');\n  }\n\n  return post(\n    serverConfig.GOCARDLESS_SERVER + '/get-banks',\n    { country, showDemo: isNonProductionEnvironment() },\n    {\n      'X-ACTUAL-TOKEN': userToken,\n    },\n  );\n}\n\nasync function createGoCardlessWebToken({\n  institutionId,\n  accessValidForDays,\n}: {\n  institutionId: string;\n  accessValidForDays: number;\n}) {\n  const userToken = await asyncStorage.getItem('user-token');\n\n  if (!userToken) {\n    return { error: 'unauthorized' };\n  }\n\n  const serverConfig = getServer();\n  if (!serverConfig) {\n    throw new Error('Failed to get server config.');\n  }\n\n  try {\n    return await post(\n      serverConfig.GOCARDLESS_SERVER + '/create-web-token',\n      {\n        institutionId,\n        accessValidForDays,\n      },\n      {\n        'X-ACTUAL-TOKEN': userToken,\n      },\n    );\n  } catch (error) {\n    console.error(error);\n    return { error: 'failed' };\n  }\n}\n\ntype SyncResponse = {\n  newTransactions: Array<TransactionEntity['id']>;\n  matchedTransactions: Array<TransactionEntity['id']>;\n  updatedAccounts: Array<AccountEntity['id']>;\n};\n\nasync function handleSyncResponse(\n  res: {\n    added: Array<TransactionEntity['id']>;\n    updated: Array<TransactionEntity['id']>;\n  },\n  acct: db.DbAccount,\n): Promise<SyncResponse> {\n  const { added, updated } = res;\n  const newTransactions: Array<TransactionEntity['id']> = [];\n  const matchedTransactions: Array<TransactionEntity['id']> = [];\n  const updatedAccounts: Array<AccountEntity['id']> = [];\n\n  newTransactions.push(...added);\n  matchedTransactions.push(...updated);\n\n  if (added.length > 0) {\n    updatedAccounts.push(acct.id);\n  }\n\n  const ts = new Date().getTime().toString();\n  await db.update('accounts', { id: acct.id, last_sync: ts });\n\n  return {\n    newTransactions,\n    matchedTransactions,\n    updatedAccounts,\n  };\n}\n\ntype SyncError =\n  | {\n      type: 'SyncError';\n      accountId: AccountEntity['id'];\n      message: string;\n      category: string;\n      code: string;\n    }\n  | {\n      accountId: AccountEntity['id'];\n      message: string;\n      internal?: string;\n    };\n\nfunction handleSyncError(\n  err: Error | PostError | BankSyncError,\n  acct: db.DbAccount,\n): SyncError {\n  // TODO: refactor bank sync logic to use BankSyncError properly\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (err instanceof BankSyncError || (err as any)?.type === 'BankSyncError') {\n    const error = err as BankSyncError;\n\n    const syncError = {\n      type: 'SyncError',\n      accountId: acct.id,\n      message: 'Failed syncing account “' + acct.name + '.”',\n      category: error.category,\n      code: error.code,\n    };\n\n    if (error.category === 'RATE_LIMIT_EXCEEDED') {\n      return {\n        ...syncError,\n        message: `Failed syncing account ${acct.name}. Rate limit exceeded. Please try again later.`,\n      };\n    }\n\n    return syncError;\n  }\n\n  if (err instanceof PostError && err.reason !== 'internal') {\n    return {\n      accountId: acct.id,\n      message: err.reason\n        ? err.reason\n        : `Account “${acct.name}” is not linked properly. Please link it again.`,\n    };\n  }\n\n  return {\n    accountId: acct.id,\n    message:\n      'There was an internal error. Please get in touch https://actualbudget.org/contact for support.',\n    internal: err.stack,\n  };\n}\n\nexport type SyncResponseWithErrors = SyncResponse & {\n  errors: SyncError[];\n};\n\nasync function accountsBankSync({\n  ids = [],\n}: {\n  ids: Array<AccountEntity['id']>;\n}): Promise<SyncResponseWithErrors> {\n  const { 'user-id': userId, 'user-key': userKey } =\n    await asyncStorage.multiGet(['user-id', 'user-key']);\n\n  const accounts = await db.runQuery<\n    db.DbAccount & { bankId: db.DbBank['bank_id'] }\n  >(\n    `\n    SELECT a.*, b.bank_id as bankId\n    FROM accounts a\n    LEFT JOIN banks b ON a.bank = b.id\n    WHERE a.tombstone = 0 AND a.closed = 0\n      ${ids.length ? `AND a.id IN (${ids.map(() => '?').join(', ')})` : ''}\n    ORDER BY a.offbudget, a.sort_order\n  `,\n    ids,\n    true,\n  );\n\n  const errors: ReturnType<typeof handleSyncError>[] = [];\n  const newTransactions: Array<TransactionEntity['id']> = [];\n  const matchedTransactions: Array<TransactionEntity['id']> = [];\n  const updatedAccounts: Array<AccountEntity['id']> = [];\n\n  for (const acct of accounts) {\n    if (acct.bankId && acct.account_id) {\n      try {\n        console.group('Bank Sync operation for account:', acct.name);\n        const syncResponse = await bankSync.syncAccount(\n          userId as string,\n          userKey as string,\n          acct.id,\n          acct.account_id,\n          acct.bankId,\n        );\n\n        const syncResponseData = await handleSyncResponse(syncResponse, acct);\n\n        newTransactions.push(...syncResponseData.newTransactions);\n        matchedTransactions.push(...syncResponseData.matchedTransactions);\n        updatedAccounts.push(...syncResponseData.updatedAccounts);\n      } catch (err) {\n        const error = err as Error;\n        errors.push(handleSyncError(error, acct));\n        captureException({\n          ...error,\n          message: 'Failed syncing account “' + acct.name + '.”',\n        } as Error);\n      } finally {\n        console.groupEnd();\n      }\n    }\n  }\n\n  if (updatedAccounts.length > 0) {\n    connection.send('sync-event', {\n      type: 'success',\n      tables: ['transactions'],\n    });\n  }\n\n  return { errors, newTransactions, matchedTransactions, updatedAccounts };\n}\n\nasync function simpleFinBatchSync({\n  ids = [],\n}: {\n  ids: Array<AccountEntity['id']>;\n}): Promise<\n  Array<{ accountId: AccountEntity['id']; res: SyncResponseWithErrors }>\n> {\n  const accounts = await db.runQuery<\n    db.DbAccount & { bankId: db.DbBank['bank_id'] }\n  >(\n    `SELECT a.*, b.bank_id as bankId FROM accounts a\n         LEFT JOIN banks b ON a.bank = b.id\n         WHERE\n          a.tombstone = 0\n          AND a.closed = 0\n          AND a.account_sync_source = 'simpleFin'\n          ${ids.length ? `AND a.id IN (${ids.map(() => '?').join(', ')})` : ''}\n         ORDER BY a.offbudget, a.sort_order`,\n    ids.length ? ids : [],\n    true,\n  );\n\n  const retVal: Array<{\n    accountId: AccountEntity['id'];\n    res: {\n      errors: ReturnType<typeof handleSyncError>[];\n      newTransactions: Array<TransactionEntity['id']>;\n      matchedTransactions: Array<TransactionEntity['id']>;\n      updatedAccounts: Array<AccountEntity['id']>;\n    };\n  }> = [];\n\n  console.group('Bank Sync operation for all SimpleFin accounts');\n  try {\n    const syncResponses: Array<{\n      accountId: AccountEntity['id'];\n      res: {\n        error_code: string;\n        error_type: string;\n        added: Array<TransactionEntity['id']>;\n        updated: Array<TransactionEntity['id']>;\n      };\n    }> = await bankSync.simpleFinBatchSync(\n      accounts.map(a => ({\n        id: a.id,\n        account_id: a.account_id || null,\n      })),\n    );\n    for (const syncResponse of syncResponses) {\n      const account = accounts.find(a => a.id === syncResponse.accountId);\n      if (!account) {\n        console.error(\n          `Invalid account ID found in response: ${syncResponse.accountId}. Proceeding to the next account...`,\n        );\n        continue;\n      }\n\n      const errors: ReturnType<typeof handleSyncError>[] = [];\n      const newTransactions: Array<TransactionEntity['id']> = [];\n      const matchedTransactions: Array<TransactionEntity['id']> = [];\n      const updatedAccounts: Array<AccountEntity['id']> = [];\n\n      if (syncResponse.res.error_code) {\n        errors.push(\n          handleSyncError(\n            {\n              type: 'BankSyncError',\n              reason: 'Failed syncing account “' + account.name + '.”',\n              category: syncResponse.res.error_type,\n              code: syncResponse.res.error_code,\n            } as BankSyncError,\n            account,\n          ),\n        );\n      } else {\n        const syncResponseData = await handleSyncResponse(\n          syncResponse.res,\n          account,\n        );\n\n        newTransactions.push(...syncResponseData.newTransactions);\n        matchedTransactions.push(...syncResponseData.matchedTransactions);\n        updatedAccounts.push(...syncResponseData.updatedAccounts);\n      }\n\n      retVal.push({\n        accountId: syncResponse.accountId,\n        res: { errors, newTransactions, matchedTransactions, updatedAccounts },\n      });\n    }\n  } catch (err) {\n    const errors = [];\n    for (const account of accounts) {\n      retVal.push({\n        accountId: account.id,\n        res: {\n          errors,\n          newTransactions: [],\n          matchedTransactions: [],\n          updatedAccounts: [],\n        },\n      });\n      const error = err as Error;\n      errors.push(handleSyncError(error, account));\n    }\n  }\n\n  if (retVal.some(a => a.res.updatedAccounts.length > 0)) {\n    connection.send('sync-event', {\n      type: 'success',\n      tables: ['transactions'],\n    });\n  }\n\n  console.groupEnd();\n\n  return retVal;\n}\n\nexport type ImportTransactionsResult = bankSync.ReconcileTransactionsResult & {\n  errors: Array<{\n    message: string;\n  }>;\n};\n\nasync function importTransactions({\n  accountId,\n  transactions,\n  isPreview,\n  opts,\n}: {\n  accountId: AccountEntity['id'];\n  transactions: ImportTransactionEntity[];\n  isPreview: boolean;\n  opts?: {\n    defaultCleared?: boolean;\n  };\n}): Promise<ImportTransactionsResult> {\n  if (typeof accountId !== 'string') {\n    throw APIError('transactions-import: accountId must be an id');\n  }\n\n  try {\n    const reconciled = await bankSync.reconcileTransactions(\n      accountId,\n      transactions,\n      false,\n      true,\n      isPreview,\n      opts?.defaultCleared,\n    );\n    return {\n      errors: [],\n      added: reconciled.added,\n      updated: reconciled.updated,\n      updatedPreview: reconciled.updatedPreview,\n    };\n  } catch (err) {\n    if (err instanceof TransactionError) {\n      return {\n        errors: [{ message: err.message }],\n        added: [],\n        updated: [],\n        updatedPreview: [],\n      };\n    }\n\n    throw err;\n  }\n}\n\nasync function unlinkAccount({ id }: { id: AccountEntity['id'] }) {\n  const accRow = await db.first<db.DbAccount>(\n    'SELECT * FROM accounts WHERE id = ?',\n    [id],\n  );\n\n  if (!accRow) {\n    throw new Error(`Account with ID ${id} not found.`);\n  }\n\n  const bankId = accRow.bank;\n\n  if (!bankId) {\n    return 'ok';\n  }\n\n  const isGoCardless = accRow.account_sync_source === 'goCardless';\n\n  await db.updateAccount({\n    id,\n    account_id: null,\n    bank: null,\n    balance_current: null,\n    balance_available: null,\n    balance_limit: null,\n    account_sync_source: null,\n  });\n\n  if (isGoCardless === false) {\n    return;\n  }\n\n  const accountWithBankResult = await db.first<{ count: number }>(\n    'SELECT COUNT(*) as count FROM accounts WHERE bank = ?',\n    [bankId],\n  );\n\n  // No more accounts are associated with this bank. We can remove\n  // it from GoCardless.\n  const userToken = await asyncStorage.getItem('user-token');\n  if (!userToken) {\n    return 'ok';\n  }\n\n  if (!accountWithBankResult || accountWithBankResult.count === 0) {\n    const bank = await db.first<Pick<db.DbBank, 'bank_id'>>(\n      'SELECT bank_id FROM banks WHERE id = ?',\n      [bankId],\n    );\n\n    if (!bank) {\n      throw new Error(`Bank with ID ${bankId} not found.`);\n    }\n\n    const serverConfig = getServer();\n    if (!serverConfig) {\n      throw new Error('Failed to get server config.');\n    }\n\n    const requisitionId = bank.bank_id;\n\n    try {\n      await post(\n        serverConfig.GOCARDLESS_SERVER + '/remove-account',\n        {\n          requisitionId,\n        },\n        {\n          'X-ACTUAL-TOKEN': userToken,\n        },\n      );\n    } catch (error) {\n      console.log({ error });\n    }\n  }\n\n  return 'ok';\n}\n\nexport const app = createApp<AccountHandlers>();\n\napp.method('account-update', mutator(undoable(updateAccount)));\napp.method('accounts-get', getAccounts);\napp.method('account-balance', getAccountBalance);\napp.method('account-properties', getAccountProperties);\napp.method('gocardless-accounts-link', linkGoCardlessAccount);\napp.method('simplefin-accounts-link', linkSimpleFinAccount);\napp.method('pluggyai-accounts-link', linkPluggyAiAccount);\napp.method('account-create', mutator(undoable(createAccount)));\napp.method('account-close', mutator(closeAccount));\napp.method('account-reopen', mutator(undoable(reopenAccount)));\napp.method('account-move', mutator(undoable(moveAccount)));\napp.method('secret-set', setSecret);\napp.method('secret-check', checkSecret);\napp.method('gocardless-poll-web-token', pollGoCardlessWebToken);\napp.method('gocardless-poll-web-token-stop', stopGoCardlessWebTokenPolling);\napp.method('gocardless-status', goCardlessStatus);\napp.method('simplefin-status', simpleFinStatus);\napp.method('pluggyai-status', pluggyAiStatus);\napp.method('simplefin-accounts', simpleFinAccounts);\napp.method('pluggyai-accounts', pluggyAiAccounts);\napp.method('gocardless-get-banks', getGoCardlessBanks);\napp.method('gocardless-create-web-token', createGoCardlessWebToken);\napp.method('accounts-bank-sync', accountsBankSync);\napp.method('simplefin-batch-sync', simpleFinBatchSync);\napp.method('transactions-import', mutator(undoable(importTransactions)));\napp.method('account-unlink', mutator(unlinkAccount));\n","// @ts-strict-ignore\nimport * as asyncStorage from '../../platform/server/asyncStorage';\nimport {\n  UserAvailable,\n  UserEntity,\n  NewUserAccessEntity,\n} from '../../types/models';\nimport { createApp } from '../app';\nimport { del, get, patch, post } from '../post';\nimport { getServer } from '../server-config';\n\nexport type AdminHandlers = {\n  'users-get': typeof getUsers;\n  'user-delete-all': typeof deleteAllUsers;\n  'user-add': typeof addUser;\n  'user-update': typeof updateUser;\n  'access-add': typeof addAccess;\n  'access-delete-all': typeof deleteAllAccess;\n  'access-get-available-users': typeof accessGetAvailableUsers;\n  'transfer-ownership': typeof transferOwnership;\n  'owner-created': typeof ownerCreated;\n};\n\n// Expose functions to the client\nexport const app = createApp<AdminHandlers>();\n\napp.method('users-get', getUsers);\napp.method('user-delete-all', deleteAllUsers);\napp.method('user-add', addUser);\napp.method('user-update', updateUser);\napp.method('access-add', addAccess);\napp.method('access-delete-all', deleteAllAccess);\napp.method('access-get-available-users', accessGetAvailableUsers);\napp.method('transfer-ownership', transferOwnership);\napp.method('owner-created', ownerCreated);\n\nasync function getUsers() {\n  const userToken = await asyncStorage.getItem('user-token');\n\n  if (userToken) {\n    const res = await get(getServer().BASE_SERVER + '/admin/users/', {\n      headers: {\n        'X-ACTUAL-TOKEN': userToken,\n      },\n    });\n\n    if (res) {\n      try {\n        const list = JSON.parse(res) as UserEntity[];\n        return list;\n      } catch (err) {\n        return { error: 'Failed to parse response: ' + err.message };\n      }\n    }\n  }\n\n  return null;\n}\n\nasync function deleteAllUsers(\n  ids: Array<UserEntity['id']>,\n): Promise<\n  { someDeletionsFailed: boolean; ids?: number[] } | { error: string }\n> {\n  const userToken = await asyncStorage.getItem('user-token');\n  if (userToken) {\n    try {\n      const res = await del(\n        getServer().BASE_SERVER + '/admin/users',\n        {\n          ids,\n        },\n        {\n          'X-ACTUAL-TOKEN': userToken,\n        },\n      );\n\n      if (res) {\n        return res;\n      }\n    } catch (err) {\n      return { error: err.reason };\n    }\n  }\n\n  return { someDeletionsFailed: true };\n}\n\nasync function addUser(\n  user: Omit<UserEntity, 'id'>,\n): Promise<{ error: string } | { id: string }> {\n  const userToken = await asyncStorage.getItem('user-token');\n\n  if (userToken) {\n    try {\n      const res = await post(getServer().BASE_SERVER + '/admin/users/', user, {\n        'X-ACTUAL-TOKEN': userToken,\n      });\n\n      return res as UserEntity;\n    } catch (err) {\n      return { error: err.reason };\n    }\n  }\n\n  return null;\n}\n\nasync function updateUser(\n  user: Omit<UserEntity, 'id'>,\n): Promise<{ error: string } | { id: string }> {\n  const userToken = await asyncStorage.getItem('user-token');\n\n  if (userToken) {\n    try {\n      const res = await patch(getServer().BASE_SERVER + '/admin/users/', user, {\n        'X-ACTUAL-TOKEN': userToken,\n      });\n\n      return res as UserEntity;\n    } catch (err) {\n      return { error: err.reason };\n    }\n  }\n\n  return null;\n}\n\nasync function addAccess(\n  access: NewUserAccessEntity,\n): Promise<{ error?: string } | Record<string, never>> {\n  const userToken = await asyncStorage.getItem('user-token');\n\n  if (userToken) {\n    try {\n      await post(getServer().BASE_SERVER + '/admin/access/', access, {\n        'X-ACTUAL-TOKEN': userToken,\n      });\n\n      return {};\n    } catch (err) {\n      return { error: err.reason };\n    }\n  }\n\n  return null;\n}\n\nasync function deleteAllAccess({\n  fileId,\n  ids,\n}: {\n  fileId: string;\n  ids: string[];\n}): Promise<\n  { someDeletionsFailed: boolean; ids?: number[] } | { error: unknown }\n> {\n  const userToken = await asyncStorage.getItem('user-token');\n  if (userToken) {\n    try {\n      const res = await del(\n        getServer().BASE_SERVER + `/admin/access?fileId=${fileId}`,\n        {\n          token: userToken,\n          ids,\n        },\n      );\n\n      if (res) {\n        return res;\n      }\n    } catch (err) {\n      return { error: err.reason };\n    }\n  }\n\n  return { someDeletionsFailed: true };\n}\n\nasync function accessGetAvailableUsers(\n  fileId: string,\n): Promise<UserAvailable[] | { error: string }> {\n  const userToken = await asyncStorage.getItem('user-token');\n\n  if (userToken) {\n    const res = await get(\n      `${getServer().BASE_SERVER + '/admin/access/users'}?fileId=${fileId}`,\n      {\n        headers: {\n          'X-ACTUAL-TOKEN': userToken,\n        },\n      },\n    );\n\n    if (res) {\n      try {\n        return JSON.parse(res) as UserAvailable[];\n      } catch (err) {\n        return { error: 'Failed to parse response: ' + err.message };\n      }\n    }\n  }\n\n  return [];\n}\n\nasync function transferOwnership({\n  fileId,\n  newUserId,\n}: {\n  fileId: string;\n  newUserId: string;\n}): Promise<{ error?: string } | Record<string, never>> {\n  const userToken = await asyncStorage.getItem('user-token');\n\n  if (userToken) {\n    try {\n      await post(\n        getServer().BASE_SERVER + '/admin/access/transfer-ownership/',\n        { fileId, newUserId },\n        {\n          'X-ACTUAL-TOKEN': userToken,\n        },\n      );\n    } catch (err) {\n      return { error: err.reason };\n    }\n  }\n\n  return {};\n}\n\nasync function ownerCreated() {\n  const res = await get(getServer().BASE_SERVER + '/admin/owner-created/');\n\n  if (res) {\n    return JSON.parse(res) as boolean;\n  }\n\n  return null;\n}\n","// @ts-strict-ignore\nimport { t } from 'i18next';\nexport function getUploadError({\n  reason,\n  meta,\n}: {\n  reason: string;\n  meta?: unknown;\n}) {\n  switch (reason) {\n    case 'unauthorized':\n      return t('You are not logged in.');\n    case 'encrypt-failure':\n      if ((meta as { isMissingKey: boolean }).isMissingKey) {\n        return t(\n          'Encrypting your file failed because you are missing your encryption key. Create your key in the next step.',\n        );\n      }\n      return t(\n        'Encrypting the file failed. You have the correct key so this is an internal bug. To fix this, generate a new key in the next step.',\n      );\n    case 'file-has-reset':\n      // Something really weird happened - during reset a sanity\n      // check on the server failed. The user just needs to\n      // restart the whole process.\n      return t(\n        'Something went wrong while resetting your file. Please try again.',\n      );\n    case 'file-has-new-key':\n      return t(\n        'Unable to encrypt your data because you are missing the key. Create the latest key in the next step.',\n      );\n    case 'network':\n      return t('Uploading the file failed. Check your network connection.');\n    default:\n      return t(\n        'An internal error occurred, sorry! Visit https://actualbudget.org/contact/ for support. (ref: {{reason}})',\n        { reason },\n      );\n  }\n}\n\nexport function getDownloadError({\n  reason,\n  meta,\n  fileName,\n}: {\n  reason: string;\n  meta?: unknown;\n  fileName?: string;\n}) {\n  switch (reason) {\n    case 'network':\n    case 'download-failure':\n      return t('Downloading the file failed. Check your network connection.');\n    case 'not-zip-file':\n    case 'invalid-zip-file':\n    case 'invalid-meta-file':\n      return t(\n        'Downloaded file is invalid, sorry! Visit https://actualbudget.org/contact/ for support.',\n      );\n    case 'decrypt-failure':\n      return (\n        'Unable to decrypt file ' +\n        (fileName || '(unknown)') +\n        '. To change your key, first ' +\n        'download this file with the proper password.'\n      );\n\n    case 'out-of-sync-migrations':\n      return t(\n        'This budget cannot be loaded with this version of the app. Make sure the app is up-to-date.',\n      );\n\n    default:\n      const info =\n        meta && typeof meta === 'object' && 'fileId' in meta && meta.fileId\n          ? `, fileId: ${meta.fileId}`\n          : '';\n      return t(\n        'Something went wrong trying to download that file, sorry! Visit https://actualbudget.org/contact/ for support. reason: {{reason}}{{info}}',\n        { reason, info },\n      );\n  }\n}\n\nexport function getCreateKeyError(error) {\n  return getUploadError(error);\n}\n\nexport function getTestKeyError({ reason }) {\n  switch (reason) {\n    case 'network':\n      return t(\n        'Unable to connect to the server. We need to access the server to get some information about your keys.',\n      );\n    case 'old-key-style':\n      return t(\n        'This file is encrypted with an old unsupported key style. Recreate the key on a device where the file is available, or use an older version of Actual to download it.',\n      );\n    case 'decrypt-failure':\n      return t('Unable to decrypt file with this password. Please try again.');\n    default:\n      return t(\n        'Something went wrong trying to create a key, sorry! Visit https://actualbudget.org/contact/ for support.',\n      );\n  }\n}\n\nexport function getSyncError(error, id) {\n  if (error === 'out-of-sync-migrations' || error === 'out-of-sync-data') {\n    return t('This budget cannot be loaded with this version of the app.');\n  } else if (error === 'budget-not-found') {\n    return t(\n      'Budget “{{id}}” not found. Check the ID of your budget in the Advanced section of the settings page.',\n      { id },\n    );\n  } else {\n    return t('We had an unknown problem opening “{{id}}”.', { id });\n  }\n}\n\nexport function getBankSyncError(error: { message?: string }) {\n  return error.message || t('We had an unknown problem syncing the account.');\n}\n\nexport class LazyLoadFailedError extends Error {\n  type = 'app-init-failure';\n  meta = {};\n\n  constructor(name: string, cause: unknown) {\n    super(`Error: failed loading lazy-loaded module ${name}`);\n    this.meta = { name };\n    this.cause = cause;\n  }\n}\n\nexport function getUserAccessErrors(reason: string) {\n  switch (reason) {\n    case 'unauthorized':\n      return t('You are not logged in.');\n    case 'token-expired':\n      return t('Login expired, please log in again.');\n    case 'user-cant-be-empty':\n      return t('Please select a user.');\n    case 'invalid-file-id':\n      return t('This file is invalid.');\n    case 'file-denied':\n      return t('You don`t have permissions over this file.');\n    case 'user-already-have-access':\n      return t('User already has access.');\n    default:\n      return t(\n        'An internal error occurred, sorry! Visit https://actualbudget.org/contact/ for support. (ref: {{reason}})',\n        { reason },\n      );\n  }\n}\n\nexport function getSecretsError(error: string, reason: string) {\n  switch (reason) {\n    case 'unauthorized':\n      return t('You are not logged in.');\n    case 'not-admin':\n      return t('You have to be admin to set secrets');\n    default:\n      return error;\n  }\n}\n\nexport function getOpenIdErrors(reason: string) {\n  switch (reason) {\n    case 'unauthorized':\n      return t('You are not logged in.');\n    case 'configuration-error':\n      return t('This configuration is not valid. Please check it again.');\n    case 'unable-to-change-file-config-enabled':\n      return t(\n        'Unable to enable OpenID. Please update the config.json file in this case.',\n      );\n    default:\n      return t(\n        'An internal error occurred, sorry! Visit https://actualbudget.org/contact/ for support. (ref: {{reason}})',\n        { reason },\n      );\n  }\n}\n","import { Budget } from '../types/budget';\nimport type {\n  AccountEntity,\n  CategoryEntity,\n  CategoryGroupEntity,\n  PayeeEntity,\n} from '../types/models';\n\nimport { RemoteFile } from './cloud-storage';\nimport * as models from './models';\n\nexport type APIAccountEntity = Pick<AccountEntity, 'id' | 'name'> & {\n  offbudget: boolean;\n  closed: boolean;\n};\n\nexport const accountModel = {\n  ...models.accountModel,\n\n  toExternal(account: AccountEntity): APIAccountEntity {\n    return {\n      id: account.id,\n      name: account.name,\n      offbudget: account.offbudget ? true : false,\n      closed: account.closed ? true : false,\n    };\n  },\n\n  fromExternal(account: APIAccountEntity) {\n    const result = { ...account } as unknown as AccountEntity;\n    if ('offbudget' in account) {\n      result.offbudget = account.offbudget ? 1 : 0;\n    }\n    if ('closed' in account) {\n      result.closed = account.closed ? 1 : 0;\n    }\n    return result;\n  },\n};\n\nexport type APICategoryEntity = Pick<\n  CategoryEntity,\n  'id' | 'name' | 'is_income' | 'hidden'\n> & {\n  group_id: string;\n};\n\nexport const categoryModel = {\n  ...models.categoryModel,\n\n  toExternal(category: CategoryEntity): APICategoryEntity {\n    return {\n      id: category.id,\n      name: category.name,\n      is_income: category.is_income ? true : false,\n      hidden: category.hidden ? true : false,\n      group_id: category.group,\n    };\n  },\n\n  fromExternal(category: APICategoryEntity) {\n    const { group_id, ...apiCategory } = category;\n    const result: CategoryEntity = {\n      ...apiCategory,\n      group: group_id,\n    };\n    return result;\n  },\n};\n\nexport type APICategoryGroupEntity = Pick<\n  CategoryGroupEntity,\n  'id' | 'name' | 'is_income' | 'hidden'\n> & {\n  categories: APICategoryEntity[];\n};\n\nexport const categoryGroupModel = {\n  ...models.categoryGroupModel,\n\n  toExternal(group: CategoryGroupEntity): APICategoryGroupEntity {\n    return {\n      id: group.id,\n      name: group.name,\n      is_income: group.is_income ? true : false,\n      hidden: group.hidden ? true : false,\n      categories: group.categories?.map(categoryModel.toExternal) || [],\n    };\n  },\n\n  fromExternal(group: APICategoryGroupEntity) {\n    const result = { ...group } as unknown as CategoryGroupEntity;\n    if ('categories' in group) {\n      result.categories = group.categories.map(categoryModel.fromExternal);\n    }\n    return result;\n  },\n};\n\nexport type APIPayeeEntity = Pick<PayeeEntity, 'id' | 'name' | 'transfer_acct'>;\n\nexport const payeeModel = {\n  ...models.payeeModel,\n\n  toExternal(payee: PayeeEntity) {\n    return {\n      id: payee.id,\n      name: payee.name,\n      transfer_acct: payee.transfer_acct,\n    };\n  },\n\n  fromExternal(payee: APIPayeeEntity) {\n    // No translation is needed\n    return payee as PayeeEntity;\n  },\n};\n\nexport type APIFileEntity = Omit<RemoteFile, 'deleted' | 'fileId'> & {\n  id?: string;\n  cloudFileId: string;\n  state?: 'remote';\n};\n\nexport const remoteFileModel = {\n  toExternal(file: RemoteFile): APIFileEntity | null {\n    if (file.deleted) {\n      return null;\n    }\n    return {\n      cloudFileId: file.fileId,\n      state: 'remote',\n      groupId: file.groupId,\n      name: file.name,\n      encryptKeyId: file.encryptKeyId,\n      hasKey: file.hasKey,\n      owner: file.owner,\n      usersWithAccess: file.usersWithAccess,\n    };\n  },\n\n  fromExternal(file: APIFileEntity) {\n    return { deleted: false, fileId: file.cloudFileId, ...file } as RemoteFile;\n  },\n};\n\nexport const budgetModel = {\n  toExternal(file: Budget): APIFileEntity {\n    return file as APIFileEntity;\n  },\n\n  fromExternal(file: APIFileEntity) {\n    return file as Budget;\n  },\n};\n","// @ts-strict-ignore\nimport { getClock } from '@actual-app/crdt';\n\nimport * as connection from '../platform/server/connection';\nimport {\n  getBankSyncError,\n  getDownloadError,\n  getSyncError,\n  getTestKeyError,\n} from '../shared/errors';\nimport * as monthUtils from '../shared/months';\nimport { q } from '../shared/query';\nimport {\n  ungroupTransactions,\n  updateTransaction,\n  deleteTransaction,\n} from '../shared/transactions';\nimport { integerToAmount } from '../shared/util';\nimport { Handlers } from '../types/handlers';\nimport { AccountEntity, CategoryGroupEntity } from '../types/models';\nimport { ServerHandlers } from '../types/server-handlers';\n\nimport { addTransactions } from './accounts/sync';\nimport {\n  accountModel,\n  budgetModel,\n  categoryModel,\n  categoryGroupModel,\n  payeeModel,\n  remoteFileModel,\n} from './api-models';\nimport { aqlQuery } from './aql';\nimport * as cloudStorage from './cloud-storage';\nimport { type RemoteFile } from './cloud-storage';\nimport * as db from './db';\nimport { APIError } from './errors';\nimport { runMutator } from './mutators';\nimport * as prefs from './prefs';\nimport * as sheet from './sheet';\nimport { setSyncingMode, batchMessages } from './sync';\n\nlet IMPORT_MODE = false;\n\n// The API is different in two ways: we never want undo enabled, and\n// we also need to notify the UI manually if stuff has changed (if\n// they are connecting to an already running instance, the UI should\n// update). The wrapper handles that.\nfunction withMutation<Params extends Array<unknown>, ReturnType>(\n  handler: (...args: Params) => Promise<ReturnType>,\n) {\n  return (...args: Params) => {\n    return runMutator(\n      async () => {\n        const latestTimestamp = getClock().timestamp.toString();\n        const result = await handler(...args);\n\n        const rows = await db.all<Pick<db.DbCrdtMessage, 'dataset'>>(\n          'SELECT DISTINCT dataset FROM messages_crdt WHERE timestamp > ?',\n          [latestTimestamp],\n        );\n\n        // Only send the sync event if anybody else is connected\n        if (connection.getNumClients() > 1) {\n          connection.send('sync-event', {\n            type: 'success',\n            tables: rows.map(row => row.dataset),\n          });\n        }\n\n        return result;\n      },\n      { undoDisabled: true },\n    );\n  };\n}\n\nlet handlers = {} as unknown as Handlers;\n\nasync function validateMonth(month) {\n  if (!month.match(/^\\d{4}-\\d{2}$/)) {\n    throw APIError('Invalid month format, use YYYY-MM: ' + month);\n  }\n\n  if (!IMPORT_MODE) {\n    const { start, end } = await handlers['get-budget-bounds']();\n    const range = monthUtils.range(start, end);\n    if (!range.includes(month)) {\n      throw APIError('No budget exists for month: ' + month);\n    }\n  }\n}\n\nasync function validateExpenseCategory(debug, id) {\n  if (id == null) {\n    throw APIError(`${debug}: category id is required`);\n  }\n\n  const row = await db.first<Pick<db.DbCategory, 'is_income'>>(\n    'SELECT is_income FROM categories WHERE id = ?',\n    [id],\n  );\n\n  if (!row) {\n    throw APIError(`${debug}: category “${id}” does not exist`);\n  }\n\n  if (row.is_income !== 0) {\n    throw APIError(`${debug}: category “${id}” is not an expense category`);\n  }\n}\n\nfunction checkFileOpen() {\n  if (!(prefs.getPrefs() || {}).id) {\n    throw APIError('No budget file is open');\n  }\n}\n\nlet batchPromise = null;\n\nhandlers['api/batch-budget-start'] = async function () {\n  if (batchPromise) {\n    throw APIError('Cannot start a batch process: batch already started');\n  }\n\n  // If we are importing, all we need to do is start a raw database\n  // transaction. Updating spreadsheet cells doesn't go through the\n  // syncing layer in that case.\n  if (IMPORT_MODE) {\n    db.asyncTransaction(() => {\n      return new Promise((resolve, reject) => {\n        batchPromise = { resolve, reject };\n      });\n    });\n  } else {\n    batchMessages(() => {\n      return new Promise((resolve, reject) => {\n        batchPromise = { resolve, reject };\n      });\n    });\n  }\n};\n\nhandlers['api/batch-budget-end'] = async function () {\n  if (!batchPromise) {\n    throw APIError('Cannot end a batch process: no batch started');\n  }\n\n  batchPromise.resolve();\n  batchPromise = null;\n};\n\nhandlers['api/load-budget'] = async function ({ id }) {\n  const { id: currentId } = prefs.getPrefs() || {};\n\n  if (currentId !== id) {\n    connection.send('start-load');\n    const { error } = await handlers['load-budget']({ id });\n\n    if (!error) {\n      connection.send('finish-load');\n    } else {\n      connection.send('show-budgets');\n\n      throw new Error(getSyncError(error, id));\n    }\n  }\n};\n\nhandlers['api/download-budget'] = async function ({ syncId, password }) {\n  const { id: currentId } = prefs.getPrefs() || {};\n  if (currentId) {\n    await handlers['close-budget']();\n  }\n\n  const budgets = await handlers['get-budgets']();\n  const localBudget = budgets.find(b => b.groupId === syncId);\n  let remoteBudget: RemoteFile;\n\n  // Load a remote file if we could not find the file locally\n  if (!localBudget) {\n    const files = await handlers['get-remote-files']();\n    if (!files) {\n      throw new Error('Could not get remote files');\n    }\n    const file = files.find(f => f.groupId === syncId);\n    if (!file) {\n      throw new Error(\n        `Budget “${syncId}” not found. Check the sync id of your budget in the Advanced section of the settings page.`,\n      );\n    }\n\n    remoteBudget = file;\n  }\n\n  const activeFile = remoteBudget ? remoteBudget : localBudget;\n\n  // Set the e2e encryption keys\n  if (activeFile.encryptKeyId) {\n    if (!password) {\n      throw new Error(\n        `File ${activeFile.name} is encrypted. Please provide a password.`,\n      );\n    }\n\n    const result = await handlers['key-test']({\n      cloudFileId: remoteBudget ? remoteBudget.fileId : localBudget.cloudFileId,\n      password,\n    });\n    if (result.error) {\n      throw new Error(getTestKeyError(result.error));\n    }\n  }\n\n  // Sync the local budget file\n  if (localBudget) {\n    await handlers['load-budget']({ id: localBudget.id });\n    const result = await handlers['sync-budget']();\n    if (result.error) {\n      throw new Error(getSyncError(result.error, localBudget.id));\n    }\n    return;\n  }\n\n  // Download the remote file (no need to perform a sync as the file will already be up-to-date)\n  const result = await handlers['download-budget']({\n    cloudFileId: remoteBudget.fileId,\n  });\n  if (result.error) {\n    console.log('Full error details', result.error);\n    throw new Error(getDownloadError(result.error));\n  }\n  await handlers['load-budget']({ id: result.id });\n};\n\nhandlers['api/get-budgets'] = async function () {\n  const budgets = await handlers['get-budgets']();\n  const files = (await handlers['get-remote-files']()) || [];\n  return [\n    ...budgets.map(file => budgetModel.toExternal(file)),\n    ...files.map(file => remoteFileModel.toExternal(file)).filter(file => file),\n  ];\n};\n\nhandlers['api/sync'] = async function () {\n  const { id } = prefs.getPrefs();\n  const result = await handlers['sync-budget']();\n  if (result.error) {\n    throw new Error(getSyncError(result.error, id));\n  }\n};\n\nhandlers['api/bank-sync'] = async function (args) {\n  const batchSync = args?.accountId == null;\n  const allErrors = [];\n\n  if (!batchSync) {\n    const { errors } = await handlers['accounts-bank-sync']({\n      ids: [args.accountId],\n    });\n\n    allErrors.push(...errors);\n  } else {\n    const accountsData = await handlers['accounts-get']();\n    const accountIdsToSync = accountsData.map(a => a.id);\n    const simpleFinAccounts = accountsData.filter(\n      a => a.account_sync_source === 'simpleFin',\n    );\n    const simpleFinAccountIds = simpleFinAccounts.map(a => a.id);\n\n    if (simpleFinAccounts.length > 1) {\n      const res = await handlers['simplefin-batch-sync']({\n        ids: simpleFinAccountIds,\n      });\n\n      res.forEach(a => allErrors.push(...a.res.errors));\n    }\n\n    const { errors } = await handlers['accounts-bank-sync']({\n      ids: accountIdsToSync.filter(a => !simpleFinAccountIds.includes(a)),\n    });\n\n    allErrors.push(...errors);\n  }\n\n  const errors = allErrors.filter(e => e != null);\n  if (errors.length > 0) {\n    throw new Error(getBankSyncError(errors[0]));\n  }\n};\n\nhandlers['api/start-import'] = async function ({ budgetName }) {\n  // Notify UI to close budget\n  await handlers['close-budget']();\n\n  // Create the budget\n  await handlers['create-budget']({ budgetName, avoidUpload: true });\n\n  // Clear out the default expense categories\n  await db.runQuery('DELETE FROM categories WHERE is_income = 0');\n  await db.runQuery('DELETE FROM category_groups WHERE is_income = 0');\n\n  // Turn syncing off\n  setSyncingMode('import');\n\n  connection.send('start-import');\n  IMPORT_MODE = true;\n};\n\nhandlers['api/finish-import'] = async function () {\n  checkFileOpen();\n\n  sheet.get().markCacheDirty();\n\n  // We always need to fully reload the app. Importing doesn't touch\n  // the spreadsheet, but we can't just recreate the spreadsheet\n  // either; there is other internal state that isn't created\n  const { id } = prefs.getPrefs();\n  await handlers['close-budget']();\n  await handlers['load-budget']({ id });\n\n  await handlers['get-budget-bounds']();\n  await sheet.waitOnSpreadsheet();\n\n  await cloudStorage.upload().catch(() => {});\n\n  connection.send('finish-import');\n  IMPORT_MODE = false;\n};\n\nhandlers['api/abort-import'] = async function () {\n  if (IMPORT_MODE) {\n    checkFileOpen();\n\n    const { id } = prefs.getPrefs();\n\n    await handlers['close-budget']();\n    await handlers['delete-budget']({ id });\n    connection.send('show-budgets');\n  }\n\n  IMPORT_MODE = false;\n};\n\nhandlers['api/query'] = async function ({ query }) {\n  checkFileOpen();\n  return aqlQuery(query);\n};\n\nhandlers['api/budget-months'] = async function () {\n  checkFileOpen();\n  const { start, end } = await handlers['get-budget-bounds']();\n  return monthUtils.range(start, end);\n};\n\nhandlers['api/budget-month'] = async function ({ month }) {\n  checkFileOpen();\n  await validateMonth(month);\n\n  const { data: groups }: { data: CategoryGroupEntity[] } = await aqlQuery(\n    q('category_groups').select('*'),\n  );\n  const sheetName = monthUtils.sheetForMonth(month);\n\n  function value(name) {\n    const v = sheet.get().getCellValue(sheetName, name);\n    return v === '' ? 0 : v;\n  }\n\n  // This is duplicated from main.js because the return format is\n  // different (for now)\n  return {\n    month,\n    incomeAvailable: value('available-funds') as number,\n    lastMonthOverspent: value('last-month-overspent') as number,\n    forNextMonth: value('buffered') as number,\n    totalBudgeted: value('total-budgeted') as number,\n    toBudget: value('to-budget') as number,\n\n    fromLastMonth: value('from-last-month') as number,\n    totalIncome: value('total-income') as number,\n    totalSpent: value('total-spent') as number,\n    totalBalance: value('total-leftover') as number,\n\n    categoryGroups: groups.map(group => {\n      if (group.is_income) {\n        return {\n          ...categoryGroupModel.toExternal(group),\n          received: value('total-income'),\n\n          categories: group.categories.map(cat => ({\n            ...categoryModel.toExternal(cat),\n            received: value(`sum-amount-${cat.id}`),\n          })),\n        };\n      }\n\n      return {\n        ...categoryGroupModel.toExternal(group),\n        budgeted: value(`group-budget-${group.id}`),\n        spent: value(`group-sum-amount-${group.id}`),\n        balance: value(`group-leftover-${group.id}`),\n\n        categories: group.categories.map(cat => ({\n          ...categoryModel.toExternal(cat),\n          budgeted: value(`budget-${cat.id}`),\n          spent: value(`sum-amount-${cat.id}`),\n          balance: value(`leftover-${cat.id}`),\n          carryover: value(`carryover-${cat.id}`),\n        })),\n      };\n    }),\n  };\n};\n\nhandlers['api/budget-set-amount'] = withMutation(async function ({\n  month,\n  categoryId,\n  amount,\n}) {\n  checkFileOpen();\n  return handlers['budget/budget-amount']({\n    month,\n    category: categoryId,\n    amount,\n  });\n});\n\nhandlers['api/budget-set-carryover'] = withMutation(async function ({\n  month,\n  categoryId,\n  flag,\n}) {\n  checkFileOpen();\n  await validateMonth(month);\n  await validateExpenseCategory('budget-set-carryover', categoryId);\n  return handlers['budget/set-carryover']({\n    startMonth: month,\n    category: categoryId,\n    flag,\n  });\n});\n\nhandlers['api/budget-hold-for-next-month'] = withMutation(async function ({\n  month,\n  amount,\n}) {\n  checkFileOpen();\n  await validateMonth(month);\n  if (amount <= 0) {\n    throw APIError('Amount to hold needs to be greater than 0');\n  }\n  return handlers['budget/hold-for-next-month']({\n    month,\n    amount,\n  });\n});\n\nhandlers['api/budget-reset-hold'] = withMutation(async function ({ month }) {\n  checkFileOpen();\n  await validateMonth(month);\n  return handlers['budget/reset-hold']({ month });\n});\n\nhandlers['api/transactions-export'] = async function ({\n  transactions,\n  categoryGroups,\n  payees,\n  accounts,\n}) {\n  checkFileOpen();\n  return handlers['transactions-export']({\n    transactions,\n    categoryGroups,\n    payees,\n    accounts,\n  });\n};\n\nhandlers['api/transactions-import'] = withMutation(async function ({\n  accountId,\n  transactions,\n  isPreview = false,\n  opts,\n}) {\n  checkFileOpen();\n  return handlers['transactions-import']({\n    accountId,\n    transactions,\n    isPreview,\n    opts,\n  });\n});\n\nhandlers['api/transactions-add'] = withMutation(async function ({\n  accountId,\n  transactions,\n  runTransfers = false,\n  learnCategories = false,\n}) {\n  checkFileOpen();\n  await addTransactions(accountId, transactions, {\n    runTransfers,\n    learnCategories,\n  });\n  return 'ok' as const;\n});\n\nhandlers['api/transactions-get'] = async function ({\n  accountId,\n  startDate,\n  endDate,\n}) {\n  checkFileOpen();\n  const { data } = await aqlQuery(\n    q('transactions')\n      .filter({\n        $and: [\n          accountId && { account: accountId },\n          startDate && { date: { $gte: startDate } },\n          endDate && { date: { $lte: endDate } },\n        ].filter(Boolean),\n      })\n      .select('*')\n      .options({ splits: 'grouped' }),\n  );\n  return data;\n};\n\nhandlers['api/transaction-update'] = withMutation(async function ({\n  id,\n  fields,\n}) {\n  checkFileOpen();\n  const { data } = await aqlQuery(\n    q('transactions').filter({ id }).select('*').options({ splits: 'grouped' }),\n  );\n  const transactions = ungroupTransactions(data);\n\n  if (transactions.length === 0) {\n    return [];\n  }\n\n  const { diff } = updateTransaction(transactions, { id, ...fields });\n  return handlers['transactions-batch-update'](diff)['updated'];\n});\n\nhandlers['api/transaction-delete'] = withMutation(async function ({ id }) {\n  checkFileOpen();\n  const { data } = await aqlQuery(\n    q('transactions').filter({ id }).select('*').options({ splits: 'grouped' }),\n  );\n  const transactions = ungroupTransactions(data);\n\n  if (transactions.length === 0) {\n    return [];\n  }\n\n  const { diff } = deleteTransaction(transactions, id);\n  return handlers['transactions-batch-update'](diff)['deleted'];\n});\n\nhandlers['api/accounts-get'] = async function () {\n  checkFileOpen();\n  // TODO: Force cast to AccountEntity. This should be updated to an AQL query.\n  const accounts = (await db.getAccounts()) as AccountEntity[];\n  return accounts.map(account => accountModel.toExternal(account));\n};\n\nhandlers['api/account-create'] = withMutation(async function ({\n  account,\n  initialBalance = null,\n}) {\n  checkFileOpen();\n  return handlers['account-create']({\n    name: account.name,\n    offBudget: account.offbudget,\n    closed: account.closed,\n    // Current the API expects an amount but it really should expect\n    // an integer\n    balance: initialBalance != null ? integerToAmount(initialBalance) : null,\n  });\n});\n\nhandlers['api/account-update'] = withMutation(async function ({ id, fields }) {\n  checkFileOpen();\n  return db.updateAccount({ id, ...accountModel.fromExternal(fields) });\n});\n\nhandlers['api/account-close'] = withMutation(async function ({\n  id,\n  transferAccountId,\n  transferCategoryId,\n}) {\n  checkFileOpen();\n  return handlers['account-close']({\n    id,\n    transferAccountId,\n    categoryId: transferCategoryId,\n  });\n});\n\nhandlers['api/account-reopen'] = withMutation(async function ({ id }) {\n  checkFileOpen();\n  return handlers['account-reopen']({ id });\n});\n\nhandlers['api/account-delete'] = withMutation(async function ({ id }) {\n  checkFileOpen();\n  return handlers['account-close']({ id, forced: true });\n});\n\nhandlers['api/account-balance'] = withMutation(async function ({\n  id,\n  cutoff = new Date(),\n}) {\n  checkFileOpen();\n  return handlers['account-balance']({ id, cutoff });\n});\n\nhandlers['api/categories-get'] = async function ({\n  grouped,\n}: { grouped? } = {}) {\n  checkFileOpen();\n  const result = await handlers['get-categories']();\n  return grouped\n    ? result.grouped.map(categoryGroupModel.toExternal)\n    : result.list.map(categoryModel.toExternal);\n};\n\nhandlers['api/category-groups-get'] = async function () {\n  checkFileOpen();\n  const groups = await handlers['get-category-groups']();\n  return groups.map(categoryGroupModel.toExternal);\n};\n\nhandlers['api/category-group-create'] = withMutation(async function ({\n  group,\n}) {\n  checkFileOpen();\n  return handlers['category-group-create']({\n    name: group.name,\n    hidden: group.hidden,\n  });\n});\n\nhandlers['api/category-group-update'] = withMutation(async function ({\n  id,\n  fields,\n}) {\n  checkFileOpen();\n  return handlers['category-group-update']({\n    id,\n    ...categoryGroupModel.fromExternal(fields),\n  });\n});\n\nhandlers['api/category-group-delete'] = withMutation(async function ({\n  id,\n  transferCategoryId,\n}) {\n  checkFileOpen();\n  return handlers['category-group-delete']({\n    id,\n    transferId: transferCategoryId,\n  });\n});\n\nhandlers['api/category-create'] = withMutation(async function ({ category }) {\n  checkFileOpen();\n  return handlers['category-create']({\n    name: category.name,\n    groupId: category.group_id,\n    isIncome: category.is_income,\n    hidden: category.hidden,\n  });\n});\n\nhandlers['api/category-update'] = withMutation(async function ({ id, fields }) {\n  checkFileOpen();\n  return handlers['category-update']({\n    id,\n    ...categoryModel.fromExternal(fields),\n  });\n});\n\nhandlers['api/category-delete'] = withMutation(async function ({\n  id,\n  transferCategoryId,\n}) {\n  checkFileOpen();\n  return handlers['category-delete']({\n    id,\n    transferId: transferCategoryId,\n  });\n});\n\nhandlers['api/common-payees-get'] = async function () {\n  checkFileOpen();\n  const payees = await handlers['common-payees-get']();\n  return payees.map(payeeModel.toExternal);\n};\n\nhandlers['api/payees-get'] = async function () {\n  checkFileOpen();\n  const payees = await handlers['payees-get']();\n  return payees.map(payeeModel.toExternal);\n};\n\nhandlers['api/payee-create'] = withMutation(async function ({ payee }) {\n  checkFileOpen();\n  return handlers['payee-create']({ name: payee.name });\n});\n\nhandlers['api/payee-update'] = withMutation(async function ({ id, fields }) {\n  checkFileOpen();\n  return handlers['payees-batch-change']({\n    updated: [{ id, ...payeeModel.fromExternal(fields) }],\n  });\n});\n\nhandlers['api/payee-delete'] = withMutation(async function ({ id }) {\n  checkFileOpen();\n  return handlers['payees-batch-change']({ deleted: [{ id }] });\n});\n\nhandlers['api/payees-merge'] = withMutation(async function ({\n  targetId,\n  mergeIds,\n}) {\n  checkFileOpen();\n  return handlers['payees-merge']({ targetId, mergeIds });\n});\n\nhandlers['api/rules-get'] = async function () {\n  checkFileOpen();\n  return handlers['rules-get']();\n};\n\nhandlers['api/payee-rules-get'] = async function ({ id }) {\n  checkFileOpen();\n  return handlers['payees-get-rules']({ id });\n};\n\nhandlers['api/rule-create'] = withMutation(async function ({ rule }) {\n  checkFileOpen();\n  const addedRule = await handlers['rule-add'](rule);\n\n  if ('error' in addedRule) {\n    throw APIError('Failed creating a new rule', addedRule.error);\n  }\n\n  return addedRule;\n});\n\nhandlers['api/rule-update'] = withMutation(async function ({ rule }) {\n  checkFileOpen();\n  const updatedRule = await handlers['rule-update'](rule);\n\n  if ('error' in updatedRule) {\n    throw APIError('Failed updating the rule', updatedRule.error);\n  }\n\n  return updatedRule;\n});\n\nhandlers['api/rule-delete'] = withMutation(async function (id) {\n  checkFileOpen();\n  return handlers['rule-delete'](id);\n});\n\nexport function installAPI(serverHandlers: ServerHandlers) {\n  const merged = Object.assign({}, serverHandlers, handlers);\n  handlers = merged as Handlers;\n  return merged;\n}\n","import * as asyncStorage from '../../platform/server/asyncStorage';\nimport { OpenIdConfig } from '../../types/models';\nimport { createApp } from '../app';\nimport * as encryption from '../encryption';\nimport { PostError } from '../errors';\nimport { get, post } from '../post';\nimport { getServer, isValidBaseURL } from '../server-config';\n\nexport type AuthHandlers = {\n  'get-did-bootstrap': typeof didBootstrap;\n  'subscribe-needs-bootstrap': typeof needsBootstrap;\n  'subscribe-bootstrap': typeof bootstrap;\n  'subscribe-get-login-methods': typeof getLoginMethods;\n  'subscribe-get-user': typeof getUser;\n  'subscribe-change-password': typeof changePassword;\n  'subscribe-sign-in': typeof signIn;\n  'subscribe-sign-out': typeof signOut;\n  'subscribe-set-token': typeof setToken;\n  'enable-openid': typeof enableOpenId;\n  'get-openid-config': typeof getOpenIdConfig;\n  'enable-password': typeof enablePassword;\n};\n\nexport const app = createApp<AuthHandlers>();\napp.method('get-did-bootstrap', didBootstrap);\napp.method('subscribe-needs-bootstrap', needsBootstrap);\napp.method('subscribe-bootstrap', bootstrap);\napp.method('subscribe-get-login-methods', getLoginMethods);\napp.method('subscribe-get-user', getUser);\napp.method('subscribe-change-password', changePassword);\napp.method('subscribe-sign-in', signIn);\napp.method('subscribe-sign-out', signOut);\napp.method('subscribe-set-token', setToken);\napp.method('enable-openid', enableOpenId);\napp.method('get-openid-config', getOpenIdConfig);\napp.method('enable-password', enablePassword);\n\nasync function didBootstrap() {\n  return Boolean(await asyncStorage.getItem('did-bootstrap'));\n}\n\nasync function needsBootstrap({ url }: { url?: string } = {}) {\n  if (url && !isValidBaseURL(url)) {\n    return { error: 'get-server-failure' };\n  }\n\n  let serverConfig: ReturnType<typeof getServer>;\n\n  try {\n    serverConfig = getServer(url);\n    if (!serverConfig) {\n      return { bootstrapped: true, hasServer: false };\n    }\n  } catch (err) {\n    return { error: 'get-server-failure' };\n  }\n\n  let resText: string;\n  try {\n    resText = await get(serverConfig.SIGNUP_SERVER + '/needs-bootstrap');\n  } catch (err) {\n    return { error: 'network-failure' };\n  }\n\n  let res: {\n    status: 'ok';\n    data: {\n      bootstrapped: boolean;\n      loginMethod: 'password' | 'openid' | string;\n      availableLoginMethods: Array<{\n        method: string;\n        displayName: string;\n        active: boolean;\n      }>;\n      multiuser: boolean;\n    };\n  };\n\n  try {\n    res = JSON.parse(resText);\n  } catch (err) {\n    return { error: 'parse-failure' };\n  }\n\n  return {\n    bootstrapped: res.data.bootstrapped,\n    availableLoginMethods: res.data.availableLoginMethods || [\n      { method: 'password', active: true, displayName: 'Password' },\n    ],\n    multiuser: res.data.multiuser || false,\n    hasServer: true,\n  };\n}\n\nasync function bootstrap(loginConfig: {\n  password?: string;\n  openId?: OpenIdConfig;\n}) {\n  try {\n    const serverConfig = getServer();\n    if (!serverConfig) {\n      throw new Error('No sync server configured.');\n    }\n    await post(serverConfig.SIGNUP_SERVER + '/bootstrap', loginConfig);\n  } catch (err) {\n    if (err instanceof PostError) {\n      return {\n        error: err.reason || 'network-failure',\n      };\n    }\n\n    throw err;\n  }\n  return {};\n}\n\nasync function getLoginMethods() {\n  let res: {\n    methods?: Array<{ method: string; displayName: string; active: boolean }>;\n  };\n  try {\n    const serverConfig = getServer();\n    if (!serverConfig) {\n      throw new Error('No sync server configured.');\n    }\n    res = await fetch(serverConfig.SIGNUP_SERVER + '/login-methods').then(res =>\n      res.json(),\n    );\n  } catch (err) {\n    if (err instanceof PostError) {\n      return {\n        error: err.reason || 'network-failure',\n      };\n    }\n\n    throw err;\n  }\n\n  if (res.methods) {\n    return { methods: res.methods };\n  }\n  return { error: 'internal' };\n}\n\nasync function getUser() {\n  const serverConfig = getServer();\n  if (!serverConfig) {\n    if (!(await asyncStorage.getItem('did-bootstrap'))) {\n      return null;\n    }\n    return { offline: false };\n  }\n\n  const userToken = await asyncStorage.getItem('user-token');\n\n  if (!userToken) {\n    return null;\n  }\n\n  try {\n    const res = await get(serverConfig.SIGNUP_SERVER + '/validate', {\n      headers: {\n        'X-ACTUAL-TOKEN': userToken,\n      },\n    });\n    let tokenExpired = false;\n    const {\n      status,\n      reason,\n      data: {\n        userName = null,\n        permission = '',\n        userId = null,\n        displayName = null,\n        loginMethod = null,\n      } = {},\n    } = JSON.parse(res) || {};\n\n    if (status === 'error') {\n      if (reason === 'unauthorized') {\n        return null;\n      } else if (reason === 'token-expired') {\n        tokenExpired = true;\n      } else {\n        return { offline: true };\n      }\n    }\n\n    return {\n      offline: false,\n      userName,\n      permission,\n      userId,\n      displayName,\n      loginMethod,\n      tokenExpired,\n    };\n  } catch (e) {\n    console.log(e);\n    return { offline: true };\n  }\n}\n\nasync function changePassword({ password }: { password: string }) {\n  const userToken = await asyncStorage.getItem('user-token');\n  if (!userToken) {\n    return { error: 'not-logged-in' };\n  }\n\n  try {\n    const serverConfig = getServer();\n    if (!serverConfig) {\n      throw new Error('No sync server configured.');\n    }\n    await post(serverConfig.SIGNUP_SERVER + '/change-password', {\n      token: userToken,\n      password,\n    });\n  } catch (err) {\n    if (err instanceof PostError) {\n      return {\n        error: err.reason || 'network-failure',\n      };\n    }\n\n    throw err;\n  }\n\n  return {};\n}\n\nasync function signIn(\n  loginInfo:\n    | {\n        password: string;\n        loginMethod?: string;\n      }\n    | {\n        returnUrl: string;\n        loginMethod?: 'openid';\n      },\n) {\n  if (\n    typeof loginInfo.loginMethod !== 'string' ||\n    loginInfo.loginMethod == null\n  ) {\n    loginInfo.loginMethod = 'password';\n  }\n  let res: {\n    token?: string;\n    returnUrl?: string;\n  };\n\n  try {\n    const serverConfig = getServer();\n    if (!serverConfig) {\n      throw new Error('No sync server configured.');\n    }\n    res = await post(serverConfig.SIGNUP_SERVER + '/login', loginInfo);\n  } catch (err) {\n    if (err instanceof PostError) {\n      return {\n        error: err.reason || 'network-failure',\n      };\n    }\n\n    throw err;\n  }\n\n  if (res.returnUrl) {\n    return { redirectUrl: res.returnUrl };\n  }\n\n  if (!res.token) {\n    throw new Error('login: User token not set');\n  }\n\n  await asyncStorage.setItem('user-token', res.token);\n  return {};\n}\n\nasync function signOut() {\n  encryption.unloadAllKeys();\n  await asyncStorage.multiRemove([\n    'user-token',\n    'encrypt-keys',\n    'lastBudget',\n    'readOnly',\n  ]);\n  return 'ok';\n}\n\nasync function setToken({ token }: { token: string }) {\n  await asyncStorage.setItem('user-token', token);\n}\n\nasync function enableOpenId(openIdConfig: { openId: OpenIdConfig }) {\n  try {\n    const userToken = await asyncStorage.getItem('user-token');\n\n    if (!userToken) {\n      return { error: 'unauthorized' };\n    }\n\n    const serverConfig = getServer();\n    if (!serverConfig) {\n      throw new Error('No sync server configured.');\n    }\n\n    await post(serverConfig.BASE_SERVER + '/openid/enable', openIdConfig, {\n      'X-ACTUAL-TOKEN': userToken,\n    });\n  } catch (err) {\n    if (err instanceof PostError) {\n      return {\n        error: err.reason || 'network-failure',\n      };\n    }\n\n    throw err;\n  }\n  return {};\n}\n\nasync function getOpenIdConfig({ password }: { password: string }) {\n  try {\n    const userToken = await asyncStorage.getItem('user-token');\n\n    const serverConfig = getServer();\n    if (!serverConfig) {\n      throw new Error('No sync server configured.');\n    }\n\n    const res = await post(\n      serverConfig.BASE_SERVER + '/openid/config',\n      { password },\n      {\n        'X-ACTUAL-TOKEN': userToken,\n      },\n    );\n\n    if (res) {\n      return res as { openId: OpenIdConfig };\n    }\n\n    return null;\n  } catch (err) {\n    if (err instanceof PostError) {\n      return {\n        error: err.reason || 'network-failure',\n      };\n    }\n\n    throw err;\n  }\n}\n\nasync function enablePassword(passwordConfig: { password: string }) {\n  try {\n    const userToken = await asyncStorage.getItem('user-token');\n\n    if (!userToken) {\n      return { error: 'unauthorized' };\n    }\n\n    const serverConfig = getServer();\n    if (!serverConfig) {\n      throw new Error('No sync server configured.');\n    }\n\n    await post(serverConfig.BASE_SERVER + '/openid/disable', passwordConfig, {\n      'X-ACTUAL-TOKEN': userToken,\n    });\n  } catch (err) {\n    if (err instanceof PostError) {\n      return {\n        error: err.reason || 'network-failure',\n      };\n    }\n\n    throw err;\n  }\n  return {};\n}\n","// https://peggyjs.org\r\n\r\nexpr\r\n  = source\r\n  \t{ return { group: null, type: 'source' }}\r\n    /\r\n  sink _? weight: weight?\r\n    \t{ return { type: 'sink', weight: +weight || 1, group: null } }\r\n  /\r\n  group: sourcegroup _? source\r\n    \t{return {group: group || null, type: 'source'}} \r\n    /\r\n   \tgroup: sinkgroup? _? sink _? weight: weight? \r\n    \t{ return { type: 'sink', weight: +weight || 1, group: group || null } }\r\n    /\r\n    group: sourcegroup\r\n    \t{return {group: group, type: null}}\r\n\r\nsource = 'source'\r\nsink = 'sink'\r\n\r\n_ 'space' = ' '+\r\nd 'digit' = [0-9]\r\n\r\nweight 'weight' = weight: $(d+) { return +weight }\r\nsourcegroup 'Name'= $(string:(!\" source\" .)*)\r\nsinkgroup 'Name' = $(string:(!\" sink\" .)*)\r\n","// @ts-strict-ignore\nimport * as monthUtils from '../../shared/months';\nimport * as db from '../db';\n\nimport { setBudget, getSheetValue, setGoal } from './actions';\nimport { parse } from './cleanup-template.pegjs';\n\ntype Notification = {\n  type?: 'message' | 'error' | 'warning' | undefined;\n  pre?: string | undefined;\n  title?: string | undefined;\n  message: string;\n  sticky?: boolean | undefined;\n};\n\nexport function cleanupTemplate({ month }: { month: string }) {\n  return processCleanup(month);\n}\n\nasync function applyGroupCleanups(\n  month: string,\n  sourceGroups,\n  sinkGroups,\n  generalGroups,\n) {\n  const sheetName = monthUtils.sheetForMonth(month);\n  const warnings = [];\n  const db_month = parseInt(month.replace('-', ''));\n  let groupLength = sourceGroups.length;\n  while (groupLength > 0) {\n    //function for each unique group\n    const groupName = sourceGroups[0].group;\n    const tempSourceGroups = sourceGroups.filter(c => c.group === groupName);\n    const sinkGroup = sinkGroups.filter(c => c.group === groupName);\n    const generalGroup = generalGroups.filter(c => c.group === groupName);\n    let total_weight = 0;\n\n    if (sinkGroup.length > 0 || generalGroup.length > 0) {\n      //only return group source funds to To Budget if there are corresponding sinking groups or underfunded included groups\n      for (let ii = 0; ii < tempSourceGroups.length; ii++) {\n        const balance = await getSheetValue(\n          sheetName,\n          `leftover-${tempSourceGroups[ii].category}`,\n        );\n        const budgeted = await getSheetValue(\n          sheetName,\n          `budget-${tempSourceGroups[ii].category}`,\n        );\n        await setBudget({\n          category: tempSourceGroups[ii].category,\n          month,\n          amount: budgeted - balance,\n        });\n      }\n\n      //calculate total weight for sinking funds\n      for (let ii = 0; ii < sinkGroup.length; ii++) {\n        total_weight += sinkGroup[ii].weight;\n      }\n\n      //fill underfunded categories within the group first\n      for (let ii = 0; ii < generalGroup.length; ii++) {\n        const budgetAvailable = await getSheetValue(sheetName, `to-budget`);\n        const balance = await getSheetValue(\n          sheetName,\n          `leftover-${generalGroup[ii].category}`,\n        );\n        const budgeted = await getSheetValue(\n          sheetName,\n          `budget-${generalGroup[ii].category}`,\n        );\n        const to_budget = budgeted + Math.abs(balance);\n        const categoryId = generalGroup[ii].category;\n        let carryover = await db.first<Pick<db.DbZeroBudget, 'carryover'>>(\n          `SELECT carryover FROM zero_budgets WHERE month = ? and category = ?`,\n          [db_month, categoryId],\n        );\n\n        if (carryover === null) {\n          carryover = { carryover: 0 };\n        }\n\n        if (\n          balance < 0 &&\n          Math.abs(balance) <= budgetAvailable &&\n          !generalGroup[ii].category.is_income &&\n          carryover.carryover === 0\n        ) {\n          await setBudget({\n            category: generalGroup[ii].category,\n            month,\n            amount: to_budget,\n          });\n        } else if (\n          balance < 0 &&\n          !generalGroup[ii].category.is_income &&\n          carryover.carryover === 0 &&\n          Math.abs(balance) > budgetAvailable\n        ) {\n          await setBudget({\n            category: generalGroup[ii].category,\n            month,\n            amount: budgeted + budgetAvailable,\n          });\n        }\n      }\n      const budgetAvailable = await getSheetValue(sheetName, `to-budget`);\n      for (let ii = 0; ii < sinkGroup.length; ii++) {\n        const budgeted = await getSheetValue(\n          sheetName,\n          `budget-${sinkGroup[ii].category}`,\n        );\n        const to_budget =\n          budgeted +\n          Math.round((sinkGroup[ii].weight / total_weight) * budgetAvailable);\n        await setBudget({\n          category: sinkGroup[ii].category,\n          month,\n          amount: to_budget,\n        });\n      }\n    } else {\n      warnings.push(groupName + ' has no matching sink categories.');\n    }\n    sourceGroups = sourceGroups.filter(c => c.group !== groupName);\n    groupLength = sourceGroups.length;\n  }\n  return warnings;\n}\n\nasync function processCleanup(month: string): Promise<Notification> {\n  let num_sources = 0;\n  let num_sinks = 0;\n  let total_weight = 0;\n  const errors = [];\n  const warnings = [];\n  const sinkCategory = [];\n  const sourceWithRollover = [];\n  const db_month = parseInt(month.replace('-', ''));\n\n  const category_templates = await getCategoryTemplates();\n  const categories = await db.all<db.DbViewCategory>(\n    'SELECT * FROM v_categories WHERE tombstone = 0',\n  );\n  const sheetName = monthUtils.sheetForMonth(month);\n  const groupSource = [];\n  const groupSink = [];\n  const groupGeneral = [];\n\n  //filter out category groups\n  for (let c = 0; c < categories.length; c++) {\n    const category = categories[c];\n    const template = category_templates[category.id];\n\n    //filter out source and sink groups for processing\n    if (template) {\n      if (\n        template.filter(t => t.type === 'source' && t.group !== null).length > 0\n      ) {\n        groupSource.push({\n          category: category.id,\n          group: template.filter(\n            t => t.type === 'source' && t.group !== null,\n          )[0].group,\n        });\n      }\n      if (\n        template.filter(t => t.type === 'sink' && t.group !== null).length > 0\n      ) {\n        //only supports 1 sink reference per category.  Need more?\n        groupSink.push({\n          category: category.id,\n          group: template.filter(t => t.type === 'sink' && t.group !== null)[0]\n            .group,\n          weight: template.filter(t => t.type === 'sink' && t.group !== null)[0]\n            .weight,\n        });\n      }\n      if (\n        template.filter(t => t.type === null && t.group !== null).length > 0\n      ) {\n        groupGeneral.push({ category: category.id, group: template[0].group });\n      }\n    }\n  }\n  //run category groups\n  const newWarnings = await applyGroupCleanups(\n    month,\n    groupSource,\n    groupSink,\n    groupGeneral,\n  );\n  warnings.splice(1, 0, ...newWarnings);\n\n  for (let c = 0; c < categories.length; c++) {\n    const category = categories[c];\n    const template = category_templates[category.id];\n    if (template) {\n      if (\n        template.filter(t => t.type === 'source' && t.group === null).length > 0\n      ) {\n        const balance = await getSheetValue(\n          sheetName,\n          `leftover-${category.id}`,\n        );\n        const budgeted = await getSheetValue(\n          sheetName,\n          `budget-${category.id}`,\n        );\n        if (balance >= 0) {\n          // const spent = await getSheetValue(\n          //   sheetName,\n          //   `sum-amount-${category.id}`,\n          // );\n          await setBudget({\n            category: category.id,\n            month,\n            amount: budgeted - balance,\n          });\n          await setGoal({\n            category: category.id,\n            month,\n            goal: budgeted - balance,\n            long_goal: 0,\n          });\n          num_sources += 1;\n        } else {\n          warnings.push(category.name + ' does not have available funds.');\n        }\n        const carryover = await db.first<Pick<db.DbZeroBudget, 'carryover'>>(\n          `SELECT carryover FROM zero_budgets WHERE month = ? and category = ?`,\n          [db_month, category.id],\n        );\n        if (carryover !== null) {\n          //keep track of source categories with rollover enabled\n          if (carryover.carryover === 1) {\n            sourceWithRollover.push({ cat: category, temp: template });\n          }\n        }\n      }\n      if (\n        template.filter(t => t.type === 'sink' && t.group === null).length > 0\n      ) {\n        sinkCategory.push({ cat: category, temp: template });\n        num_sinks += 1;\n        total_weight += template.filter(w => w.type === 'sink')[0].weight;\n      }\n    }\n  }\n\n  //funds all underfunded categories first unless the overspending rollover is checked\n  for (let c = 0; c < categories.length; c++) {\n    const category = categories[c];\n    const budgetAvailable = await getSheetValue(sheetName, `to-budget`);\n    const balance = await getSheetValue(sheetName, `leftover-${category.id}`);\n    const budgeted = await getSheetValue(sheetName, `budget-${category.id}`);\n    const to_budget = budgeted + Math.abs(balance);\n    const categoryId = category.id;\n    let carryover = await db.first<Pick<db.DbZeroBudget, 'carryover'>>(\n      `SELECT carryover FROM zero_budgets WHERE month = ? and category = ?`,\n      [db_month, categoryId],\n    );\n\n    if (carryover === null) {\n      carryover = { carryover: 0 };\n    }\n\n    if (\n      balance < 0 &&\n      Math.abs(balance) <= budgetAvailable &&\n      !category.is_income &&\n      carryover.carryover === 0\n    ) {\n      await setBudget({\n        category: category.id,\n        month,\n        amount: to_budget,\n      });\n    } else if (\n      balance < 0 &&\n      !category.is_income &&\n      carryover.carryover === 0 &&\n      Math.abs(balance) > budgetAvailable\n    ) {\n      await setBudget({\n        category: category.id,\n        month,\n        amount: budgeted + budgetAvailable,\n      });\n    }\n  }\n\n  const budgetAvailable = await getSheetValue(sheetName, `to-budget`);\n  if (budgetAvailable < 0) {\n    warnings.push('Global: No funds are available to reallocate.');\n  }\n\n  //fill sinking categories\n  for (let c = 0; c < sinkCategory.length; c++) {\n    const budgeted = await getSheetValue(\n      sheetName,\n      `budget-${sinkCategory[c].cat.id}`,\n    );\n    const categoryId = sinkCategory[c].cat.id;\n    const weight = sinkCategory[c].temp.filter(w => w.type === 'sink')[0]\n      .weight;\n    let to_budget =\n      budgeted + Math.round((weight / total_weight) * budgetAvailable);\n    if (c === sinkCategory.length - 1) {\n      const currentBudgetAvailable = await getSheetValue(\n        sheetName,\n        `to-budget`,\n      );\n      if (to_budget > currentBudgetAvailable) {\n        to_budget = budgeted + currentBudgetAvailable;\n      }\n    }\n    await setBudget({\n      category: categoryId,\n      month,\n      amount: to_budget,\n    });\n  }\n\n  if (num_sources === 0) {\n    if (errors.length) {\n      return {\n        type: 'error',\n        sticky: true,\n        message: 'There were errors interpreting some templates:',\n        pre: errors.join('\\n\\n'),\n      };\n    } else if (warnings.length) {\n      return {\n        type: 'warning',\n        message: 'Global: Funds not available:',\n        pre: warnings.join('\\n\\n'),\n      };\n    } else {\n      return {\n        type: 'message',\n        message: 'All categories were up to date.',\n      };\n    }\n  } else {\n    const applied = `Successfully returned funds from ${num_sources} ${\n      num_sources === 1 ? 'source' : 'sources'\n    } and funded ${num_sinks} sinking ${num_sinks === 1 ? 'fund' : 'funds'}.`;\n    if (errors.length) {\n      return {\n        sticky: true,\n        message: `${applied} There were errors interpreting some templates:`,\n        pre: errors.join('\\n\\n'),\n      };\n    } else if (warnings.length) {\n      return {\n        type: 'warning',\n        message: 'Global: Funds not available:',\n        pre: warnings.join('\\n\\n'),\n      };\n    } else if (budgetAvailable === 0) {\n      return {\n        type: 'message',\n        message: 'All categories were up to date.',\n      };\n    } else {\n      return {\n        type: 'message',\n        message: applied,\n      };\n    }\n  }\n}\n\nconst TEMPLATE_PREFIX = '#cleanup ';\nasync function getCategoryTemplates() {\n  const templates = {};\n\n  const notes = await db.all<db.DbNote>(\n    `SELECT * FROM notes WHERE lower(note) like '%${TEMPLATE_PREFIX}%'`,\n  );\n\n  for (let n = 0; n < notes.length; n++) {\n    const lines = notes[n].note.split('\\n');\n    const template_lines = [];\n    for (let l = 0; l < lines.length; l++) {\n      const line = lines[l].trim();\n      if (!line.toLowerCase().startsWith(TEMPLATE_PREFIX)) continue;\n      const expression = line.slice(TEMPLATE_PREFIX.length);\n      try {\n        const parsed = parse(expression);\n        template_lines.push(parsed);\n      } catch (e) {\n        template_lines.push({ type: 'error', line, error: e });\n      }\n    }\n    if (template_lines.length) {\n      templates[notes[n].id] = template_lines;\n    }\n  }\n  return templates;\n}\n","// @ts-strict-ignore\nimport * as d from 'date-fns';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { dayFromDate, parseDate } from '../../shared/months';\nimport { q } from '../../shared/query';\nimport { getApproxNumberThreshold } from '../../shared/rules';\nimport { recurConfigToRSchedule } from '../../shared/schedules';\nimport { groupBy } from '../../shared/util';\nimport { aqlQuery } from '../aql';\nimport * as db from '../db';\nimport { fromDateRepr } from '../models';\nimport { conditionsToAQL } from '../transactions/transaction-rules';\nimport { Schedule as RSchedule } from '../util/rschedule';\n\nfunction takeDates(config) {\n  const schedule = new RSchedule({ rrules: recurConfigToRSchedule(config) });\n  return schedule\n    .occurrences({ take: 3 })\n    .toArray()\n    .map(d => d.date);\n}\n\nasync function getTransactions(date, account) {\n  const { data } = await aqlQuery(\n    q('transactions')\n      .filter({\n        account,\n        schedule: null,\n        // Don't match transfers\n        'payee.transfer_acct': null,\n        $and: [\n          { date: { $gte: d.subDays(date, 2) } },\n          { date: { $lte: d.addDays(date, 2) } },\n        ],\n      })\n      .select('*')\n      .options({ splits: 'none' }),\n  );\n  return data;\n}\n\nfunction getRank(day1, day2) {\n  const dayDiff = Math.abs(\n    d.differenceInDays(parseDate(day1), parseDate(day2)),\n  );\n\n  // The amount of days off determines the rank: exact same day\n  // is highest rank 1, 1 day off is .5, etc. This will find the\n  // best start date that matches all the dates the closest\n  return 1 / (dayDiff + 1);\n}\n\nfunction matchSchedules(allOccurs, config) {\n  allOccurs = [...allOccurs].reverse();\n  const baseOccur = allOccurs[0];\n  const occurs = allOccurs.slice(1);\n  const schedules = [];\n\n  for (const trans of baseOccur.transactions) {\n    const threshold = getApproxNumberThreshold(trans.amount);\n    const payee = trans.payee;\n\n    const found = occurs.map(occur => {\n      let matched = occur.transactions.find(\n        t =>\n          t.amount >= trans.amount - threshold &&\n          t.amount <= trans.amount + threshold,\n      );\n      matched = matched && matched.payee === payee ? matched : null;\n\n      if (matched) {\n        return { trans: matched, rank: getRank(occur.date, matched.date) };\n      }\n      return null;\n    });\n\n    if (found.indexOf(null) !== -1) {\n      continue;\n    }\n\n    const rank = found.reduce(\n      (total, match) => total + match.rank,\n      getRank(baseOccur.date, trans.date),\n    );\n\n    const exactAmount = found.reduce(\n      (exact, match) => exact && match.trans.amount === trans.amount,\n      true,\n    );\n\n    schedules.push({\n      rank,\n      amount: trans.amount,\n      account: trans.account,\n      payee: trans.payee,\n      date: config,\n      // Exact dates rank as 1, so all of them matches exactly it\n      // would equal the number of `allOccurs`\n      exactDate: rank === allOccurs.length,\n      exactAmount,\n    });\n  }\n\n  return schedules;\n}\n\nasync function schedulesForPattern(baseStart, numDays, baseConfig, accountId) {\n  let schedules = [];\n\n  for (let i = 0; i < numDays; i++) {\n    const start = d.addDays(baseStart, i);\n    let config;\n    if (typeof baseConfig === 'function') {\n      config = baseConfig(start);\n\n      if (config === false) {\n        // Skip this one\n        continue;\n      }\n    } else {\n      config = { ...baseConfig, start };\n    }\n\n    // Our recur config expects a day string, not a native date format\n    config.start = dayFromDate(config.start);\n\n    const data = [];\n    const dates = takeDates(config);\n    for (const date of dates) {\n      data.push({\n        date: dayFromDate(date),\n        transactions: await getTransactions(date, accountId),\n      });\n    }\n\n    schedules = schedules.concat(matchSchedules(data, config));\n  }\n  return schedules;\n}\n\nasync function weekly(startDate, accountId) {\n  return schedulesForPattern(\n    d.subWeeks(parseDate(startDate), 4),\n    7 * 2,\n    { frequency: 'weekly' },\n    accountId,\n  );\n}\n\nasync function every2weeks(startDate, accountId) {\n  return schedulesForPattern(\n    // 6 weeks would cover 3 instances, but we also scan an addition\n    // week back\n    d.subWeeks(parseDate(startDate), 7),\n    7 * 2,\n    { frequency: 'weekly', interval: 2 },\n    accountId,\n  );\n}\n\nasync function monthly(startDate, accountId) {\n  return schedulesForPattern(\n    d.subMonths(parseDate(startDate), 4),\n    31 * 2,\n    start => {\n      // 28 is the max number of days that all months are guaranteed\n      // to have. We don't want to go any higher than that because\n      // we'll end up skipping months that don't have that day.\n      // The use cases of end of month days will be covered with the\n      // `monthlyLastDay` pattern;\n      if (d.getDate(start) > 28) {\n        return false;\n      }\n      return { start, frequency: 'monthly' };\n    },\n    accountId,\n  );\n}\n\nasync function monthlyLastDay(startDate, accountId) {\n  // We do two separate calls because this pattern doesn't fit into\n  // how `schedulesForPattern` works\n  const s1 = await schedulesForPattern(\n    d.subMonths(parseDate(startDate), 3),\n    1,\n    { frequency: 'monthly', patterns: [{ type: 'day', value: -1 }] },\n    accountId,\n  );\n\n  const s2 = await schedulesForPattern(\n    d.subMonths(parseDate(startDate), 4),\n    1,\n    { frequency: 'monthly', patterns: [{ type: 'day', value: -1 }] },\n    accountId,\n  );\n\n  return s1.concat(s2);\n}\n\nasync function monthly1stor3rd(startDate, accountId) {\n  return schedulesForPattern(\n    d.subWeeks(parseDate(startDate), 8),\n    14,\n    start => {\n      const day = d.format(new Date(), 'iiii');\n      const dayValue = day.slice(0, 2).toUpperCase();\n\n      return {\n        start,\n        frequency: 'monthly',\n        patterns: [\n          { type: dayValue, value: 1 },\n          { type: dayValue, value: 3 },\n        ],\n      };\n    },\n    accountId,\n  );\n}\n\nasync function monthly2ndor4th(startDate, accountId) {\n  return schedulesForPattern(\n    d.subMonths(parseDate(startDate), 8),\n    14,\n    start => {\n      const day = d.format(new Date(), 'iiii');\n      const dayValue = day.slice(0, 2).toUpperCase();\n\n      return {\n        start,\n        frequency: 'monthly',\n        patterns: [\n          { type: dayValue, value: 2 },\n          { type: dayValue, value: 4 },\n        ],\n      };\n    },\n    accountId,\n  );\n}\n\nasync function findStartDate(schedule) {\n  const conditions = schedule._conditions;\n  const dateCond = conditions.find(c => c.field === 'date');\n  let currentConfig = dateCond.value;\n\n  while (1) {\n    const prevConfig = currentConfig;\n    currentConfig = { ...prevConfig };\n\n    switch (currentConfig.frequency) {\n      case 'weekly':\n        currentConfig.start = dayFromDate(\n          d.subWeeks(\n            parseDate(currentConfig.start),\n            currentConfig.interval || 1,\n          ),\n        );\n\n        break;\n      case 'monthly':\n        currentConfig.start = dayFromDate(\n          d.subMonths(\n            parseDate(currentConfig.start),\n            currentConfig.interval || 1,\n          ),\n        );\n        break;\n      case 'yearly':\n        currentConfig.start = dayFromDate(\n          d.subYears(\n            parseDate(currentConfig.start),\n            currentConfig.interval || 1,\n          ),\n        );\n        break;\n      default:\n        throw new Error('findStartDate: invalid frequency');\n    }\n\n    const newConditions = conditions.map(c =>\n      c.field === 'date' ? { ...c, value: currentConfig } : c,\n    );\n\n    const { filters, errors } = conditionsToAQL(newConditions, {\n      recurDateBounds: 1,\n    });\n    if (errors.length > 0) {\n      // Somehow we generated an invalid config. Abort the whole\n      // process and don't change the date at all\n      currentConfig = null;\n      break;\n    }\n\n    const { data } = await aqlQuery(\n      q('transactions').filter({ $and: filters }).select('*'),\n    );\n\n    if (data.length === 0) {\n      // No data, revert back to the last valid value and stop\n      currentConfig = prevConfig;\n      break;\n    }\n  }\n\n  if (currentConfig) {\n    return {\n      ...schedule,\n      date: currentConfig,\n      _conditions: conditions.map(c =>\n        c.field === 'date' ? { ...c, value: currentConfig } : c,\n      ),\n    };\n  }\n  return schedule;\n}\n\nexport async function findSchedules() {\n  // Patterns to look for:\n  // * Weekly\n  // * Every two weeks\n  // * Monthly on day X\n  // * Monthly on every 1st or 3rd day\n  // * Monthly on every 2nd or 4th day\n  //\n  // Search for them approx (+- 2 days) but track which transactions\n  // and find the best one...\n\n  const { data: accounts } = await aqlQuery(\n    q('accounts').filter({ closed: false }).select('*'),\n  );\n\n  let allSchedules = [];\n\n  for (const account of accounts) {\n    // Find latest transaction-ish to start with\n    const latestTrans = await db.first<Pick<db.DbViewTransaction, 'date'>>(\n      'SELECT date FROM v_transactions WHERE account = ? AND parent_id IS NULL ORDER BY date DESC LIMIT 1',\n      [account.id],\n    );\n\n    if (latestTrans) {\n      const latestDate = fromDateRepr(latestTrans.date);\n      allSchedules = allSchedules.concat(\n        await weekly(latestDate, account.id),\n        await every2weeks(latestDate, account.id),\n        await monthly(latestDate, account.id),\n        await monthlyLastDay(latestDate, account.id),\n        await monthly1stor3rd(latestDate, account.id),\n        await monthly2ndor4th(latestDate, account.id),\n      );\n    }\n  }\n\n  const schedules = [...groupBy(allSchedules, 'payee').entries()].map(\n    ([, schedules]) => {\n      schedules.sort((s1, s2) => s2.rank - s1.rank);\n      const winner = schedules[0];\n\n      // Convert to schedule and return it\n      return {\n        id: uuidv4(),\n        account: winner.account,\n        payee: winner.payee,\n        date: winner.date,\n        amount: winner.amount,\n        _conditions: [\n          { op: 'is', field: 'account', value: winner.account },\n          { op: 'is', field: 'payee', value: winner.payee },\n          {\n            op: winner.exactDate ? 'is' : 'isapprox',\n            field: 'date',\n            value: winner.date,\n          },\n          {\n            op: winner.exactAmount ? 'is' : 'isapprox',\n            field: 'amount',\n            value: winner.amount,\n          },\n        ],\n      };\n    },\n  );\n\n  const finalized: Awaited<ReturnType<typeof findStartDate>> = [];\n  for (const schedule of schedules) {\n    finalized.push(await findStartDate(schedule));\n  }\n  return finalized;\n}\n","// @ts-strict-ignore\nimport * as d from 'date-fns';\nimport deepEqual from 'deep-equal';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { captureBreadcrumb } from '../../platform/exceptions';\nimport * as connection from '../../platform/server/connection';\nimport { currentDay, dayFromDate, parseDate } from '../../shared/months';\nimport { q } from '../../shared/query';\nimport {\n  extractScheduleConds,\n  getDateWithSkippedWeekend,\n  getHasTransactionsQuery,\n  getNextDate,\n  getScheduledAmount,\n  getStatus,\n  recurConfigToRSchedule,\n} from '../../shared/schedules';\nimport { ScheduleEntity } from '../../types/models';\nimport { addTransactions } from '../accounts/sync';\nimport { createApp } from '../app';\nimport { aqlQuery } from '../aql';\nimport * as db from '../db';\nimport { toDateRepr } from '../models';\nimport { mutator, runMutator } from '../mutators';\nimport * as prefs from '../prefs';\nimport { Rule } from '../rules';\nimport { addSyncListener, batchMessages } from '../sync';\nimport {\n  getRules,\n  insertRule,\n  ruleModel,\n  updateRule,\n} from '../transactions/transaction-rules';\nimport { undoable } from '../undo';\nimport { Schedule as RSchedule } from '../util/rschedule';\n\nimport { findSchedules } from './find-schedules';\n\n// Utilities\n\nfunction zip(arr1, arr2) {\n  const result = [];\n  for (let i = 0; i < arr1.length; i++) {\n    result.push([arr1[i], arr2[i]]);\n  }\n  return result;\n}\n\nexport function updateConditions(conditions, newConditions) {\n  const scheduleConds = extractScheduleConds(conditions);\n  const newScheduleConds = extractScheduleConds(newConditions);\n\n  const replacements = zip(\n    Object.values(scheduleConds),\n    Object.values(newScheduleConds),\n  );\n\n  const updated = conditions.map(cond => {\n    const r = replacements.find(r => cond === r[0]);\n    return r && r[1] ? r[1] : cond;\n  });\n\n  const added = replacements\n    .filter(x => x[0] == null && x[1] != null)\n    .map(x => x[1]);\n\n  return updated.concat(added);\n}\n\nexport async function getRuleForSchedule(id: string | null): Promise<Rule> {\n  if (id == null) {\n    throw new Error('Schedule not attached to a rule');\n  }\n\n  const { data: ruleId } = await aqlQuery(\n    q('schedules').filter({ id }).calculate('rule'),\n  );\n  return getRules().find(rule => rule.id === ruleId);\n}\n\nasync function fixRuleForSchedule(id) {\n  const { data: ruleId } = await aqlQuery(\n    q('schedules').filter({ id }).calculate('rule'),\n  );\n\n  if (ruleId) {\n    // Take the bad rule out of the system so it never causes problems\n    // in the future\n    await db.delete_('rules', ruleId);\n  }\n\n  const newId = await insertRule({\n    stage: null,\n    conditionsOp: 'and',\n    conditions: [\n      { op: 'isapprox', field: 'date', value: currentDay() },\n      { op: 'isapprox', field: 'amount', value: 0 },\n    ],\n    actions: [{ op: 'link-schedule', value: id }],\n  });\n\n  await db.updateWithSchema('schedules', { id, rule: newId });\n\n  return getRules().find(rule => rule.id === newId);\n}\n\nexport async function setNextDate({\n  id,\n  start,\n  conditions,\n  reset,\n}: {\n  id: string;\n  start?;\n  conditions?;\n  reset?: boolean;\n}) {\n  if (conditions == null) {\n    const rule = await getRuleForSchedule(id);\n    if (rule == null) {\n      throw new Error('No rule found for schedule');\n    }\n    conditions = rule.serialize().conditions;\n  }\n\n  const { date: dateCond } = extractScheduleConds(conditions);\n\n  const { data: nextDate } = await aqlQuery(\n    q('schedules').filter({ id }).calculate('next_date'),\n  );\n\n  // Only do this if a date condition exists\n  if (dateCond) {\n    const newNextDate = getNextDate(\n      dateCond,\n      start ? start(nextDate) : new Date(),\n    );\n\n    if (newNextDate !== nextDate) {\n      // Our `update` functon requires the id of the item and we don't\n      // have it, so we need to query it\n      const nd = await db.first<\n        Pick<db.DbScheduleNextDate, 'id' | 'base_next_date_ts'>\n      >(\n        'SELECT id, base_next_date_ts FROM schedules_next_date WHERE schedule_id = ?',\n        [id],\n      );\n\n      await db.update(\n        'schedules_next_date',\n        reset\n          ? {\n              id: nd.id,\n              base_next_date: toDateRepr(newNextDate),\n              base_next_date_ts: Date.now(),\n            }\n          : {\n              id: nd.id,\n              local_next_date: toDateRepr(newNextDate),\n              local_next_date_ts: nd.base_next_date_ts,\n            },\n      );\n    }\n  }\n}\n\n// Methods\n\nasync function checkIfScheduleExists(name, scheduleId) {\n  const idForName = await db.first<Pick<db.DbSchedule, 'id'>>(\n    'SELECT id from schedules WHERE tombstone = 0 AND name = ?',\n    [name],\n  );\n\n  if (idForName == null) {\n    return false;\n  }\n  if (scheduleId) {\n    return idForName['id'] !== scheduleId;\n  }\n  return true;\n}\n\nexport async function createSchedule({\n  schedule = null,\n  conditions = [],\n} = {}): Promise<ScheduleEntity['id']> {\n  const scheduleId = schedule?.id || uuidv4();\n\n  const { date: dateCond } = extractScheduleConds(conditions);\n  if (dateCond == null) {\n    throw new Error('A date condition is required to create a schedule');\n  }\n  if (dateCond.value == null) {\n    throw new Error('Date is required');\n  }\n\n  const nextDate = getNextDate(dateCond);\n  const nextDateRepr = nextDate ? toDateRepr(nextDate) : null;\n  if (schedule) {\n    if (schedule.name) {\n      if (await checkIfScheduleExists(schedule.name, scheduleId)) {\n        throw new Error('Cannot create schedules with the same name');\n      }\n    } else {\n      schedule.name = null;\n    }\n  }\n\n  // Create the rule here based on the info\n  const ruleId = await insertRule({\n    stage: null,\n    conditionsOp: 'and',\n    conditions,\n    actions: [{ op: 'link-schedule', value: scheduleId }],\n  });\n\n  const now = Date.now();\n  await db.insertWithUUID('schedules_next_date', {\n    schedule_id: scheduleId,\n    local_next_date: nextDateRepr,\n    local_next_date_ts: now,\n    base_next_date: nextDateRepr,\n    base_next_date_ts: now,\n  });\n\n  await db.insertWithSchema('schedules', {\n    ...schedule,\n    id: scheduleId,\n    rule: ruleId,\n  });\n\n  return scheduleId;\n}\n\n// TODO: don't allow deleting rules that link schedules\n\nexport async function updateSchedule({\n  schedule,\n  conditions,\n  resetNextDate,\n}: {\n  schedule;\n  conditions?;\n  resetNextDate?: boolean;\n}) {\n  if (schedule.rule) {\n    throw new Error('You cannot change the rule of a schedule');\n  }\n  let rule;\n\n  // This must be outside the `batchMessages` call because we change\n  // and then read data\n  if (conditions) {\n    const { date: dateCond } = extractScheduleConds(conditions);\n    if (dateCond && dateCond.value == null) {\n      throw new Error('Date is required');\n    }\n\n    // We need to get the full rule to merge in the updated\n    // conditions\n    rule = await getRuleForSchedule(schedule.id);\n\n    if (rule == null) {\n      // In the edge case that a rule gets corrupted (either by a bug in\n      // the system or user messing with their data), don't crash. We\n      // generate a new rule because schedules have to have a rule\n      // attached to them.\n      rule = await fixRuleForSchedule(schedule.id);\n    }\n  }\n\n  await batchMessages(async () => {\n    if (conditions) {\n      const oldConditions = rule.serialize().conditions;\n      const newConditions = updateConditions(oldConditions, conditions);\n\n      await updateRule({ id: rule.id, conditions: newConditions });\n\n      // Annoyingly, sometimes it has `type` and sometimes it doesn't\n      const stripType = ({ type, ...fields }) => fields;\n\n      // Update `next_date` if the user forced it, or if the account\n      // or date changed. We check account because we don't update\n      // schedules automatically for closed account, and the user\n      // might switch accounts from a closed one\n      if (\n        resetNextDate ||\n        !deepEqual(\n          oldConditions.find(c => c.field === 'account'),\n          oldConditions.find(c => c.field === 'account'),\n        ) ||\n        !deepEqual(\n          stripType(oldConditions.find(c => c.field === 'date') || {}),\n          stripType(newConditions.find(c => c.field === 'date') || {}),\n        )\n      ) {\n        await setNextDate({\n          id: schedule.id,\n          conditions: newConditions,\n          reset: true,\n        });\n      }\n    } else if (resetNextDate) {\n      await setNextDate({ id: schedule.id, reset: true });\n    }\n\n    await db.updateWithSchema('schedules', schedule);\n  });\n\n  return schedule.id;\n}\n\nexport async function deleteSchedule({ id }) {\n  const { data: ruleId } = await aqlQuery(\n    q('schedules').filter({ id }).calculate('rule'),\n  );\n\n  await batchMessages(async () => {\n    await db.delete_('rules', ruleId);\n    await db.delete_('schedules', id);\n  });\n}\n\nasync function skipNextDate({ id }) {\n  return setNextDate({\n    id,\n    start: nextDate => {\n      return d.addDays(parseDate(nextDate), 1);\n    },\n  });\n}\n\nfunction discoverSchedules() {\n  return findSchedules();\n}\n\nasync function getUpcomingDates({ config, count }) {\n  const rules = recurConfigToRSchedule(config);\n\n  try {\n    const schedule = new RSchedule({ rrules: rules });\n\n    return schedule\n      .occurrences({ start: d.startOfDay(new Date()), take: count })\n      .toArray()\n      .map(date =>\n        config.skipWeekend\n          ? getDateWithSkippedWeekend(date.date, config.weekendSolveMode)\n          : date.date,\n      )\n      .map(date => dayFromDate(date));\n  } catch (err) {\n    captureBreadcrumb(config);\n    throw err;\n  }\n}\n\n// Services\n\nfunction onRuleUpdate(rule) {\n  const { actions, conditions } =\n    rule instanceof Rule ? rule.serialize() : ruleModel.toJS(rule);\n\n  if (actions && actions.find(a => a.op === 'link-schedule')) {\n    const scheduleId = actions.find(a => a.op === 'link-schedule').value;\n\n    if (scheduleId) {\n      const conds = extractScheduleConds(conditions);\n\n      const payeeIdx = conditions.findIndex(c => c === conds.payee);\n      const accountIdx = conditions.findIndex(c => c === conds.account);\n      const amountIdx = conditions.findIndex(c => c === conds.amount);\n      const dateIdx = conditions.findIndex(c => c === conds.date);\n\n      db.runQuery(\n        'INSERT OR REPLACE INTO schedules_json_paths (schedule_id, payee, account, amount, date) VALUES (?, ?, ?, ?, ?)',\n        [\n          scheduleId,\n          payeeIdx === -1 ? null : `$[${payeeIdx}]`,\n          accountIdx === -1 ? null : `$[${accountIdx}]`,\n          amountIdx === -1 ? null : `$[${amountIdx}]`,\n          dateIdx === -1 ? null : `$[${dateIdx}]`,\n        ],\n      );\n    }\n  }\n}\n\nfunction trackJSONPaths() {\n  // Populate the table\n  db.transaction(() => {\n    getRules().forEach(rule => {\n      onRuleUpdate(rule);\n    });\n  });\n\n  return addSyncListener(onApplySync);\n}\n\nfunction onApplySync(oldValues, newValues) {\n  newValues.forEach((items, table) => {\n    if (table === 'rules') {\n      items.forEach(newValue => {\n        onRuleUpdate(newValue);\n      });\n    }\n  });\n}\n\n// This is the service that move schedules forward automatically and\n// posts transactions\n\nasync function postTransactionForSchedule({\n  id,\n  today,\n}: {\n  id: string;\n  today?: boolean;\n}) {\n  const { data } = await aqlQuery(q('schedules').filter({ id }).select('*'));\n  const schedule = data[0];\n  if (schedule == null || schedule._account == null) {\n    return;\n  }\n\n  const transaction = {\n    payee: schedule._payee,\n    account: schedule._account,\n    amount: getScheduledAmount(schedule._amount),\n    date: today ? currentDay() : schedule.next_date,\n    schedule: schedule.id,\n    cleared: false,\n  };\n\n  if (transaction.account) {\n    await addTransactions(transaction.account, [transaction]);\n  }\n}\n\n// TODO: make this sequential\n\nasync function advanceSchedulesService(syncSuccess) {\n  // Move all paid schedules\n  const { data: schedules } = await aqlQuery(\n    q('schedules')\n      .filter({ completed: false, '_account.closed': false })\n      .select('*'),\n  );\n  const { data: hasTransData } = await aqlQuery(\n    getHasTransactionsQuery(schedules),\n  );\n  const hasTrans = new Set(\n    hasTransData.filter(Boolean).map(row => row.schedule),\n  );\n\n  const failedToPost = [];\n  let didPost = false;\n\n  const { data: upcomingLength } = await aqlQuery(\n    q('preferences')\n      .filter({ id: 'upcomingScheduledTransactionLength' })\n      .select('value'),\n  );\n\n  for (const schedule of schedules) {\n    const status = getStatus(\n      schedule.next_date,\n      schedule.completed,\n      hasTrans.has(schedule.id),\n      upcomingLength[0]?.value ?? '7',\n    );\n\n    if (status === 'paid') {\n      if (schedule._date) {\n        // Move forward recurring schedules\n        if (schedule._date.frequency) {\n          try {\n            await setNextDate({ id: schedule.id });\n          } catch (err) {\n            // This might error if the rule is corrupted and it can't\n            // find the rule\n          }\n        } else {\n          if (schedule._date < currentDay()) {\n            // Complete any single schedules\n            await updateSchedule({\n              schedule: { id: schedule.id, completed: true },\n            });\n          }\n        }\n      }\n    } else if (\n      (status === 'due' || status === 'missed') &&\n      schedule.posts_transaction &&\n      schedule._account\n    ) {\n      // Automatically create a transaction for due schedules\n      if (syncSuccess) {\n        await postTransactionForSchedule({ id: schedule.id });\n\n        didPost = true;\n      } else {\n        failedToPost.push(schedule._payee);\n      }\n    }\n  }\n\n  if (failedToPost.length > 0) {\n    connection.send('schedules-offline');\n  } else if (didPost) {\n    // This forces a full refresh of transactions because it\n    // simulates them coming in from a full sync. This not a\n    // great API right now, but I think generally the approach\n    // is sane to treat them as external sync events.\n    connection.send('sync-event', {\n      type: 'success',\n      tables: ['transactions'],\n      syncDisabled: false,\n    });\n  }\n}\n\nexport type SchedulesHandlers = {\n  'schedule/create': typeof createSchedule;\n  'schedule/update': typeof updateSchedule;\n  'schedule/delete': typeof deleteSchedule;\n  'schedule/skip-next-date': typeof skipNextDate;\n  'schedule/post-transaction': typeof postTransactionForSchedule;\n  'schedule/force-run-service': typeof advanceSchedulesService;\n  'schedule/discover': typeof discoverSchedules;\n  'schedule/get-upcoming-dates': typeof getUpcomingDates;\n};\n\n// Expose functions to the client\nexport const app = createApp<SchedulesHandlers>();\n\napp.method('schedule/create', mutator(undoable(createSchedule)));\napp.method('schedule/update', mutator(undoable(updateSchedule)));\napp.method('schedule/delete', mutator(undoable(deleteSchedule)));\napp.method('schedule/skip-next-date', mutator(undoable(skipNextDate)));\napp.method(\n  'schedule/post-transaction',\n  mutator(undoable(postTransactionForSchedule)),\n);\napp.method(\n  'schedule/force-run-service',\n  mutator(() => advanceSchedulesService(true)),\n);\napp.method('schedule/discover', discoverSchedules);\napp.method('schedule/get-upcoming-dates', getUpcomingDates);\n\napp.service(trackJSONPaths);\n\napp.events.on('sync', ({ type }) => {\n  const completeEvent =\n    type === 'success' || type === 'error' || type === 'unauthorized';\n\n  if (completeEvent && prefs.getPrefs()) {\n    const { lastScheduleRun } = prefs.getPrefs();\n\n    if (lastScheduleRun !== currentDay()) {\n      runMutator(() => advanceSchedulesService(type === 'success'));\n\n      prefs.savePrefs({ lastScheduleRun: currentDay() });\n    }\n  }\n});\n","// @ts-strict-ignore\nimport * as monthUtils from '../../shared/months';\nimport {\n  getNextDate,\n  getDateWithSkippedWeekend,\n  extractScheduleConds,\n} from '../../shared/schedules';\nimport { CategoryEntity } from '../../types/models';\nimport { ScheduleTemplate, Template } from '../../types/models/templates';\nimport * as db from '../db';\nimport { getRuleForSchedule } from '../schedules/app';\n\nimport { isReflectBudget } from './actions';\n\ntype ScheduleTemplateTarget = {\n  name: string;\n  target: number;\n  next_date_string: string;\n  target_interval: number;\n  target_frequency: string;\n  num_months: number;\n  completed: number;\n  full: boolean;\n  repeat: boolean;\n};\n\nasync function createScheduleList(\n  templates: ScheduleTemplate[],\n  current_month: string,\n  category: CategoryEntity,\n) {\n  const t: Array<ScheduleTemplateTarget> = [];\n  const errors: string[] = [];\n\n  for (const template of templates) {\n    const { id: sid, completed } = await db.first<\n      Pick<db.DbSchedule, 'id' | 'completed'>\n    >(\n      'SELECT id, completed FROM schedules WHERE TRIM(name) = ? AND tombstone = 0',\n      [template.name],\n    );\n    const rule = await getRuleForSchedule(sid);\n    const conditions = rule.serialize().conditions;\n    const { date: dateConditions, amount: amountCondition } =\n      extractScheduleConds(conditions);\n    let scheduleAmount =\n      amountCondition.op === 'isbetween'\n        ? Math.round(amountCondition.value.num1 + amountCondition.value.num2) /\n          2\n        : amountCondition.value;\n    // Apply adjustment percentage if specified\n    if (template.adjustment) {\n      const adjustmentFactor = 1 + template.adjustment / 100;\n      scheduleAmount = Math.round(scheduleAmount * adjustmentFactor);\n    }\n    const { amount: postRuleAmount, subtransactions } = rule.execActions({\n      amount: scheduleAmount,\n      category: category.id,\n      subtransactions: [],\n    });\n    const categorySubtransactions = subtransactions?.filter(\n      t => t.category === category.id,\n    );\n\n    // Unless the current category is relevant to the schedule, target the post-rule amount.\n    const sign = category.is_income ? 1 : -1;\n    const target =\n      sign *\n      (categorySubtransactions?.length\n        ? categorySubtransactions.reduce((acc, t) => acc + t.amount, 0)\n        : (postRuleAmount ?? scheduleAmount));\n\n    const next_date_string = getNextDate(\n      dateConditions,\n      monthUtils._parse(current_month),\n    );\n    const target_interval = dateConditions.value.interval\n      ? dateConditions.value.interval\n      : 1;\n    const target_frequency = dateConditions.value.frequency;\n    const isRepeating =\n      Object(dateConditions.value) === dateConditions.value &&\n      'frequency' in dateConditions.value;\n    const num_months = monthUtils.differenceInCalendarMonths(\n      next_date_string,\n      current_month,\n    );\n    if (num_months < 0) {\n      //non-repeating schedules could be negative\n      errors.push(`Schedule ${template.name} is in the Past.`);\n    } else {\n      t.push({\n        target,\n        next_date_string,\n        target_interval,\n        target_frequency,\n        num_months,\n        completed,\n        //started,\n        full: template.full === null ? false : template.full,\n        repeat: isRepeating,\n        name: template.name,\n      });\n      if (!completed) {\n        if (isRepeating) {\n          let monthlyTarget = 0;\n          const nextMonth = monthUtils.addMonths(\n            current_month,\n            t[t.length - 1].num_months + 1,\n          );\n          let nextBaseDate = getNextDate(\n            dateConditions,\n            monthUtils._parse(current_month),\n            true,\n          );\n          let nextDate = dateConditions.value.skipWeekend\n            ? monthUtils.dayFromDate(\n                getDateWithSkippedWeekend(\n                  monthUtils._parse(nextBaseDate),\n                  dateConditions.value.weekendSolveMode,\n                ),\n              )\n            : nextBaseDate;\n          while (nextDate < nextMonth) {\n            monthlyTarget += -target;\n            const currentDate = nextBaseDate;\n            const oneDayLater = monthUtils.addDays(nextBaseDate, 1);\n            nextBaseDate = getNextDate(\n              dateConditions,\n              monthUtils._parse(oneDayLater),\n              true,\n            );\n            nextDate = dateConditions.value.skipWeekend\n              ? monthUtils.dayFromDate(\n                  getDateWithSkippedWeekend(\n                    monthUtils._parse(nextBaseDate),\n                    dateConditions.value.weekendSolveMode,\n                  ),\n                )\n              : nextBaseDate;\n            const diffDays = monthUtils.differenceInCalendarDays(\n              nextBaseDate,\n              currentDate,\n            );\n            if (!diffDays) {\n              // This can happen if the schedule has an end condition.\n              break;\n            }\n          }\n          t[t.length - 1].target = -monthlyTarget;\n        }\n      } else {\n        errors.push(\n          `Schedule ${template.name} is not active during the month in question.`,\n        );\n      }\n    }\n  }\n  return { t: t.filter(c => c.completed === 0), errors };\n}\n\nfunction getPayMonthOfTotal(t: ScheduleTemplateTarget[]) {\n  //return the contribution amounts of full or every month type schedules\n  let total = 0;\n  const schedules = t.filter(c => c.num_months === 0);\n  for (const schedule of schedules) {\n    total += schedule.target;\n  }\n  return total;\n}\n\nasync function getSinkingContributionTotal(\n  t: ScheduleTemplateTarget[],\n  remainder: number,\n  last_month_balance: number,\n) {\n  //return the contribution amount if there is a balance carried in the category\n  let total = 0;\n  for (const [index, schedule] of t.entries()) {\n    remainder =\n      index === 0\n        ? schedule.target - last_month_balance\n        : schedule.target - remainder;\n    let tg = 0;\n    if (remainder >= 0) {\n      tg = remainder;\n      remainder = 0;\n    } else {\n      tg = 0;\n      remainder = Math.abs(remainder);\n    }\n    total += tg / (schedule.num_months + 1);\n  }\n  return total;\n}\n\nfunction getSinkingBaseContributionTotal(t: ScheduleTemplateTarget[]) {\n  //return only the base contribution of each schedule\n  let total = 0;\n  for (const schedule of t) {\n    let monthlyAmount = 0;\n    let prevDate;\n    let intervalMonths;\n    switch (schedule.target_frequency) {\n      case 'yearly':\n        monthlyAmount = schedule.target / schedule.target_interval / 12;\n        break;\n      case 'monthly':\n        monthlyAmount = schedule.target / schedule.target_interval;\n        break;\n      case 'weekly':\n        prevDate = monthUtils.subWeeks(\n          schedule.next_date_string,\n          schedule.target_interval,\n        );\n        intervalMonths = monthUtils.differenceInCalendarMonths(\n          schedule.next_date_string,\n          prevDate,\n        );\n        // shouldn't be possible, but better check\n        if (intervalMonths === 0) intervalMonths = 1;\n        monthlyAmount = schedule.target / intervalMonths;\n        break;\n      case 'daily':\n        prevDate = monthUtils.subDays(\n          schedule.next_date_string,\n          schedule.target_interval,\n        );\n        intervalMonths = monthUtils.differenceInCalendarMonths(\n          schedule.next_date_string,\n          prevDate,\n        );\n        // shouldn't be possible, but better check\n        if (intervalMonths === 0) intervalMonths = 1;\n        monthlyAmount = schedule.target / intervalMonths;\n        break;\n    }\n    total += monthlyAmount;\n  }\n  return total;\n}\n\nfunction getSinkingTotal(t: ScheduleTemplateTarget[]) {\n  //sum the total of all upcoming schedules\n  let total = 0;\n  for (const schedule of t) {\n    total += schedule.target;\n  }\n  return total;\n}\n\nexport async function runSchedule(\n  template_lines: Template[],\n  current_month: string,\n  balance: number,\n  remainder: number,\n  last_month_balance: number,\n  to_budget: number,\n  errors: string[],\n  category: CategoryEntity,\n) {\n  const scheduleTemplates = template_lines.filter(t => t.type === 'schedule');\n\n  const t = await createScheduleList(\n    scheduleTemplates,\n    current_month,\n    category,\n  );\n  errors = errors.concat(t.errors);\n\n  const isPayMonthOf = c =>\n    c.full ||\n    (c.target_frequency === 'monthly' &&\n      c.target_interval === 1 &&\n      c.num_months === 0) ||\n    (c.target_frequency === 'weekly' && c.target_interval <= 4) ||\n    (c.target_frequency === 'daily' && c.target_interval <= 31) ||\n    isReflectBudget();\n\n  const t_payMonthOf = t.t.filter(isPayMonthOf);\n  const t_sinking = t.t\n    .filter(c => !isPayMonthOf(c))\n    .sort((a, b) => a.next_date_string.localeCompare(b.next_date_string));\n  const totalPayMonthOf = getPayMonthOfTotal(t_payMonthOf);\n  const totalSinking = getSinkingTotal(t_sinking);\n  const totalSinkingBaseContribution =\n    getSinkingBaseContributionTotal(t_sinking);\n\n  if (balance >= totalSinking + totalPayMonthOf) {\n    to_budget += Math.round(totalPayMonthOf + totalSinkingBaseContribution);\n  } else {\n    const totalSinkingContribution = await getSinkingContributionTotal(\n      t_sinking,\n      remainder,\n      last_month_balance,\n    );\n    if (t_sinking.length === 0) {\n      to_budget +=\n        Math.round(totalPayMonthOf + totalSinkingContribution) -\n        last_month_balance;\n    } else {\n      to_budget += Math.round(totalPayMonthOf + totalSinkingContribution);\n    }\n  }\n  return { to_budget, errors, remainder };\n}\n","// https://peggyjs.org\r\n\r\nexpr\r\n  = template: template _ percentOf:percentOf category: name\r\n    { return { type: 'percentage', percent: +percentOf.percent, previous: percentOf.prev, category, priority: template.priority, directive: template.directive }}\r\n  / template: template _ amount: amount _ repeatEvery _ period: periodCount _ starting _ starting: date limit: limit?\r\n    { return { type: 'periodic', amount, period, starting, limit, priority: template.priority, directive: template.directive }}\r\n  / template: template _ amount: amount _ by _ month: month from: spendFrom? repeat: (_ repeatEvery _ repeat)?\r\n    { return {\r\n      type: from ? 'spend' : 'by',\r\n      amount,\r\n      month,\r\n      ...(repeat ? repeat[3] : {}),\r\n      from,\r\n      priority: template.priority, directive: template.directive\r\n    }}\r\n  / template: template _ monthly: amount limit: limit?\r\n    { return { type: 'simple', monthly, limit, priority: template.priority, directive: template.directive }}\r\n  / template: template _ limit: limit\r\n    { return { type: 'simple', monthly: null, limit, priority: template.priority, directive: template.directive }}\r\n  / template: template _ schedule:schedule _ full:full? name:rawScheduleName modifiers:modifiers?\r\n    { return { type: 'schedule', name: name.trim(), priority: template.priority, directive: template.directive, full, adjustment: modifiers?.adjustment }}\r\n  / template: template _ remainder: remainder limit: limit?\r\n    { return { type: 'remainder', priority: null, directive: template.directive, weight: remainder, limit }}\r\n  / template: template _ 'average'i _ amount: positive _ 'months'i?\r\n    { return { type: 'average', numMonths: +amount, priority: template.priority, directive: template.directive }}\r\n  / template: template _ 'copy from'i _ lookBack: positive _ 'months ago'i limit:limit?\r\n    { return { type: 'copy', priority: template.priority, directive: template.directive, lookBack: +lookBack, limit }}\r\n  / goal: goal amount: amount { return {type: 'goal', amount: amount, priority: null, directive: goal }}\r\n\r\nmodifiers = _ '[' modifier:modifier ']' { return modifier }\r\n\r\nmodifier\r\n  = op:('increase'i / 'decrease'i) _ value:percent { \r\n      const multiplier = op.toLowerCase() === 'increase' ? 1 : -1;\r\n      return { adjustment: multiplier * +value }\r\n    }\r\n\r\nrepeat 'repeat interval'\r\n  = 'month'i { return { annual: false }}\r\n  / months: positive _ 'months'i { return { annual: false, repeat: +months }}\r\n  / 'year'i { return { annual: true }}\r\n  / years: positive _ 'years'i { return { annual: true, repeat: +years }}\r\n\r\nlimit =  _? upTo _ amount: amount _ 'per week starting'i _ start:date _? hold:hold?\r\n          { return {amount: amount, hold: hold, period: 'weekly', start: start }}\r\n        / _? upTo _ amount: amount _ 'per day'i _? hold: hold?\r\n          { return {amount: amount, hold: hold, period: 'daily', start:null }}\r\n        / _? upTo _ amount: amount _? hold: hold?\r\n          { return {amount: amount, hold: hold, period: 'monthly', start:null }}\r\n\r\npercentOf = percent:percent _ of _ 'previous'i _ { return { percent: percent, prev: true}}\r\n\t\t/ percent:percent _ of _ { return { percent: percent, prev: false}}\r\n\r\nperiodCount = 'day'i { return {period: 'day', amount: 1 }}\r\n           / n: number _ 'days'i _ { return { period: 'day', amount: +n }} \r\n           / week _ { return {period: 'week', amount: 1 }}\r\n           / n: number _ weeks { return {period: 'week', amount: +n }}\r\n           / n: number _ 'months'i _ {return {period: 'month', amount: +n }}\r\n           / 'year'i _ { return {period: 'year', amount: 1 }}\r\n           / n: number _ 'years'i _ { return { period: 'year', amount: +n }}\r\n\r\nspendFrom = _ 'spend'i _ 'from'i _ month: month { return month }\r\n\r\nweek = 'week'i\r\nweeks = 'weeks'i\r\nby = 'by'i\r\nof = 'of'i\r\nrepeatEvery = 'repeat'i _ 'every'i\r\nstarting = 'starting'i\r\nupTo = 'up'i _ 'to'i\r\nhold = 'hold'i {return true}\r\nschedule = 'schedule'i { return text() }\r\nfull = 'full'i _ {return true}\r\npriority = '-'i number: number {return number}\r\nremainder = 'remainder'i _? weight: positive? { return +weight || 1 }\r\ntemplate = '#template' priority: priority? {return {priority: +priority, directive: 'template'}}\r\ngoal = '#goal'i { return 'goal'}\r\n\r\n_ \"whitespace\" = [ \\t]* { return text() }\r\n__ \"mandatory whitespace\" = [ \\t]+ { return text() }\r\n\r\nd 'digit' = [0-9]\r\nnumber 'number' = $(d+)\r\npositive = $([1-9][0-9]*)\r\namount 'amount' = currencySymbol? _? amount: $('-'?d+ ('.' (d d?)?)?) { return +amount }\r\npercent 'percentage' = percent: $(d+ ('.' (d+)?)?) _? '%' { return percent }\r\nyear 'year' = $(d d d d)\r\nmonth 'month' = $(year '-' d d)\r\nday 'day' = $(d d)\r\ndate = $(month '-' day)\r\ncurrencySymbol 'currency symbol' = symbol: . & { return /\\p{Sc}/u.test(symbol) }\r\n\r\n// Match schedule name including spaces and brackets, but stop before percentage modifiers\r\nrawScheduleName = $(\r\n  (\r\n    !('['('increase'i/'decrease'i)) // Don't start with [increase/decrease\r\n    [^ \\t\\r\\n]                     // First character can't be whitespace\r\n    (\r\n      !(_ '['('increase'i/'decrease'i)) // Don't match if followed by [increase/decrease modifier\r\n      [^\\r\\n]                       // Any character except newlines\r\n    )*\r\n  )\r\n) { return text().trim() }\r\n\r\nname 'Name' = $([^\\r\\n\\t]+) { return text() }","import { Template } from '../../types/models/templates';\nimport * as db from '../db';\n\nimport { parse } from './goal-template.pegjs';\nimport {\n  CategoryWithTemplateNote,\n  getActiveSchedules,\n  getCategoriesWithTemplateNotes,\n  resetCategoryGoalDefsWithNoTemplates,\n} from './statements';\n\ntype Notification = {\n  type?: 'message' | 'error' | 'warning' | undefined;\n  pre?: string | undefined;\n  message: string;\n  sticky?: boolean | undefined;\n};\n\nexport const TEMPLATE_PREFIX = '#template';\nexport const GOAL_PREFIX = '#goal';\n\nexport async function storeTemplates(): Promise<void> {\n  const categoriesWithTemplates = await getCategoriesWithTemplates();\n\n  for (const { id, templates } of categoriesWithTemplates) {\n    const goalDefs = JSON.stringify(templates);\n\n    await db.update('categories', {\n      id,\n      goal_def: goalDefs,\n    });\n  }\n\n  await resetCategoryGoalDefsWithNoTemplates();\n}\n\ntype CategoryWithTemplates = {\n  id: string;\n  name: string;\n  templates: Template[];\n};\n\nexport async function checkTemplates(): Promise<Notification> {\n  const categoryWithTemplates = await getCategoriesWithTemplates();\n  const schedules = await getActiveSchedules();\n  const scheduleNames = schedules.map(({ name }) => name);\n  const errors: string[] = [];\n\n  categoryWithTemplates.forEach(({ name, templates }) => {\n    templates.forEach(template => {\n      if (template.type === 'error') {\n        // Only show detailed error for adjustment-related errors\n        if (template.error && template.error.includes('adjustment')) {\n          errors.push(`${name}: ${template.line}\\nError: ${template.error}`);\n        } else {\n          errors.push(`${name}: ${template.line}`);\n        }\n      } else if (\n        template.type === 'schedule' &&\n        !scheduleNames.includes(template.name)\n      ) {\n        errors.push(`${name}: Schedule “${template.name}” does not exist`);\n      }\n    });\n  });\n\n  if (errors.length) {\n    return {\n      sticky: true,\n      message: 'There were errors interpreting some templates:',\n      pre: errors.join('\\n\\n'),\n    };\n  }\n\n  return {\n    type: 'message',\n    message: 'All templates passed! 🎉',\n  };\n}\n\nasync function getCategoriesWithTemplates(): Promise<CategoryWithTemplates[]> {\n  const templatesForCategory: CategoryWithTemplates[] = [];\n  const templateNotes = await getCategoriesWithTemplateNotes();\n\n  templateNotes.forEach(({ id, name, note }: CategoryWithTemplateNote) => {\n    if (!note) {\n      return;\n    }\n\n    const parsedTemplates: Template[] = [];\n\n    note.split('\\n').forEach(line => {\n      const trimmedLine = line.substring(line.indexOf('#')).trim();\n\n      if (\n        !trimmedLine.startsWith(TEMPLATE_PREFIX) &&\n        !trimmedLine.startsWith(GOAL_PREFIX)\n      ) {\n        return;\n      }\n\n      try {\n        const parsedTemplate: Template = parse(trimmedLine);\n\n        // Validate schedule adjustments\n        if (\n          parsedTemplate.type === 'schedule' &&\n          parsedTemplate.adjustment !== undefined\n        ) {\n          if (\n            parsedTemplate.adjustment <= -100 ||\n            parsedTemplate.adjustment > 1000\n          ) {\n            throw new Error(\n              `Invalid adjustment percentage (${parsedTemplate.adjustment}%). Must be between -100% and 1000%`,\n            );\n          }\n        }\n\n        parsedTemplates.push(parsedTemplate);\n      } catch (e: unknown) {\n        parsedTemplates.push({\n          type: 'error',\n          directive: 'error',\n          line,\n          error: (e as Error).message,\n        });\n      }\n    });\n\n    if (!parsedTemplates.length) {\n      return;\n    }\n\n    templatesForCategory.push({\n      id,\n      name,\n      templates: parsedTemplates,\n    });\n  });\n\n  return templatesForCategory;\n}\n","import * as db from '../db';\nimport { DbSchedule } from '../db';\n\nimport { GOAL_PREFIX, TEMPLATE_PREFIX } from './template-notes';\n\n/* eslint-disable actual/typography */\nexport async function resetCategoryGoalDefsWithNoTemplates(): Promise<void> {\n  await db.run(\n    `\n      UPDATE categories\n      SET goal_def = NULL\n      WHERE id NOT IN (SELECT n.id\n                       FROM notes n\n                       WHERE lower(note) LIKE '%${TEMPLATE_PREFIX}%'\n                          OR lower(note) LIKE '%${GOAL_PREFIX}%')\n    `,\n  );\n}\n\n/* eslint-enable actual/typography */\n\nexport type CategoryWithTemplateNote = {\n  id: string;\n  name: string;\n  note: string;\n};\n\nexport async function getCategoriesWithTemplateNotes(): Promise<\n  CategoryWithTemplateNote[]\n> {\n  return await db.all<\n    Pick<db.DbCategory, 'id' | 'name'> & Pick<db.DbNote, 'note'>\n  >(\n    `\n      SELECT c.id AS id, c.name as name, n.note AS note\n      FROM notes n\n             JOIN categories c ON n.id = c.id\n      WHERE c.id = n.id\n        AND c.tombstone = 0\n        AND (lower(note) LIKE '%${TEMPLATE_PREFIX}%'\n        OR lower(note) LIKE '%${GOAL_PREFIX}%')\n    `,\n  );\n}\n\nexport async function getActiveSchedules() {\n  return await db.all<\n    Pick<\n      DbSchedule,\n      | 'id'\n      | 'rule'\n      | 'active'\n      | 'completed'\n      | 'posts_transaction'\n      | 'tombstone'\n      | 'name'\n    >\n  >(\n    'SELECT id, rule, active, completed, posts_transaction, tombstone, name from schedules WHERE name NOT NULL AND tombstone = 0',\n  );\n}\n","// @ts-strict-ignore\nimport { q } from 'loot-core/shared/query';\n\nimport * as monthUtils from '../../shared/months';\nimport { amountToInteger, integerToAmount } from '../../shared/util';\nimport { CategoryEntity } from '../../types/models';\nimport {\n  AverageTemplate,\n  ByTemplate,\n  CopyTemplate,\n  GoalTemplate,\n  PercentageTemplate,\n  RemainderTemplate,\n  SimpleTemplate,\n  SpendTemplate,\n  Template,\n  PeriodicTemplate,\n} from '../../types/models/templates';\nimport { aqlQuery } from '../aql';\nimport * as db from '../db';\n\nimport { getSheetValue, getSheetBoolean } from './actions';\nimport { runSchedule } from './schedule-template';\nimport { getActiveSchedules } from './statements';\n\nexport class CategoryTemplateContext {\n  /*----------------------------------------------------------------------------\n   * Using This Class:\n   * 1. instantiate via `await categoryTemplate.init(templates, categoryID, month)`;\n   *    templates: all templates for this category (including templates and goals)\n   *    categoryID: the ID of the category that this Class will be for\n   *    month: the month string of the month for templates being applied\n   * 2. gather needed data for external use.  ex: remainder weights, priorities, limitExcess\n   * 3. run each priority level that is needed via runTemplatesForPriority\n   * 4. run the remainder templates via runRemainder()\n   * 5. finish processing by running getValues() and saving values for batch processing.\n   * Alternate:\n   * If the situation calls for it you can run all templates in a catagory in one go using the\n   * method runAll which will run all templates and goals for reference, and can optionally be saved\n   */\n\n  //-----------------------------------------------------------------------------\n  // Class interface\n\n  // set up the class and check all templates\n  static async init(\n    templates: Template[],\n    category: CategoryEntity,\n    month: string,\n    budgeted: number,\n  ) {\n    // get all the needed setup values\n    const lastMonthSheet = monthUtils.sheetForMonth(\n      monthUtils.subMonths(month, 1),\n    );\n    const lastMonthBalance = await getSheetValue(\n      lastMonthSheet,\n      `leftover-${category.id}`,\n    );\n    const carryover = await getSheetBoolean(\n      lastMonthSheet,\n      `carryover-${category.id}`,\n    );\n    let fromLastMonth;\n    if (lastMonthBalance < 0 && !carryover) {\n      fromLastMonth = 0;\n    } else if (category.is_income) {\n      //for tracking budget\n      fromLastMonth = 0;\n    } else {\n      fromLastMonth = lastMonthBalance;\n    }\n    // run all checks\n    await CategoryTemplateContext.checkByAndScheduleAndSpend(templates, month);\n    await CategoryTemplateContext.checkPercentage(templates);\n\n    const hideDecimal = await aqlQuery(\n      q('preferences').filter({ id: 'hideFraction' }).select('*'),\n    );\n\n    // call the private constructor\n    return new CategoryTemplateContext(\n      templates,\n      category,\n      month,\n      fromLastMonth,\n      budgeted,\n      hideDecimal.data.length > 0\n        ? hideDecimal.data[0].value === 'true'\n        : false,\n    );\n  }\n\n  isGoalOnly(): boolean {\n    // if there is only a goal\n    return (\n      this.templates.length === 0 &&\n      this.remainder.length === 0 &&\n      this.goals.length > 0\n    );\n  }\n  getPriorities(): number[] {\n    return Array.from(this.priorities);\n  }\n  hasRemainder(): boolean {\n    return this.remainderWeight > 0 && !this.limitMet;\n  }\n  getRemainderWeight(): number {\n    return this.remainderWeight;\n  }\n  getLimitExcess(): number {\n    return this.limitExcess;\n  }\n\n  // what is the full requested amount this month\n  async runAll(available: number) {\n    let toBudget: number = 0;\n    const prioritiesSorted = this.getPriorities().sort();\n    for (let i = 0; i < prioritiesSorted.length; i++) {\n      const p = prioritiesSorted[i];\n      toBudget += await this.runTemplatesForPriority(p, available, available);\n    }\n    return toBudget;\n  }\n\n  // run all templates in a given priority level\n  // return: amount budgeted in this priority level\n  async runTemplatesForPriority(\n    priority: number,\n    budgetAvail: number,\n    availStart: number,\n  ): Promise<number> {\n    if (!this.priorities.has(priority)) return 0;\n    if (this.limitMet) return 0;\n\n    const t = this.templates.filter(t => t.priority === priority);\n    let available = budgetAvail || 0;\n    let toBudget = 0;\n    let byFlag = false;\n    let remainder = 0;\n    let scheduleFlag = false;\n    // switch on template type and calculate the amount for the line\n    for (const template of t) {\n      let newBudget = 0;\n      switch (template.type) {\n        case 'simple': {\n          newBudget = CategoryTemplateContext.runSimple(\n            template,\n            this.limitAmount,\n          );\n          break;\n        }\n        case 'copy': {\n          newBudget = await CategoryTemplateContext.runCopy(template, this);\n          break;\n        }\n        case 'periodic': {\n          newBudget = CategoryTemplateContext.runPeriodic(template, this);\n          break;\n        }\n        case 'spend': {\n          newBudget = await CategoryTemplateContext.runSpend(template, this);\n          break;\n        }\n        case 'percentage': {\n          newBudget = await CategoryTemplateContext.runPercentage(\n            template,\n            availStart,\n            this,\n          );\n          break;\n        }\n        case 'by': {\n          // all by's get run at once\n          if (!byFlag) {\n            newBudget = CategoryTemplateContext.runBy(this);\n          } else {\n            newBudget = 0;\n          }\n          byFlag = true;\n          break;\n        }\n        case 'schedule': {\n          if (!scheduleFlag) {\n            const budgeted = this.fromLastMonth + toBudget;\n            const ret = await runSchedule(\n              t,\n              this.month,\n              budgeted,\n              remainder,\n              this.fromLastMonth,\n              toBudget,\n              [],\n              this.category,\n            );\n            // Schedules assume that its to budget value is the whole thing so this\n            // needs to remove the previous funds so they aren't double counted\n            newBudget = ret.to_budget - toBudget;\n            remainder = ret.remainder;\n            scheduleFlag = true;\n          }\n          break;\n        }\n        case 'average': {\n          newBudget = await CategoryTemplateContext.runAverage(template, this);\n          break;\n        }\n      }\n\n      available = available - newBudget;\n      toBudget += newBudget;\n    }\n\n    //check limit\n    if (this.limitCheck) {\n      if (\n        toBudget + this.toBudgetAmount + this.fromLastMonth >=\n        this.limitAmount\n      ) {\n        const orig = toBudget;\n        toBudget = this.limitAmount - this.toBudgetAmount - this.fromLastMonth;\n        this.limitMet = true;\n        available = available + orig - toBudget;\n      }\n    }\n\n    //round all budget values if needed\n    if (this.hideDecimal) toBudget = this.removeFraction(toBudget);\n\n    // don't overbudget when using a priority unless income category\n    if (priority > 0 && available < 0 && !this.category.is_income) {\n      this.fullAmount += toBudget;\n      toBudget = Math.max(0, toBudget + available);\n      this.toBudgetAmount += toBudget;\n    } else {\n      this.fullAmount += toBudget;\n      this.toBudgetAmount += toBudget;\n    }\n    return this.category.is_income ? -toBudget : toBudget;\n  }\n\n  runRemainder(budgetAvail: number, perWeight: number) {\n    if (this.remainder.length === 0) return 0;\n    let toBudget = Math.round(this.remainderWeight * perWeight);\n\n    let smallest = 1;\n    if (this.hideDecimal) {\n      // handle hideDecimal\n      toBudget = this.removeFraction(toBudget);\n      smallest = 100;\n    }\n\n    //check possible overbudget from rounding, 1cent leftover\n    if (toBudget > budgetAvail || budgetAvail - toBudget <= smallest) {\n      toBudget = budgetAvail;\n    }\n\n    if (this.limitCheck) {\n      if (\n        toBudget + this.toBudgetAmount + this.fromLastMonth >=\n        this.limitAmount\n      ) {\n        toBudget = this.limitAmount - this.toBudgetAmount - this.fromLastMonth;\n        this.limitMet = true;\n      }\n    }\n\n    this.toBudgetAmount += toBudget;\n    return toBudget;\n  }\n\n  getValues() {\n    this.runGoal();\n    return {\n      budgeted: this.toBudgetAmount,\n      goal: this.goalAmount,\n      longGoal: this.isLongGoal,\n    };\n  }\n\n  //-----------------------------------------------------------------------------\n  // Implementation\n  readonly category: CategoryEntity; //readonly so we can double check the category this is using\n  private month: string;\n  private templates: Template[] = [];\n  private remainder: RemainderTemplate[] = [];\n  private goals: GoalTemplate[] = [];\n  private priorities: Set<number> = new Set();\n  readonly hideDecimal: boolean = false;\n  private remainderWeight: number = 0;\n  private toBudgetAmount: number = 0; // amount that will be budgeted by the templates\n  private fullAmount: number = null; // the full requested amount, start null for remainder only cats\n  private isLongGoal: boolean = null; //defaulting the goals to null so templates can be unset\n  private goalAmount: number = null;\n  private fromLastMonth = 0; // leftover from last month\n  private limitMet = false;\n  private limitExcess: number = 0;\n  private limitAmount = 0;\n  private limitCheck = false;\n  private limitHold = false;\n  readonly previouslyBudgeted: number = 0;\n\n  protected constructor(\n    templates: Template[],\n    category: CategoryEntity,\n    month: string,\n    fromLastMonth: number,\n    budgeted: number,\n    hideDecimal: boolean = false,\n  ) {\n    this.category = category;\n    this.month = month;\n    this.fromLastMonth = fromLastMonth;\n    this.previouslyBudgeted = budgeted;\n    this.hideDecimal = hideDecimal;\n    // sort the template lines into regular template, goals, and remainder templates\n    if (templates) {\n      templates.forEach(t => {\n        if (t.directive === 'template' && t.type !== 'remainder') {\n          this.templates.push(t);\n          if (t.priority !== null) this.priorities.add(t.priority);\n        } else if (t.directive === 'template' && t.type === 'remainder') {\n          this.remainder.push(t);\n          this.remainderWeight += t.weight;\n        } else if (t.directive === 'goal' && t.type === 'goal') {\n          this.goals.push(t);\n        }\n      });\n    }\n\n    this.checkLimit(templates);\n    this.checkSpend();\n    this.checkGoal();\n  }\n\n  private runGoal() {\n    if (this.goals.length > 0) {\n      if (this.isGoalOnly()) this.toBudgetAmount = this.previouslyBudgeted;\n      this.isLongGoal = true;\n      this.goalAmount = amountToInteger(this.goals[0].amount);\n      return;\n    }\n    this.goalAmount = this.fullAmount;\n  }\n\n  //-----------------------------------------------------------------------------\n  //  Template Validation\n  static async checkByAndScheduleAndSpend(\n    templates: Template[],\n    month: string,\n  ) {\n    if (\n      templates.filter(t => t.type === 'schedule' || t.type === 'by').length ===\n      0\n    ) {\n      return;\n    }\n    //check schedule names\n    const scheduleNames = (await getActiveSchedules()).map(({ name }) =>\n      name.trim(),\n    );\n    templates\n      .filter(t => t.type === 'schedule')\n      .forEach(t => {\n        if (!scheduleNames.includes(t.name.trim())) {\n          throw new Error(`Schedule ${t.name.trim()} does not exist`);\n        }\n      });\n    //find lowest priority\n    const lowestPriority = Math.min(\n      ...templates\n        .filter(t => t.type === 'schedule' || t.type === 'by')\n        .map(t => t.priority),\n    );\n    //warn if priority needs fixed\n    templates\n      .filter(t => t.type === 'schedule' || t.type === 'by')\n      .forEach(t => {\n        if (t.priority !== lowestPriority) {\n          throw new Error(\n            `Schedule and By templates must be the same priority level. Fix by setting all Schedule and By templates to priority level ${lowestPriority}`,\n          );\n          //t.priority = lowestPriority;\n        }\n      });\n    // check if the target date is past and not repeating\n    templates\n      .filter(t => t.type === 'by' || t.type === 'spend')\n      .forEach(t => {\n        const range = monthUtils.differenceInCalendarMonths(\n          `${t.month}`,\n          month,\n        );\n        if (range < 0 && !(t.repeat || t.annual)) {\n          throw new Error(\n            `Target month has passed, remove or update the target month`,\n          );\n        }\n      });\n  }\n\n  static async checkPercentage(templates: Template[]) {\n    const pt = templates.filter(t => t.type === 'percentage');\n    if (pt.length === 0) return;\n    const reqCategories = pt.map(t => t.category.toLowerCase());\n\n    const availCategories = await db.getCategories();\n    const availNames = availCategories\n      .filter(c => c.is_income)\n      .map(c => c.name.toLocaleLowerCase());\n\n    reqCategories.forEach(n => {\n      if (n === 'available funds' || n === 'all income') {\n        //skip the name check since these are special\n      } else if (!availNames.includes(n)) {\n        throw new Error(\n          `Category \\x22${n}\\x22 is not found in available income categories`,\n        );\n      }\n    });\n  }\n\n  private checkLimit(templates: Template[]) {\n    for (const template of templates\n      .filter(\n        t =>\n          t.type === 'simple' ||\n          t.type === 'periodic' ||\n          t.type === 'remainder',\n      )\n      .filter(t => t.limit)) {\n      if (this.limitCheck) {\n        throw new Error('Only one `up to` allowed per category');\n      }\n      if (template.limit.period === 'daily') {\n        const numDays = monthUtils.differenceInCalendarDays(\n          monthUtils.addMonths(this.month, 1),\n          this.month,\n        );\n        this.limitAmount += amountToInteger(template.limit.amount) * numDays;\n      } else if (template.limit.period === 'weekly') {\n        const nextMonth = monthUtils.nextMonth(this.month);\n        let week = template.limit.start;\n        const baseLimit = amountToInteger(template.limit.amount);\n        while (week < nextMonth) {\n          if (week >= this.month) {\n            this.limitAmount += baseLimit;\n          }\n          week = monthUtils.addWeeks(week, 1);\n        }\n      } else if (template.limit.period === 'monthly') {\n        this.limitAmount = amountToInteger(template.limit.amount);\n      } else {\n        throw new Error('Invalid limit period. Check template syntax');\n      }\n      //amount is good save the rest\n      this.limitCheck = true;\n      this.limitHold = template.limit.hold ? true : false;\n      // check if the limit is already met and save the excess\n      if (this.fromLastMonth >= this.limitAmount) {\n        this.limitMet = true;\n        if (this.limitHold) {\n          this.limitExcess = 0;\n          this.toBudgetAmount = 0;\n          this.fullAmount = 0;\n        } else {\n          this.limitExcess = this.fromLastMonth - this.limitAmount;\n          this.toBudgetAmount = -this.limitExcess;\n          this.fullAmount = -this.limitExcess;\n        }\n      }\n    }\n  }\n\n  private checkSpend() {\n    const st = this.templates.filter(t => t.type === 'spend');\n    if (st.length > 1) {\n      throw new Error('Only one spend template is allowed per category');\n    }\n  }\n\n  private checkGoal() {\n    if (this.goals.length > 1) {\n      throw new Error(`Only one #goal is allowed per category`);\n    }\n  }\n\n  private removeFraction(amount: number): number {\n    return amountToInteger(Math.round(integerToAmount(amount)));\n  }\n\n  //-----------------------------------------------------------------------------\n  //  Processor Functions\n\n  static runSimple(template: SimpleTemplate, limit: number): number {\n    if (template.monthly != null) {\n      return amountToInteger(template.monthly);\n    } else {\n      return limit;\n    }\n  }\n\n  static async runCopy(\n    template: CopyTemplate,\n    templateContext: CategoryTemplateContext,\n  ): Promise<number> {\n    const sheetName = monthUtils.sheetForMonth(\n      monthUtils.subMonths(templateContext.month, template.lookBack),\n    );\n    return await getSheetValue(\n      sheetName,\n      `budget-${templateContext.category.id}`,\n    );\n  }\n\n  static runPeriodic(\n    template: PeriodicTemplate,\n    templateContext: CategoryTemplateContext,\n  ): number {\n    let toBudget = 0;\n    const amount = amountToInteger(template.amount);\n    const period = template.period.period;\n    const numPeriods = template.period.amount;\n    let date = template.starting;\n\n    let dateShiftFunction;\n    switch (period) {\n      case 'day':\n        dateShiftFunction = monthUtils.addDays;\n        break;\n      case 'week':\n        dateShiftFunction = monthUtils.addWeeks;\n        break;\n      case 'month':\n        dateShiftFunction = monthUtils.addMonths;\n        break;\n      case 'year':\n        // the addYears function doesn't return the month number, so use addMonths\n        dateShiftFunction = (date, numPeriods) =>\n          monthUtils.addMonths(date, numPeriods * 12);\n        break;\n    }\n\n    //shift the starting date until its in our month or in the future\n    while (templateContext.month > date) {\n      date = dateShiftFunction(date, numPeriods);\n    }\n\n    if (\n      monthUtils.differenceInCalendarMonths(templateContext.month, date) < 0\n    ) {\n      return 0;\n    } // nothing needed this month\n\n    const nextMonth = monthUtils.addMonths(templateContext.month, 1);\n    while (date < nextMonth) {\n      toBudget += amount;\n      date = dateShiftFunction(date, numPeriods);\n    }\n\n    return toBudget;\n  }\n\n  static async runSpend(\n    template: SpendTemplate,\n    templateContext: CategoryTemplateContext,\n  ): Promise<number> {\n    let fromMonth = `${template.from}`;\n    let toMonth = `${template.month}`;\n    let alreadyBudgeted = templateContext.fromLastMonth;\n    let firstMonth = true;\n\n    //update months if needed\n    const repeat = template.annual\n      ? (template.repeat || 1) * 12\n      : template.repeat;\n    let m = monthUtils.differenceInCalendarMonths(\n      toMonth,\n      templateContext.month,\n    );\n    if (repeat && m < 0) {\n      while (m < 0) {\n        toMonth = monthUtils.addMonths(toMonth, repeat);\n        fromMonth = monthUtils.addMonths(fromMonth, repeat);\n        m = monthUtils.differenceInCalendarMonths(\n          toMonth,\n          templateContext.month,\n        );\n      }\n    }\n\n    for (\n      let m = fromMonth;\n      monthUtils.differenceInCalendarMonths(templateContext.month, m) > 0;\n      m = monthUtils.addMonths(m, 1)\n    ) {\n      const sheetName = monthUtils.sheetForMonth(m);\n      if (firstMonth) {\n        //TODO figure out if I already  found these values and can pass them in\n        const spent = await getSheetValue(\n          sheetName,\n          `sum-amount-${templateContext.category.id}`,\n        );\n        const balance = await getSheetValue(\n          sheetName,\n          `leftover-${templateContext.category.id}`,\n        );\n        alreadyBudgeted = balance - spent;\n        firstMonth = false;\n      } else {\n        alreadyBudgeted += await getSheetValue(\n          sheetName,\n          `budget-${templateContext.category.id}`,\n        );\n      }\n    }\n\n    const numMonths = monthUtils.differenceInCalendarMonths(\n      toMonth,\n      templateContext.month,\n    );\n    const target = amountToInteger(template.amount);\n    if (numMonths < 0) {\n      return 0;\n    } else {\n      return Math.round((target - alreadyBudgeted) / (numMonths + 1));\n    }\n  }\n\n  static async runPercentage(\n    template: PercentageTemplate,\n    availableFunds: number,\n    templateContext: CategoryTemplateContext,\n  ): Promise<number> {\n    const percent = template.percent;\n    const cat = template.category.toLowerCase();\n    const prev = template.previous;\n    let sheetName;\n    let monthlyIncome = 1;\n\n    //choose the sheet to find income for\n    if (prev) {\n      sheetName = monthUtils.sheetForMonth(\n        monthUtils.subMonths(templateContext.month, 1),\n      );\n    } else {\n      sheetName = monthUtils.sheetForMonth(templateContext.month);\n    }\n    if (cat === 'all income') {\n      monthlyIncome = await getSheetValue(sheetName, `total-income`);\n    } else if (cat === 'available funds') {\n      monthlyIncome = availableFunds;\n    } else {\n      const incomeCat = (await db.getCategories()).find(\n        c => c.is_income && c.name.toLowerCase() === cat,\n      );\n      monthlyIncome = await getSheetValue(\n        sheetName,\n        `sum-amount-${incomeCat.id}`,\n      );\n    }\n\n    return Math.max(0, Math.round(monthlyIncome * (percent / 100)));\n  }\n\n  static async runAverage(\n    template: AverageTemplate,\n    templateContext: CategoryTemplateContext,\n  ): Promise<number> {\n    let sum = 0;\n    for (let i = 1; i <= template.numMonths; i++) {\n      const sheetName = monthUtils.sheetForMonth(\n        monthUtils.subMonths(templateContext.month, i),\n      );\n      sum += await getSheetValue(\n        sheetName,\n        `sum-amount-${templateContext.category.id}`,\n      );\n    }\n    return -Math.round(sum / template.numMonths);\n  }\n\n  static runBy(templateContext: CategoryTemplateContext): number {\n    const byTemplates: ByTemplate[] = templateContext.templates.filter(\n      t => t.type === 'by',\n    );\n    const savedInfo = [];\n    let totalNeeded = 0;\n    let shortNumMonths;\n    //find shortest time period\n    for (let i = 0; i < byTemplates.length; i++) {\n      const template = byTemplates[i];\n      let targetMonth = `${template.month}`;\n      const period = template.annual\n        ? (template.repeat || 1) * 12\n        : template.repeat != null\n          ? template.repeat\n          : null;\n      let numMonths = monthUtils.differenceInCalendarMonths(\n        targetMonth,\n        templateContext.month,\n      );\n      while (numMonths < 0 && period) {\n        targetMonth = monthUtils.addMonths(targetMonth, period);\n        numMonths = monthUtils.differenceInCalendarMonths(\n          targetMonth,\n          templateContext.month,\n        );\n      }\n      savedInfo.push({ numMonths, period });\n      if (numMonths < shortNumMonths || !shortNumMonths) {\n        shortNumMonths = numMonths;\n      }\n    }\n\n    // calculate needed funds per template\n    for (let i = 0; i < byTemplates.length; i++) {\n      const template = byTemplates[i];\n      const numMonths = savedInfo[i].numMonths;\n      const period = savedInfo[i].period;\n      let amount;\n      // back interpolate what is needed in the short window\n      if (numMonths > shortNumMonths && period) {\n        amount = Math.round(\n          (amountToInteger(template.amount) / period) *\n            (period - numMonths + shortNumMonths),\n        );\n        // fallback to this.  This matches what the prior math accomplished, just more round about\n      } else if (numMonths > shortNumMonths) {\n        amount = Math.round(\n          (amountToInteger(template.amount) / (numMonths + 1)) *\n            (shortNumMonths + 1),\n        );\n      } else {\n        amount = amountToInteger(template.amount);\n      }\n      totalNeeded += amount;\n    }\n    return Math.round(\n      (totalNeeded - templateContext.fromLastMonth) / (shortNumMonths + 1),\n    );\n  }\n}\n","// @ts-strict-ignore\nimport * as monthUtils from '../../shared/months';\nimport { q } from '../../shared/query';\nimport { CategoryEntity, CategoryGroupEntity } from '../../types/models';\nimport { Template } from '../../types/models/templates';\nimport { aqlQuery } from '../aql';\nimport { batchMessages } from '../sync';\n\nimport { isReflectBudget, getSheetValue, setGoal, setBudget } from './actions';\nimport { CategoryTemplateContext } from './category-template-context';\nimport { checkTemplates, storeTemplates } from './template-notes';\n\ntype Notification = {\n  type?: 'message' | 'error' | 'warning' | undefined;\n  pre?: string | undefined;\n  title?: string | undefined;\n  message: string;\n  sticky?: boolean | undefined;\n};\n\nexport async function applyTemplate({\n  month,\n}: {\n  month: string;\n}): Promise<Notification> {\n  await storeTemplates();\n  const categoryTemplates = await getTemplates();\n  const ret = await processTemplate(month, false, categoryTemplates);\n  return ret;\n}\n\nexport async function overwriteTemplate({\n  month,\n}: {\n  month: string;\n}): Promise<Notification> {\n  await storeTemplates();\n  const categoryTemplates = await getTemplates();\n  const ret = await processTemplate(month, true, categoryTemplates);\n  return ret;\n}\n\nexport async function applyMultipleCategoryTemplates({\n  month,\n  categoryIds,\n}: {\n  month: string;\n  categoryIds: Array<CategoryEntity['id']>;\n}) {\n  const { data: categoryData }: { data: CategoryEntity[] } = await aqlQuery(\n    q('categories')\n      .filter({ id: { $oneof: categoryIds } })\n      .select('*'),\n  );\n  await storeTemplates();\n  const categoryTemplates = await getTemplates(c => categoryIds.includes(c.id));\n  const ret = await processTemplate(\n    month,\n    true,\n    categoryTemplates,\n    categoryData,\n  );\n  return ret;\n}\n\nexport async function applySingleCategoryTemplate({\n  month,\n  category,\n}: {\n  month: string;\n  category: CategoryEntity['id'];\n}) {\n  const { data: categoryData }: { data: CategoryEntity[] } = await aqlQuery(\n    q('categories').filter({ id: category }).select('*'),\n  );\n  await storeTemplates();\n  const categoryTemplates = await getTemplates(c => c.id === category);\n  const ret = await processTemplate(\n    month,\n    true,\n    categoryTemplates,\n    categoryData,\n  );\n  return ret;\n}\n\nexport function runCheckTemplates() {\n  return checkTemplates();\n}\n\nasync function getCategories(): Promise<CategoryEntity[]> {\n  const { data: categoryGroups }: { data: CategoryGroupEntity[] } =\n    await aqlQuery(q('category_groups').filter({ hidden: false }).select('*'));\n\n  return categoryGroups.flatMap(g => g.categories || []).filter(c => !c.hidden);\n}\n\nasync function getTemplates(\n  filter: (category: CategoryEntity) => boolean = () => true,\n): Promise<Record<CategoryEntity['id'], Template[]>> {\n  //retrieves template definitions from the database\n  const { data: categoriesWithGoalDef }: { data: CategoryEntity[] } =\n    await aqlQuery(\n      q('categories')\n        .filter({ goal_def: { $ne: null } })\n        .select('*'),\n    );\n\n  const categoryTemplates: Record<CategoryEntity['id'], Template[]> = {};\n  for (const categoryWithGoalDef of categoriesWithGoalDef.filter(filter)) {\n    categoryTemplates[categoryWithGoalDef.id] = JSON.parse(\n      categoryWithGoalDef.goal_def,\n    );\n  }\n  return categoryTemplates;\n}\n\ntype TemplateBudget = {\n  category: CategoryEntity['id'];\n  budgeted: number;\n};\n\nasync function setBudgets(month: string, templateBudget: TemplateBudget[]) {\n  await batchMessages(async () => {\n    templateBudget.forEach(element => {\n      setBudget({\n        category: element.category,\n        month,\n        amount: element.budgeted,\n      });\n    });\n  });\n}\n\ntype TemplateGoal = {\n  category: CategoryEntity['id'];\n  goal: number | null;\n  longGoal: number | null;\n};\n\nasync function setGoals(month: string, templateGoal: TemplateGoal[]) {\n  await batchMessages(async () => {\n    templateGoal.forEach(element => {\n      setGoal({\n        month,\n        category: element.category,\n        goal: element.goal,\n        long_goal: element.longGoal,\n      });\n    });\n  });\n}\n\nasync function processTemplate(\n  month: string,\n  force: boolean,\n  categoryTemplates: Record<CategoryEntity['id'], Template[]>,\n  categories: CategoryEntity[] = [],\n): Promise<Notification> {\n  // setup categories\n  const isReflect = isReflectBudget();\n  if (!categories.length) {\n    categories = (await getCategories()).filter(c => isReflect || !c.is_income);\n  }\n\n  // setup categories to process\n  const templateContexts: CategoryTemplateContext[] = [];\n  let availBudget = await getSheetValue(\n    monthUtils.sheetForMonth(month),\n    `to-budget`,\n  );\n  const prioritiesSet = new Set<number>();\n  const errors: string[] = [];\n  const budgetList: TemplateBudget[] = [];\n  const goalList: TemplateGoal[] = [];\n  for (const category of categories) {\n    const { id } = category;\n    const sheetName = monthUtils.sheetForMonth(month);\n    const templates = categoryTemplates[id];\n    const budgeted = await getSheetValue(sheetName, `budget-${id}`);\n    const existingGoal = await getSheetValue(sheetName, `goal-${id}`);\n\n    // only run categories that are unbudgeted or if we are forcing it\n    if ((budgeted === 0 || force) && templates) {\n      try {\n        const templateContext = await CategoryTemplateContext.init(\n          templates,\n          category,\n          month,\n          budgeted,\n        );\n        // don't use the funds that are not from templates\n        if (!templateContext.isGoalOnly()) {\n          availBudget += budgeted;\n        }\n        availBudget += templateContext.getLimitExcess();\n        templateContext.getPriorities().forEach(p => prioritiesSet.add(p));\n        templateContexts.push(templateContext);\n      } catch (e) {\n        errors.push(`${category.name}: ${e.message}`);\n      }\n\n      // do a reset of the goals that are orphaned\n    } else if (existingGoal !== null && !templates) {\n      goalList.push({\n        category: id,\n        goal: null,\n        longGoal: null,\n      });\n    }\n  }\n\n  //break early if nothing to do, or there are errors\n  if (templateContexts.length === 0 && errors.length === 0) {\n    if (goalList.length > 0) {\n      setGoals(month, goalList);\n    }\n    return {\n      type: 'message',\n      message: 'Everything is up to date',\n    };\n  }\n  if (errors.length > 0) {\n    return {\n      sticky: true,\n      message: 'There were errors interpreting some templates:',\n      pre: errors.join(`\\n\\n`),\n    };\n  }\n\n  const priorities = [...prioritiesSet].sort();\n  // run each priority level\n  for (const priority of priorities) {\n    const availStart = availBudget;\n    for (const templateContext of templateContexts) {\n      const budget = await templateContext.runTemplatesForPriority(\n        priority,\n        availBudget,\n        availStart,\n      );\n      availBudget -= budget;\n    }\n  }\n\n  // run remainder\n  let remainderContexts = templateContexts.filter(c => c.hasRemainder());\n  while (availBudget > 0 && remainderContexts.length > 0) {\n    let remainderWeight = 0;\n    remainderContexts.forEach(\n      context => (remainderWeight += context.getRemainderWeight()),\n    );\n    const perWeight = availBudget / remainderWeight;\n    remainderContexts.forEach(context => {\n      availBudget -= context.runRemainder(availBudget, perWeight);\n    });\n    remainderContexts = templateContexts.filter(c => c.hasRemainder());\n  }\n\n  // finish\n  templateContexts.forEach(context => {\n    const values = context.getValues();\n    budgetList.push({\n      category: context.category.id,\n      budgeted: values.budgeted,\n    });\n    goalList.push({\n      category: context.category.id,\n      goal: values.goal,\n      longGoal: values.longGoal ? 1 : null,\n    });\n  });\n  await setBudgets(month, budgetList);\n  await setGoals(month, goalList);\n\n  return {\n    type: 'message',\n    message: `Successfully applied templates to ${templateContexts.length} categories`,\n  };\n}\n","import * as monthUtils from '../../shared/months';\nimport { q } from '../../shared/query';\nimport { CategoryEntity, CategoryGroupEntity } from '../../types/models';\nimport { createApp } from '../app';\nimport { aqlQuery } from '../aql';\nimport * as db from '../db';\nimport { APIError } from '../errors';\nimport { categoryGroupModel, categoryModel } from '../models';\nimport { mutator } from '../mutators';\nimport * as sheet from '../sheet';\nimport { resolveName } from '../spreadsheet/util';\nimport { batchMessages } from '../sync';\nimport { undoable } from '../undo';\n\nimport * as actions from './actions';\nimport * as budget from './base';\nimport * as cleanupActions from './cleanup-template';\nimport * as goalActions from './goal-template';\n\nexport interface BudgetHandlers {\n  'budget/budget-amount': typeof actions.setBudget;\n  'budget/copy-previous-month': typeof actions.copyPreviousMonth;\n  'budget/copy-single-month': typeof actions.copySinglePreviousMonth;\n  'budget/set-zero': typeof actions.setZero;\n  'budget/set-3month-avg': typeof actions.set3MonthAvg;\n  'budget/set-6month-avg': typeof actions.set6MonthAvg;\n  'budget/set-12month-avg': typeof actions.set12MonthAvg;\n  'budget/set-n-month-avg': typeof actions.setNMonthAvg;\n  'budget/check-templates': typeof goalActions.runCheckTemplates;\n  'budget/apply-goal-template': typeof goalActions.applyTemplate;\n  'budget/apply-multiple-templates': typeof goalActions.applyMultipleCategoryTemplates;\n  'budget/overwrite-goal-template': typeof goalActions.overwriteTemplate;\n  'budget/apply-single-template': typeof goalActions.applySingleCategoryTemplate;\n  'budget/cleanup-goal-template': typeof cleanupActions.cleanupTemplate;\n  'budget/hold-for-next-month': typeof actions.holdForNextMonth;\n  'budget/reset-hold': typeof actions.resetHold;\n  'budget/cover-overspending': typeof actions.coverOverspending;\n  'budget/transfer-available': typeof actions.transferAvailable;\n  'budget/cover-overbudgeted': typeof actions.coverOverbudgeted;\n  'budget/transfer-category': typeof actions.transferCategory;\n  'budget/set-carryover': typeof actions.setCategoryCarryover;\n  'budget/reset-income-carryover': typeof actions.resetIncomeCarryover;\n  'get-categories': typeof getCategories;\n  'get-budget-bounds': typeof getBudgetBounds;\n  'envelope-budget-month': typeof envelopeBudgetMonth;\n  'tracking-budget-month': typeof trackingBudgetMonth;\n  'category-create': typeof createCategory;\n  'category-update': typeof updateCategory;\n  'category-move': typeof moveCategory;\n  'category-delete': typeof deleteCategory;\n  'get-category-groups': typeof getCategoryGroups;\n  'category-group-create': typeof createCategoryGroup;\n  'category-group-update': typeof updateCategoryGroup;\n  'category-group-move': typeof moveCategoryGroup;\n  'category-group-delete': typeof deleteCategoryGroup;\n  'must-category-transfer': typeof isCategoryTransferRequired;\n}\n\nexport const app = createApp<BudgetHandlers>();\n\napp.method('budget/budget-amount', mutator(undoable(actions.setBudget)));\napp.method(\n  'budget/copy-previous-month',\n  mutator(undoable(actions.copyPreviousMonth)),\n);\napp.method(\n  'budget/copy-single-month',\n  mutator(undoable(actions.copySinglePreviousMonth)),\n);\napp.method('budget/set-zero', mutator(undoable(actions.setZero)));\napp.method('budget/set-3month-avg', mutator(undoable(actions.set3MonthAvg)));\napp.method('budget/set-6month-avg', mutator(undoable(actions.set6MonthAvg)));\napp.method('budget/set-12month-avg', mutator(undoable(actions.set12MonthAvg)));\napp.method('budget/set-n-month-avg', mutator(undoable(actions.setNMonthAvg)));\napp.method(\n  'budget/check-templates',\n  mutator(undoable(goalActions.runCheckTemplates)),\n);\napp.method(\n  'budget/apply-goal-template',\n  mutator(undoable(goalActions.applyTemplate)),\n);\napp.method(\n  'budget/apply-multiple-templates',\n  mutator(undoable(goalActions.applyMultipleCategoryTemplates)),\n);\napp.method(\n  'budget/overwrite-goal-template',\n  mutator(undoable(goalActions.overwriteTemplate)),\n);\napp.method(\n  'budget/apply-single-template',\n  mutator(undoable(goalActions.applySingleCategoryTemplate)),\n);\napp.method(\n  'budget/cleanup-goal-template',\n  mutator(undoable(cleanupActions.cleanupTemplate)),\n);\napp.method(\n  'budget/hold-for-next-month',\n  mutator(undoable(actions.holdForNextMonth)),\n);\napp.method('budget/reset-hold', mutator(undoable(actions.resetHold)));\napp.method(\n  'budget/cover-overspending',\n  mutator(undoable(actions.coverOverspending)),\n);\napp.method(\n  'budget/transfer-available',\n  mutator(undoable(actions.transferAvailable)),\n);\napp.method(\n  'budget/cover-overbudgeted',\n  mutator(undoable(actions.coverOverbudgeted)),\n);\napp.method(\n  'budget/transfer-category',\n  mutator(undoable(actions.transferCategory)),\n);\napp.method(\n  'budget/set-carryover',\n  mutator(undoable(actions.setCategoryCarryover)),\n);\napp.method(\n  'budget/reset-income-carryover',\n  mutator(undoable(actions.resetIncomeCarryover)),\n);\napp.method('get-categories', getCategories);\napp.method('get-budget-bounds', getBudgetBounds);\napp.method('envelope-budget-month', envelopeBudgetMonth);\napp.method('tracking-budget-month', trackingBudgetMonth);\napp.method('category-create', mutator(undoable(createCategory)));\napp.method('category-update', mutator(undoable(updateCategory)));\napp.method('category-move', mutator(undoable(moveCategory)));\napp.method('category-delete', mutator(undoable(deleteCategory)));\napp.method('get-category-groups', getCategoryGroups);\napp.method('category-group-create', mutator(undoable(createCategoryGroup)));\napp.method('category-group-update', mutator(undoable(updateCategoryGroup)));\napp.method('category-group-move', mutator(undoable(moveCategoryGroup)));\napp.method('category-group-delete', mutator(undoable(deleteCategoryGroup)));\napp.method('must-category-transfer', isCategoryTransferRequired);\n\n// Server must return AQL entities not the raw DB data\nasync function getCategories() {\n  const categoryGroups = await getCategoryGroups();\n  return {\n    grouped: categoryGroups,\n    list: categoryGroups.flatMap(g => g.categories ?? []),\n  };\n}\n\nasync function getBudgetBounds() {\n  return await budget.createAllBudgets();\n}\n\nasync function envelopeBudgetMonth({ month }: { month: string }) {\n  const groups = await db.getCategoriesGrouped();\n  const sheetName = monthUtils.sheetForMonth(month);\n\n  function value(name: string) {\n    const v = sheet.getCellValue(sheetName, name);\n    return { value: v === '' ? 0 : v, name: resolveName(sheetName, name) };\n  }\n\n  let values = [\n    value('available-funds'),\n    value('last-month-overspent'),\n    value('buffered'),\n    value('total-budgeted'),\n    value('to-budget'),\n\n    value('from-last-month'),\n    value('total-income'),\n    value('total-spent'),\n    value('total-leftover'),\n  ];\n\n  for (const group of groups) {\n    const categories = group.categories ?? [];\n\n    if (group.is_income) {\n      values.push(value('total-income'));\n\n      for (const cat of categories) {\n        values.push(value(`sum-amount-${cat.id}`));\n      }\n    } else {\n      values = values.concat([\n        value(`group-budget-${group.id}`),\n        value(`group-sum-amount-${group.id}`),\n        value(`group-leftover-${group.id}`),\n      ]);\n\n      for (const cat of categories) {\n        values = values.concat([\n          value(`budget-${cat.id}`),\n          value(`sum-amount-${cat.id}`),\n          value(`leftover-${cat.id}`),\n          value(`carryover-${cat.id}`),\n          value(`goal-${cat.id}`),\n          value(`long-goal-${cat.id}`),\n        ]);\n      }\n    }\n  }\n\n  return values;\n}\n\nasync function trackingBudgetMonth({ month }: { month: string }) {\n  const groups = await db.getCategoriesGrouped();\n  const sheetName = monthUtils.sheetForMonth(month);\n\n  function value(name: string) {\n    const v = sheet.getCellValue(sheetName, name);\n    return { value: v === '' ? 0 : v, name: resolveName(sheetName, name) };\n  }\n\n  let values = [\n    value('total-budgeted'),\n    value('total-budget-income'),\n    value('total-saved'),\n    value('total-income'),\n    value('total-spent'),\n    value('real-saved'),\n    value('total-leftover'),\n  ];\n\n  for (const group of groups) {\n    values = values.concat([\n      value(`group-budget-${group.id}`),\n      value(`group-sum-amount-${group.id}`),\n      value(`group-leftover-${group.id}`),\n    ]);\n\n    const categories = group.categories ?? [];\n\n    for (const cat of categories) {\n      values = values.concat([\n        value(`budget-${cat.id}`),\n        value(`sum-amount-${cat.id}`),\n        value(`leftover-${cat.id}`),\n        value(`goal-${cat.id}`),\n        value(`long-goal-${cat.id}`),\n      ]);\n\n      if (!group.is_income) {\n        values.push(value(`carryover-${cat.id}`));\n      }\n    }\n  }\n\n  return values;\n}\n\nasync function createCategory({\n  name,\n  groupId,\n  isIncome,\n  hidden,\n}: {\n  name: string;\n  groupId: CategoryGroupEntity['id'];\n  isIncome?: boolean;\n  hidden?: boolean;\n}): Promise<CategoryEntity['id']> {\n  if (!groupId) {\n    throw APIError('Creating a category: groupId is required');\n  }\n\n  return await db.insertCategory({\n    name: name.trim(),\n    cat_group: groupId,\n    is_income: isIncome ? 1 : 0,\n    hidden: hidden ? 1 : 0,\n  });\n}\n\nasync function updateCategory(\n  category: CategoryEntity,\n): Promise<{ error?: { type: 'category-exists' } }> {\n  try {\n    await db.updateCategory(\n      categoryModel.toDb({\n        ...category,\n        name: category.name.trim(),\n      }),\n    );\n  } catch (e) {\n    if (\n      e instanceof Error &&\n      e.message.toLowerCase().includes('unique constraint')\n    ) {\n      return { error: { type: 'category-exists' } };\n    }\n    throw e;\n  }\n  return {};\n}\n\nasync function moveCategory({\n  id,\n  groupId,\n  targetId,\n}: {\n  id: CategoryEntity['id'];\n  groupId: CategoryGroupEntity['id'];\n  targetId: CategoryEntity['id'];\n}): Promise<void> {\n  await batchMessages(async () => {\n    await db.moveCategory(id, groupId, targetId);\n  });\n}\n\nasync function deleteCategory({\n  id,\n  transferId,\n}: {\n  id: CategoryEntity['id'];\n  transferId?: CategoryEntity['id'];\n}): Promise<{ error?: 'no-categories' | 'category-type' }> {\n  let result = {};\n  await batchMessages(async () => {\n    const row = await db.first<Pick<db.DbCategory, 'is_income'>>(\n      'SELECT is_income FROM categories WHERE id = ?',\n      [id],\n    );\n    if (!row) {\n      result = { error: 'no-categories' };\n      return;\n    }\n\n    const transfer =\n      transferId &&\n      (await db.first<Pick<db.DbCategory, 'is_income'>>(\n        'SELECT is_income FROM categories WHERE id = ?',\n        [transferId],\n      ));\n\n    if (!row || (transferId && !transfer)) {\n      result = { error: 'no-categories' };\n      return;\n    } else if (\n      transferId &&\n      row &&\n      transfer &&\n      row.is_income !== transfer.is_income\n    ) {\n      result = { error: 'category-type' };\n      return;\n    }\n\n    // Update spreadsheet values if it's an expense category\n    // TODO: We should do this for income too if it's a reflect budget\n    if (row.is_income === 0) {\n      if (transferId) {\n        await budget.doTransfer([id], transferId);\n      }\n    }\n\n    await db.deleteCategory({ id }, transferId);\n  });\n\n  return result;\n}\n\n// Server must return AQL entities not the raw DB data\nasync function getCategoryGroups() {\n  const { data: categoryGroups }: { data: CategoryGroupEntity[] } =\n    await aqlQuery(q('category_groups').select('*'));\n  return categoryGroups;\n}\n\nasync function createCategoryGroup({\n  name,\n  isIncome,\n  hidden,\n}: {\n  name: CategoryGroupEntity['name'];\n  isIncome?: CategoryGroupEntity['is_income'];\n  hidden?: CategoryGroupEntity['hidden'];\n}): Promise<CategoryGroupEntity['id']> {\n  return await db.insertCategoryGroup({\n    name,\n    is_income: isIncome ? 1 : 0,\n    hidden: hidden ? 1 : 0,\n  });\n}\n\nasync function updateCategoryGroup(group: CategoryGroupEntity) {\n  await db.updateCategoryGroup(categoryGroupModel.toDb(group));\n}\n\nasync function moveCategoryGroup({\n  id,\n  targetId,\n}: {\n  id: CategoryGroupEntity['id'];\n  targetId: CategoryGroupEntity['id'];\n}): Promise<void> {\n  await batchMessages(async () => {\n    await db.moveCategoryGroup(id, targetId);\n  });\n}\n\nasync function deleteCategoryGroup({\n  id,\n  transferId,\n}: {\n  id: CategoryGroupEntity['id'];\n  transferId: CategoryGroupEntity['id'];\n}): Promise<void> {\n  const groupCategories = await db.all<Pick<CategoryEntity, 'id'>>(\n    'SELECT id FROM categories WHERE cat_group = ? AND tombstone = 0',\n    [id],\n  );\n\n  await batchMessages(async () => {\n    if (transferId) {\n      await budget.doTransfer(\n        groupCategories.map(c => c.id),\n        transferId,\n      );\n    }\n    await db.deleteCategoryGroup({ id }, transferId);\n  });\n}\n\nasync function isCategoryTransferRequired({\n  id,\n}: {\n  id: CategoryEntity['id'];\n}) {\n  const res = await db.runQuery<{ count: number }>(\n    `SELECT count(t.id) as count FROM transactions t\n       LEFT JOIN category_mapping cm ON cm.id = t.category\n       WHERE cm.transferId = ? AND t.tombstone = 0`,\n    [id],\n    true,\n  );\n\n  // If there are transactions with this category, return early since\n  // we already know it needs to be tranferred\n  if (res[0].count !== 0) {\n    return true;\n  }\n\n  // If there are any non-zero budget values, also force the user to\n  // transfer the category.\n  return [...(sheet.get().meta().createdMonths as Set<string>)].some(month => {\n    const sheetName = monthUtils.sheetForMonth(month);\n    const value = sheet.get().getCellValue(sheetName, 'budget-' + id);\n\n    return value != null && value !== 0;\n  });\n}\n","import * as Platform from '../shared/platform';\n\n// Fake \"random\" function used to have stable data structures for\n// e2e and visual regression tests\nlet pseudoRandomIterator = 0;\nfunction pseudoRandom(): number {\n  pseudoRandomIterator += 0.45;\n\n  if (pseudoRandomIterator > 1) {\n    pseudoRandomIterator = 0;\n  }\n\n  return pseudoRandomIterator;\n}\n\nexport const random = Platform.isPlaywright ? pseudoRandom : Math.random;\n","// @ts-strict-ignore\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { addTransactions } from '../server/accounts/sync';\nimport { aqlQuery } from '../server/aql';\nimport * as budgetActions from '../server/budget/actions';\nimport * as budget from '../server/budget/base';\nimport * as db from '../server/db';\nimport { runHandler, runMutator } from '../server/mutators';\nimport * as sheet from '../server/sheet';\nimport { batchMessages, setSyncingMode } from '../server/sync';\nimport * as monthUtils from '../shared/months';\nimport { q } from '../shared/query';\nimport type { Handlers } from '../types/handlers';\nimport type {\n  CategoryGroupEntity,\n  PayeeEntity,\n  TransactionEntity,\n} from '../types/models';\n\nimport { random } from './random';\n\nimport { CategoryGroupDefinition } from '.';\n\ntype MockPayeeEntity = Partial<PayeeEntity> & { bill?: boolean };\n\nfunction pickRandom<T>(list: T[]): T {\n  return list[Math.floor(random() * list.length) % list.length];\n}\n\nfunction number(start: number, end: number) {\n  return start + (end - start) * random();\n}\n\nfunction integer(start: number, end: number) {\n  return Math.round(number(start, end));\n}\n\nfunction findMin<T, K extends keyof T>(items: T[], field: K) {\n  let item = items[0];\n  for (let i = 0; i < items.length; i++) {\n    if (items[i][field] < item[field]) {\n      item = items[i];\n    }\n  }\n  return item;\n}\n\nfunction getStartingBalanceCat(categories: CategoryGroupEntity[]) {\n  return categories.find(c => c.name === 'Starting Balances').id;\n}\n\nfunction extractCommonThings(\n  payees: MockPayeeEntity[],\n  groups: CategoryGroupEntity[],\n) {\n  const incomePayee = payees.find(p => p.name === 'Deposit');\n  const expensePayees = payees.filter(\n    p => p.name !== 'Deposit' && p.name !== 'Starting Balance',\n  );\n  const expenseGroup = groups.find(g => !g.is_income);\n  const incomeGroup = groups.find(g => g.is_income);\n  const categories = expenseGroup.categories.filter(\n    c =>\n      [\n        'Food',\n        'Restaurants',\n        'Entertainment',\n        'Clothing',\n        'General',\n        'Gift',\n        'Medical',\n      ].indexOf(c.name) !== -1,\n  );\n\n  return {\n    incomePayee,\n    expensePayees: expensePayees.filter(p => !p.bill),\n    incomeGroup,\n    expenseCategories: categories,\n    billCategories: groups.find(g => g.name === 'Bills').categories,\n    billPayees: expensePayees.filter(p => p.bill),\n  };\n}\n\nasync function fillPrimaryChecking(\n  handlers,\n  account,\n  payees: MockPayeeEntity[],\n  groups: CategoryGroupEntity[],\n) {\n  const {\n    incomePayee,\n    expensePayees,\n    incomeGroup,\n    expenseCategories,\n    billCategories,\n    billPayees,\n  } = extractCommonThings(payees, groups);\n  const numTransactions = integer(100, 200);\n\n  const transactions = [];\n  for (let i = 0; i < numTransactions; i++) {\n    let payee;\n    if (random() < 0.09) {\n      payee = incomePayee;\n    } else {\n      payee = pickRandom(expensePayees);\n    }\n\n    let category;\n    if (payee.name === 'Deposit') {\n      category = incomeGroup.categories.find(c => c.name === 'Income');\n    } else {\n      category = pickRandom(expenseCategories);\n    }\n\n    let amount;\n    if (payee.name === 'Deposit') {\n      amount = integer(50000, 70000);\n    } else {\n      amount = integer(0, random() < 0.05 ? -8000 : -700);\n    }\n\n    const currentDate = monthUtils.subDays(\n      monthUtils.currentDay(),\n      Math.floor(i / 3),\n    );\n\n    const transaction: TransactionEntity = {\n      id: uuidv4(),\n      amount,\n      payee: payee.id,\n      account: account.id,\n      date: currentDate,\n      category: category.id,\n    };\n    transactions.push(transaction);\n\n    if (random() < 0.2) {\n      const a = Math.round(transaction.amount / 3);\n      const pick = () =>\n        payee === incomePayee\n          ? incomeGroup.categories.find(c => c.name === 'Income').id\n          : pickRandom(expenseCategories).id;\n      transaction.subtransactions = [\n        {\n          id: uuidv4(),\n          date: currentDate,\n          account: account.id,\n          amount: a,\n          category: pick(),\n        },\n        {\n          id: uuidv4(),\n          date: currentDate,\n          account: account.id,\n          amount: a,\n          category: pick(),\n        },\n        {\n          id: uuidv4(),\n          date: currentDate,\n          account: account.id,\n          amount: transaction.amount - a * 2,\n          category: pick(),\n        },\n      ];\n    }\n  }\n\n  const earliestMonth = monthUtils.monthFromDate(\n    transactions[transactions.length - 1].date,\n  );\n  const months = monthUtils.rangeInclusive(\n    earliestMonth,\n    monthUtils.currentMonth(),\n  );\n  const currentDay = monthUtils.currentDay();\n  for (const month of months) {\n    let date = monthUtils.addDays(month, 12);\n    if (monthUtils.isBefore(date, currentDay)) {\n      transactions.push({\n        amount: -10000,\n        payee: billPayees.find(p => p.name.toLowerCase().includes('power')).id,\n        account: account.id,\n        date,\n        category: billCategories.find(c => c.name === 'Power').id,\n      });\n    }\n\n    date = monthUtils.addDays(month, 18);\n    if (monthUtils.isBefore(date, currentDay)) {\n      transactions.push({\n        amount: -9000,\n        payee: billPayees.find(p => p.name.toLowerCase().includes('water')).id,\n        account: account.id,\n        date,\n        category: billCategories.find(c => c.name === 'Water').id,\n      });\n    }\n\n    date = monthUtils.addDays(month, 2);\n    if (monthUtils.isBefore(date, currentDay)) {\n      transactions.push({\n        amount: -120000,\n        payee: billPayees.find(p => p.name.toLowerCase().includes('housy')).id,\n        account: account.id,\n        date,\n        category: billCategories.find(c => c.name === 'Mortgage').id,\n      });\n    }\n\n    date = monthUtils.addDays(month, 20);\n    if (monthUtils.isBefore(date, currentDay)) {\n      transactions.push({\n        amount: -6000,\n        payee: billPayees.find(p => p.name.toLowerCase().includes('internet'))\n          .id,\n        account: account.id,\n        date,\n        category: billCategories.find(c => c.name === 'Internet').id,\n      });\n    }\n\n    date = monthUtils.addDays(month, 23);\n    if (monthUtils.isBefore(date, currentDay)) {\n      transactions.push({\n        amount: -7500,\n        payee: billPayees.find(p => p.name.toLowerCase().includes('t-mobile'))\n          .id,\n        account: account.id,\n        date,\n        category: billCategories.find(c => c.name === 'Cell').id,\n      });\n    }\n  }\n\n  let earliestDate = null;\n  transactions.forEach(t => {\n    if (earliestDate == null || t.date < earliestDate) {\n      earliestDate = t.date;\n    }\n  });\n\n  transactions.unshift({\n    amount: 100000,\n    payee: payees.find(p => p.name === 'Starting Balance').id,\n    account: account.id,\n    date: earliestDate,\n    category: getStartingBalanceCat(incomeGroup.categories),\n    starting_balance_flag: true,\n  });\n\n  return addTransactions(account.id, transactions);\n}\n\nasync function fillChecking(handlers, account, payees, groups) {\n  const { incomePayee, expensePayees, incomeGroup, expenseCategories } =\n    extractCommonThings(payees, groups);\n  const numTransactions = integer(20, 40);\n\n  const transactions = [];\n  for (let i = 0; i < numTransactions; i++) {\n    let payee;\n    if (random() < 0.04) {\n      payee = incomePayee;\n    } else {\n      payee = pickRandom(expensePayees);\n    }\n\n    let category;\n    if (payee.name === 'Deposit') {\n      category = incomeGroup.categories.find(c => c.name === 'Income');\n    } else {\n      category = pickRandom(expenseCategories);\n    }\n\n    const amount =\n      payee.name === 'Deposit' ? integer(50000, 70000) : integer(0, -10000);\n\n    transactions.push({\n      amount,\n      payee: payee.id,\n      account: account.id,\n      date: monthUtils.subDays(monthUtils.currentDay(), i * 2),\n      category: category.id,\n    });\n  }\n\n  transactions.unshift({\n    amount: integer(90000, 120000),\n    payee: payees.find(p => p.name === 'Starting Balance').id,\n    account: account.id,\n    date: transactions[transactions.length - 1].date,\n    category: getStartingBalanceCat(incomeGroup.categories),\n    starting_balance_flag: true,\n  });\n\n  await handlers['transactions-batch-update']({\n    added: transactions,\n    fastMode: true,\n  });\n}\n\nasync function fillInvestment(handlers, account, payees, groups) {\n  const { incomePayee, incomeGroup } = extractCommonThings(payees, groups);\n\n  const numTransactions = integer(10, 30);\n\n  const transactions = [];\n  for (let i = 0; i < numTransactions; i++) {\n    const payee = incomePayee;\n    const category = incomeGroup.categories.find(c => c.name === 'Income');\n\n    const amount = integer(10000, 20000);\n\n    transactions.push({\n      amount,\n      payee: payee.id,\n      account: account.id,\n      date: monthUtils.subDays(monthUtils.currentDay(), integer(10, 360)),\n      category: category.id,\n    });\n  }\n\n  transactions.unshift({\n    amount: integer(10000, 20000),\n    payee: payees.find(p => p.name === 'Starting Balance').id,\n    account: account.id,\n    date: findMin(transactions, 'date').date,\n    category: getStartingBalanceCat(incomeGroup.categories),\n    starting_balance_flag: true,\n  });\n\n  await handlers['transactions-batch-update']({\n    added: transactions,\n    fastMode: true,\n  });\n}\n\nasync function fillSavings(handlers, account, payees, groups) {\n  const { incomePayee, expensePayees, incomeGroup, expenseCategories } =\n    extractCommonThings(payees, groups);\n\n  const numTransactions = integer(15, 40);\n\n  const transactions = [];\n  for (let i = 0; i < numTransactions; i++) {\n    let payee;\n    if (random() < 0.3) {\n      payee = incomePayee;\n    } else {\n      payee = pickRandom(expensePayees);\n    }\n    const category =\n      payee === incomePayee\n        ? incomeGroup.categories.find(c => c.name === 'Income')\n        : pickRandom(expenseCategories);\n    const amount =\n      payee === incomePayee ? integer(10000, 80000) : integer(-10000, -2000);\n\n    transactions.push({\n      amount,\n      payee: payee.id,\n      account: account.id,\n      date: monthUtils.subDays(monthUtils.currentDay(), i * 5),\n      category: category.id,\n    });\n  }\n\n  transactions.unshift({\n    amount: 30000,\n    payee: payees.find(p => p.name === 'Starting Balance').id,\n    account: account.id,\n    date: transactions[transactions.length - 1].date,\n    category: getStartingBalanceCat(incomeGroup.categories),\n    starting_balance_flag: true,\n  });\n\n  await handlers['transactions-batch-update']({\n    added: transactions,\n    fastMode: true,\n  });\n}\n\nasync function fillMortgage(handlers, account, payees, groups) {\n  const { incomePayee, incomeGroup } = extractCommonThings(payees, groups);\n\n  const numTransactions = integer(7, 10);\n  const amount = integer(100000, 200000);\n  const category = incomeGroup.categories.find(c => c.name === 'Income');\n\n  const transactions = [\n    {\n      amount: integer(-3000, -3500) * 100 * 100,\n      payee: payees.find(p => p.name === 'Starting Balance').id,\n      account: account.id,\n      date:\n        monthUtils.subMonths(monthUtils.currentDay(), numTransactions) + '-02',\n      category: getStartingBalanceCat(incomeGroup.categories),\n      starting_balance_flag: true,\n    },\n  ];\n  for (let i = 0; i < numTransactions; i++) {\n    const payee = incomePayee;\n\n    transactions.push({\n      amount,\n      payee: payee.id,\n      account: account.id,\n      date: monthUtils.subMonths(monthUtils.currentDay(), i) + '-02',\n      category: category.id,\n      starting_balance_flag: true,\n    });\n  }\n\n  await handlers['transactions-batch-update']({\n    added: transactions,\n    fastMode: true,\n  });\n}\n\nasync function fillOther(handlers, account, payees, groups) {\n  const { incomePayee, incomeGroup } = extractCommonThings(payees, groups);\n\n  const numTransactions = integer(3, 6);\n  const category = incomeGroup.categories.find(c => c.name === 'Income');\n\n  const transactions: TransactionEntity[] = [\n    {\n      id: uuidv4(),\n      amount: integer(3250, 3700) * 100 * 100,\n      payee: payees.find(p => p.name === 'Starting Balance').id,\n      account: account.id,\n      date:\n        monthUtils.subMonths(monthUtils.currentDay(), numTransactions) + '-02',\n      category: getStartingBalanceCat(incomeGroup.categories),\n      starting_balance_flag: true,\n    },\n  ];\n  for (let i = 0; i < numTransactions; i++) {\n    const payee = incomePayee;\n    const amount = integer(4, 9) * 100 * 100;\n\n    transactions.push({\n      id: uuidv4(),\n      amount,\n      payee: payee.id,\n      account: account.id,\n      date: monthUtils.subMonths(monthUtils.currentDay(), i) + '-02',\n      category: category.id,\n    });\n  }\n\n  await handlers['transactions-batch-update']({\n    added: transactions,\n    fastMode: true,\n  });\n}\n\nasync function createBudget(accounts, payees, groups) {\n  const primaryAccount = accounts.find(a => (a.name = 'Bank of America'));\n  const earliestDate = (\n    await db.first<Pick<db.DbViewTransaction, 'date'>>(\n      `SELECT t.date FROM v_transactions t LEFT JOIN accounts a ON t.account = a.id\n       WHERE a.offbudget = 0 AND t.is_child = 0 ORDER BY date ASC LIMIT 1`,\n    )\n  ).date;\n  const earliestPrimaryDate = (\n    await db.first<Pick<db.DbViewTransaction, 'date'>>(\n      `SELECT t.date FROM v_transactions t LEFT JOIN accounts a ON t.account = a.id\n       WHERE a.id = ? AND a.offbudget = 0 AND t.is_child = 0 ORDER BY date ASC LIMIT 1`,\n      [primaryAccount.id],\n    )\n  ).date;\n\n  const start = monthUtils.monthFromDate(db.fromDateRepr(earliestDate));\n  const end = monthUtils.currentMonth();\n  const months = monthUtils.rangeInclusive(start, end);\n\n  function category(name) {\n    for (const group of groups) {\n      const cat = group.categories.find(c => c.name === name);\n      if (cat) {\n        return cat;\n      }\n    }\n  }\n\n  function setBudget(month, category, amount) {\n    return budgetActions.setBudget({ month, category: category.id, amount });\n  }\n\n  function setBudgetIfSpent(month, cat) {\n    const spent: number = sheet.getCellValue(\n      monthUtils.sheetForMonth(month),\n      `sum-amount-${cat.id}`,\n    ) as number;\n\n    if (spent < 0) {\n      setBudget(month, cat, -spent);\n    }\n  }\n\n  await runMutator(() =>\n    batchMessages(async () => {\n      for (const month of months) {\n        if (\n          month >=\n          monthUtils.monthFromDate(db.fromDateRepr(earliestPrimaryDate))\n        ) {\n          setBudget(month, category('Food'), 40000);\n          setBudget(month, category('Restaurants'), 30000);\n          setBudget(month, category('Entertainment'), 10000);\n          setBudget(month, category('Clothing'), 3000);\n          setBudget(month, category('General'), 50000);\n          setBudget(month, category('Gift'), 7500);\n          setBudget(month, category('Medical'), 10000);\n\n          setBudget(month, category('Cell'), 7500);\n          setBudget(month, category('Internet'), 6000);\n          setBudget(month, category('Mortgage'), 120000);\n          setBudget(month, category('Water'), 9000);\n          setBudget(month, category('Power'), 10000);\n        } else {\n          setBudgetIfSpent(month, category('Food'));\n          setBudgetIfSpent(month, category('Restaurants'));\n          setBudgetIfSpent(month, category('Entertainment'));\n          setBudgetIfSpent(month, category('Clothing'));\n          setBudgetIfSpent(month, category('General'));\n          setBudgetIfSpent(month, category('Gift'));\n          setBudgetIfSpent(month, category('Medical'));\n\n          setBudgetIfSpent(month, category('Cell'));\n          setBudgetIfSpent(month, category('Internet'));\n          setBudgetIfSpent(month, category('Mortgage'));\n          setBudgetIfSpent(month, category('Water'));\n          setBudgetIfSpent(month, category('Power'));\n        }\n      }\n    }),\n  );\n\n  await sheet.waitOnSpreadsheet();\n\n  await runMutator(() =>\n    batchMessages(async () => {\n      let prevSaved = 0;\n      for (const month of months) {\n        if (\n          month >=\n            monthUtils.monthFromDate(db.fromDateRepr(earliestPrimaryDate)) &&\n          month <= monthUtils.currentMonth()\n        ) {\n          const sheetName = monthUtils.sheetForMonth(month);\n          const toBudget: number = sheet.getCellValue(\n            sheetName,\n            'to-budget',\n          ) as number;\n          const available = toBudget - prevSaved;\n\n          if (available - 403000 > 0) {\n            setBudget(month, category('Savings'), available - 403000);\n            budgetActions.setBuffer(month, 403000);\n\n            prevSaved += available - 403000;\n          } else if (available > 0) {\n            budgetActions.setBuffer(month, available);\n          }\n        }\n      }\n    }),\n  );\n\n  await sheet.waitOnSpreadsheet();\n\n  const sheetName = monthUtils.sheetForMonth(monthUtils.currentMonth());\n  const toBudget: number = sheet.getCellValue(sheetName, 'to-budget') as number;\n  if (toBudget < 0) {\n    await addTransactions(primaryAccount.id, [\n      {\n        amount: -toBudget,\n        category: category('Income').id,\n        date: monthUtils.currentMonth() + '-01',\n      },\n    ]);\n  }\n\n  // let sheetName = monthUtils.sheetForMonth(monthUtils.currentMonth());\n  // let toBudget = sheet.getCellValue(sheetName, 'to-budget');\n  // setBudget(monthUtils.currentMonth(), category('Savings'), toBudget);\n\n  await sheet.waitOnSpreadsheet();\n}\n\nexport async function createTestBudget(handlers: Handlers) {\n  setSyncingMode('import');\n\n  await db.execQuery('PRAGMA journal_mode = OFF');\n\n  // Clear out the default categories. This is fine to do without\n  // going through the sync system because we are in import mode and\n  // these aren't tracked through messages anyway.\n  await db.runQuery('DELETE FROM categories;');\n  await db.runQuery('DELETE FROM category_groups');\n\n  const accounts: { name: string; offBudget?: boolean; id?: string }[] = [\n    { name: 'Bank of America' },\n    { name: 'Ally Savings' },\n    { name: 'Capital One Checking' },\n    { name: 'HSBC' },\n    { name: 'Vanguard 401k', offBudget: true },\n    { name: 'Mortgage', offBudget: true },\n    { name: 'House Asset', offBudget: true },\n    { name: 'Roth IRA', offBudget: true },\n  ];\n\n  await runMutator(async () => {\n    for (const account of accounts) {\n      account.id = await handlers['account-create'](account);\n    }\n  });\n\n  const newPayees: Array<MockPayeeEntity> = [\n    { name: 'Starting Balance' },\n    { name: 'Kroger' },\n    { name: 'Publix' },\n    { name: 'Home Depot' },\n    { name: 'Movies' },\n    { name: 'Online store' },\n    { name: 'Deposit' },\n    { name: 'Dominion Power', bill: true },\n    { name: 'Extra Watery', bill: true },\n    { name: 'Housy House', bill: true },\n    { name: 'Fast Internet', bill: true },\n    { name: 'T-mobile', bill: true },\n  ];\n\n  const payees: PayeeEntity[] = [];\n\n  await runMutator(() =>\n    batchMessages(async () => {\n      for (const newPayee of newPayees) {\n        const id = await handlers['payee-create']({ name: newPayee.name });\n        payees.push({\n          id,\n          name: newPayee.name,\n          ...newPayee,\n        });\n      }\n    }),\n  );\n\n  const newCategoryGroups: Array<CategoryGroupDefinition> = [\n    {\n      name: 'Usual Expenses',\n      categories: [\n        { name: 'Savings' },\n        { name: 'Medical' },\n        { name: 'Gift' },\n        { name: 'General' },\n        { name: 'Clothing' },\n        { name: 'Entertainment' },\n        { name: 'Restaurants' },\n        { name: 'Food' },\n      ],\n    },\n    {\n      name: 'Bills',\n      categories: [\n        { name: 'Power' },\n        { name: 'Water' },\n        { name: 'Mortgage' },\n        { name: 'Internet' },\n        { name: 'Cell' },\n      ],\n    },\n    {\n      name: 'Income',\n      is_income: true,\n      categories: [\n        { name: 'Income', is_income: true },\n        { name: 'Misc', is_income: true },\n        { name: 'Starting Balances', is_income: true },\n      ],\n    },\n  ];\n  const categoryGroups: Array<CategoryGroupEntity> = [];\n\n  await runMutator(async () => {\n    for (const group of newCategoryGroups) {\n      const groupId = await handlers['category-group-create']({\n        name: group.name,\n        isIncome: group.is_income,\n      });\n\n      categoryGroups.push({\n        ...group,\n        id: groupId,\n        categories: [],\n      });\n\n      for (const category of group.categories) {\n        const categoryId = await handlers['category-create']({\n          ...category,\n          isIncome: category.is_income,\n          groupId,\n        });\n\n        categoryGroups[categoryGroups.length - 1].categories.push({\n          ...category,\n          id: categoryId,\n          group: groupId,\n        });\n      }\n    }\n  });\n\n  const allGroups = (await runHandler(handlers['get-categories'])).grouped;\n\n  setSyncingMode('import');\n\n  await runMutator(() =>\n    batchMessages(async () => {\n      for (const account of accounts) {\n        if (account.name === 'Bank of America') {\n          await fillPrimaryChecking(handlers, account, payees, allGroups);\n        } else if (\n          account.name === 'Capital One Checking' ||\n          account.name === 'HSBC'\n        ) {\n          await fillChecking(handlers, account, payees, allGroups);\n        } else if (account.name === 'Ally Savings') {\n          await fillSavings(handlers, account, payees, allGroups);\n        } else if (\n          account.name === 'Vanguard 401k' ||\n          account.name === 'Roth IRA'\n        ) {\n          await fillInvestment(handlers, account, payees, allGroups);\n        } else if (account.name === 'Mortgage') {\n          await fillMortgage(handlers, account, payees, allGroups);\n        } else if (account.name === 'House Asset') {\n          await fillOther(handlers, account, payees, allGroups);\n        } else {\n          console.error('Unknown account name for test budget: ', account.name);\n          await fillChecking(handlers, account, payees, allGroups);\n        }\n      }\n    }),\n  );\n\n  setSyncingMode('import');\n\n  // This checks to see if the primary account is in the negative.\n  // This might happen depending on the transactions added, but we\n  // don't want to show that as it'd be weird. We modify the latest\n  // deposit transaction to force it to be positive\n  const primaryAccount = accounts.find(a => (a.name = 'Bank of America'));\n  const { data: primaryBalance } = await aqlQuery(\n    q('transactions')\n      .filter({ account: primaryAccount.id })\n      .calculate({ $sum: '$amount' })\n      .serialize(),\n  );\n  if (primaryBalance < 0) {\n    const { data: results } = await aqlQuery(\n      q('transactions')\n        .filter({ account: primaryAccount.id, amount: { $gt: 0 } })\n        .limit(1)\n        .select(['id', 'amount'])\n        .serialize(),\n    );\n    const lastDeposit = results[0];\n\n    await runHandler(handlers['transaction-update'], {\n      ...lastDeposit,\n      amount: lastDeposit.amount + -primaryBalance + integer(10000, 20000),\n    });\n  }\n\n  // Bust the cache and reload the spreadsheet\n  setSyncingMode('disabled');\n  await sheet.reloadSpreadsheet(db);\n  await budget.createAllBudgets();\n\n  await sheet.waitOnSpreadsheet();\n\n  // Create some schedules\n  await runMutator(() =>\n    batchMessages(async () => {\n      const account = accounts.find(acc => acc.name === 'Bank of America');\n\n      await runHandler(handlers['schedule/create'], {\n        schedule: {\n          name: 'Phone bills',\n          posts_transaction: false,\n        },\n        conditions: [\n          {\n            op: 'is',\n            field: 'payee',\n            value: payees.find(item => item.name === 'Dominion Power').id,\n          },\n          {\n            op: 'is',\n            field: 'account',\n            value: account.id,\n          },\n          {\n            op: 'is',\n            field: 'date',\n            value: {\n              start: monthUtils.currentDay(),\n              frequency: 'monthly',\n              patterns: [],\n              skipWeekend: false,\n              weekendSolveMode: 'after',\n            },\n          },\n          { op: 'isapprox', field: 'amount', value: -12000 },\n        ],\n      });\n\n      await runHandler(handlers['schedule/create'], {\n        schedule: {\n          name: 'Internet bill',\n          posts_transaction: false,\n        },\n        conditions: [\n          {\n            op: 'is',\n            field: 'payee',\n            value: payees.find(item => item.name === 'Fast Internet').id,\n          },\n          {\n            op: 'is',\n            field: 'account',\n            value: account.id,\n          },\n          {\n            op: 'is',\n            field: 'date',\n            value: monthUtils.subDays(monthUtils.currentDay(), 1),\n          },\n          { op: 'isapprox', field: 'amount', value: -14000 },\n        ],\n      });\n\n      await runHandler(handlers['schedule/create'], {\n        schedule: {\n          name: 'Wedding',\n          posts_transaction: false,\n        },\n        conditions: [\n          {\n            op: 'is',\n            field: 'date',\n            value: {\n              start: monthUtils.subDays(monthUtils.currentDay(), 3),\n              frequency: 'monthly',\n              patterns: [],\n              skipWeekend: false,\n              weekendSolveMode: 'after',\n            },\n          },\n          { op: 'is', field: 'amount', value: -2700000 },\n        ],\n      });\n\n      await runHandler(handlers['schedule/create'], {\n        schedule: {\n          name: 'Utilities',\n          posts_transaction: false,\n        },\n        conditions: [\n          {\n            op: 'is',\n            field: 'account',\n            value: account.id,\n          },\n          {\n            op: 'is',\n            field: 'date',\n            value: {\n              start: monthUtils.addDays(monthUtils.currentDay(), 1),\n              frequency: 'monthly',\n              patterns: [],\n              skipWeekend: false,\n              weekendSolveMode: 'after',\n            },\n          },\n          { op: 'is', field: 'amount', value: -190000 },\n        ],\n      });\n    }),\n  );\n\n  // Create a budget\n  await createBudget(accounts, payees, allGroups);\n}\n","// @ts-strict-ignore\nimport * as fs from '../../platform/server/fs';\nimport * as sqlite from '../../platform/server/sqlite';\nimport * as cloudStorage from '../cloud-storage';\nimport { handlers } from '../main';\nimport { waitOnSpreadsheet } from '../sheet';\n\nexport async function importActual(_filepath: string, buffer: Buffer) {\n  // Importing Actual files is a special case because we can directly\n  // write down the files, but because it doesn't go through the API\n  // layer we need to duplicate some of the workflow\n  await handlers['close-budget']();\n\n  let id;\n  try {\n    ({ id } = await cloudStorage.importBuffer(\n      { cloudFileId: null, groupId: null },\n      buffer,\n    ));\n  } catch (e) {\n    if (e.type === 'FileDownloadError') {\n      return { error: e.reason };\n    }\n    throw e;\n  }\n\n  // We never want to load cached data from imported files, so\n  // delete the cache\n  const sqliteDb = await sqlite.openDatabase(\n    fs.join(fs.getBudgetDir(id), 'db.sqlite'),\n  );\n  sqlite.execQuery(\n    sqliteDb,\n    `\n          DELETE FROM kvcache;\n          DELETE FROM kvcache_key;\n        `,\n  );\n  sqlite.closeDatabase(sqliteDb);\n\n  // Load the budget, force everything to be computed, and try\n  // to upload it as a cloud file\n  await handlers['load-budget']({ id });\n  await handlers['get-budget-bounds']();\n  await waitOnSpreadsheet();\n  await cloudStorage.upload().catch(() => {});\n}\n","// @ts-strict-ignore\nimport type { Handlers } from 'loot-core/types/handlers';\nimport type { ImportTransactionEntity } from 'loot-core/types/models/import-transaction';\n\nimport * as injected from './injected';\n\nexport { q } from './app/query';\n\nfunction send<K extends keyof Handlers, T extends Handlers[K]>(\n  name: K,\n  args?: Parameters<T>[0],\n): Promise<Awaited<ReturnType<T>>> {\n  return injected.send(name, args);\n}\n\nexport async function runImport(name, func) {\n  await send('api/start-import', { budgetName: name });\n  try {\n    await func();\n  } catch (e) {\n    await send('api/abort-import');\n    throw e;\n  }\n  await send('api/finish-import');\n}\n\nexport async function loadBudget(budgetId) {\n  return send('api/load-budget', { id: budgetId });\n}\n\nexport async function downloadBudget(syncId, { password }: { password? } = {}) {\n  return send('api/download-budget', { syncId, password });\n}\n\nexport async function getBudgets() {\n  return send('api/get-budgets');\n}\n\nexport async function sync() {\n  return send('api/sync');\n}\n\nexport async function runBankSync(args?: { accountId: string }) {\n  return send('api/bank-sync', args);\n}\n\nexport async function batchBudgetUpdates(func) {\n  await send('api/batch-budget-start');\n  try {\n    await func();\n  } finally {\n    await send('api/batch-budget-end');\n  }\n}\n\n/**\n * @deprecated Please use `aqlQuery` instead.\n * This function will be removed in a future release.\n */\nexport function runQuery(query) {\n  return send('api/query', { query: query.serialize() });\n}\n\nexport function aqlQuery(query) {\n  return send('api/query', { query: query.serialize() });\n}\n\nexport function getBudgetMonths() {\n  return send('api/budget-months');\n}\n\nexport function getBudgetMonth(month) {\n  return send('api/budget-month', { month });\n}\n\nexport function setBudgetAmount(month, categoryId, value) {\n  return send('api/budget-set-amount', { month, categoryId, amount: value });\n}\n\nexport function setBudgetCarryover(month, categoryId, flag) {\n  return send('api/budget-set-carryover', { month, categoryId, flag });\n}\n\nexport function addTransactions(\n  accountId,\n  transactions,\n  { learnCategories = false, runTransfers = false } = {},\n) {\n  return send('api/transactions-add', {\n    accountId,\n    transactions,\n    learnCategories,\n    runTransfers,\n  });\n}\n\nexport interface ImportTransactionsOpts {\n  defaultCleared?: boolean;\n}\n\nexport function importTransactions(\n  accountId: string,\n  transactions: ImportTransactionEntity[],\n  opts: ImportTransactionsOpts = {\n    defaultCleared: true,\n  },\n) {\n  return send('api/transactions-import', {\n    accountId,\n    transactions,\n    opts,\n  });\n}\n\nexport function getTransactions(accountId, startDate, endDate) {\n  return send('api/transactions-get', { accountId, startDate, endDate });\n}\n\nexport function updateTransaction(id, fields) {\n  return send('api/transaction-update', { id, fields });\n}\n\nexport function deleteTransaction(id) {\n  return send('api/transaction-delete', { id });\n}\n\nexport function getAccounts() {\n  return send('api/accounts-get');\n}\n\nexport function createAccount(account, initialBalance?) {\n  return send('api/account-create', { account, initialBalance });\n}\n\nexport function updateAccount(id, fields) {\n  return send('api/account-update', { id, fields });\n}\n\nexport function closeAccount(id, transferAccountId?, transferCategoryId?) {\n  return send('api/account-close', {\n    id,\n    transferAccountId,\n    transferCategoryId,\n  });\n}\n\nexport function reopenAccount(id) {\n  return send('api/account-reopen', { id });\n}\n\nexport function deleteAccount(id) {\n  return send('api/account-delete', { id });\n}\n\nexport function getAccountBalance(id, cutoff?) {\n  return send('api/account-balance', { id, cutoff });\n}\n\nexport function getCategoryGroups() {\n  return send('api/category-groups-get');\n}\n\nexport function createCategoryGroup(group) {\n  return send('api/category-group-create', { group });\n}\n\nexport function updateCategoryGroup(id, fields) {\n  return send('api/category-group-update', { id, fields });\n}\n\nexport function deleteCategoryGroup(id, transferCategoryId?) {\n  return send('api/category-group-delete', { id, transferCategoryId });\n}\n\nexport function getCategories() {\n  return send('api/categories-get', { grouped: false });\n}\n\nexport function createCategory(category) {\n  return send('api/category-create', { category });\n}\n\nexport function updateCategory(id, fields) {\n  return send('api/category-update', { id, fields });\n}\n\nexport function deleteCategory(id, transferCategoryId?) {\n  return send('api/category-delete', { id, transferCategoryId });\n}\n\nexport function getCommonPayees() {\n  return send('api/common-payees-get');\n}\n\nexport function getPayees() {\n  return send('api/payees-get');\n}\n\nexport function createPayee(payee) {\n  return send('api/payee-create', { payee });\n}\n\nexport function updatePayee(id, fields) {\n  return send('api/payee-update', { id, fields });\n}\n\nexport function deletePayee(id) {\n  return send('api/payee-delete', { id });\n}\n\nexport function mergePayees(targetId, mergeIds) {\n  return send('api/payees-merge', { targetId, mergeIds });\n}\n\nexport function getRules() {\n  return send('api/rules-get');\n}\n\nexport function getPayeeRules(id) {\n  return send('api/payee-rules-get', { id });\n}\n\nexport function createRule(rule) {\n  return send('api/rule-create', { rule });\n}\n\nexport function updateRule(rule) {\n  return send('api/rule-update', { rule });\n}\n\nexport function deleteRule(id: string) {\n  return send('api/rule-delete', id);\n}\n\nexport function holdBudgetForNextMonth(month, amount) {\n  return send('api/budget-hold-for-next-month', { month, amount });\n}\n\nexport function resetBudgetHold(month) {\n  return send('api/budget-reset-hold', { month });\n}\n","export function amountToInteger(n) {\n  return Math.round(n * 100);\n}\n\nexport function integerToAmount(n) {\n  return parseFloat((n / 100).toFixed(2));\n}\n","// @ts-strict-ignore\n// This is a special usage of the API because this package is embedded\n// into Actual itself. We only want to pull in the methods in that\n// case and ignore everything else; otherwise we'd be pulling in the\n// entire backend bundle from the API\nimport { send } from '@actual-app/api/injected';\nimport * as actual from '@actual-app/api/methods';\nimport { amountToInteger } from '@actual-app/api/utils';\nimport AdmZip from 'adm-zip';\nimport normalizePathSep from 'slash';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as monthUtils from '../../shared/months';\nimport { groupBy, sortByKey } from '../../shared/util';\n\nimport * as YNAB4 from './ynab4-types';\n\n// Importer\n\nasync function importAccounts(\n  data: YNAB4.YFull,\n  entityIdMap: Map<string, string>,\n) {\n  const accounts = sortByKey(data.accounts, 'sortableIndex');\n\n  return Promise.all(\n    accounts.map(async account => {\n      if (!account.isTombstone) {\n        const id = await actual.createAccount({\n          name: account.accountName,\n          offbudget: account.onBudget ? false : true,\n          closed: account.hidden ? true : false,\n        });\n        entityIdMap.set(account.entityId, id);\n      }\n    }),\n  );\n}\n\nasync function importCategories(\n  data: YNAB4.YFull,\n  entityIdMap: Map<string, string>,\n) {\n  const masterCategories = sortByKey(data.masterCategories, 'sortableIndex');\n\n  await Promise.all(\n    masterCategories.map(async masterCategory => {\n      if (\n        masterCategory.type === 'OUTFLOW' &&\n        !masterCategory.isTombstone &&\n        masterCategory.subCategories &&\n        masterCategory.subCategories.some(cat => !cat.isTombstone)\n      ) {\n        const id = await actual.createCategoryGroup({\n          name: masterCategory.name,\n          is_income: false,\n        });\n        entityIdMap.set(masterCategory.entityId, id);\n        if (masterCategory.note) {\n          send('notes-save', { id, note: masterCategory.note });\n        }\n\n        if (masterCategory.subCategories) {\n          const subCategories = sortByKey(\n            masterCategory.subCategories,\n            'sortableIndex',\n          );\n          subCategories.reverse();\n\n          // This can't be done in parallel because sort order depends\n          // on insertion order\n          for (const category of subCategories) {\n            if (!category.isTombstone) {\n              let categoryName = category.name;\n\n              // Hidden categories have the parent category entity id\n              // appended to the end of the sub category name.\n              // The format is 'MasterCategory ` SubCategory ` entityId'.\n              // Remove the id to shorten the name.\n              if (masterCategory.name === 'Hidden Categories') {\n                const categoryNameParts = categoryName.split(' ` ');\n\n                // Remove the last part, which is the entityId.\n                categoryNameParts.pop();\n\n                // Join the remaining parts with a slash between them.\n                categoryName = categoryNameParts.join('/').trim();\n              }\n\n              const id = await actual.createCategory({\n                name: categoryName,\n                group_id: entityIdMap.get(category.masterCategoryId),\n              });\n              entityIdMap.set(category.entityId, id);\n              if (category.note) {\n                send('notes-save', { id, note: category.note });\n              }\n            }\n          }\n        }\n      }\n    }),\n  );\n}\n\nasync function importPayees(\n  data: YNAB4.YFull,\n  entityIdMap: Map<string, string>,\n) {\n  for (const payee of data.payees) {\n    if (!payee.isTombstone) {\n      const id = await actual.createPayee({\n        name: payee.name,\n        category: entityIdMap.get(payee.autoFillCategoryId) || null,\n        transfer_acct: entityIdMap.get(payee.targetAccountId) || null,\n      });\n\n      // TODO: import payee rules\n\n      entityIdMap.set(payee.entityId, id);\n    }\n  }\n}\n\nasync function importTransactions(\n  data: YNAB4.YFull,\n  entityIdMap: Map<string, string>,\n) {\n  const categories = await actual.getCategories();\n  const incomeCategoryId: string = categories.find(\n    cat => cat.name === 'Income',\n  ).id;\n  const accounts = await actual.getAccounts();\n  const payees = await actual.getPayees();\n\n  function getCategory(id: string) {\n    if (id == null || id === 'Category/__Split__') {\n      return null;\n    } else if (\n      id === 'Category/__ImmediateIncome__' ||\n      id === 'Category/__DeferredIncome__'\n    ) {\n      return incomeCategoryId;\n    }\n    return entityIdMap.get(id);\n  }\n\n  function isOffBudget(acctId: string) {\n    const acct = accounts.find(acct => acct.id === acctId);\n    if (!acct) {\n      throw new Error('Could not find account for transaction when importing');\n    }\n    return acct.offbudget;\n  }\n\n  // Go ahead and generate ids for all of the transactions so we can\n  // reliably resolve transfers\n  for (const transaction of data.transactions) {\n    entityIdMap.set(transaction.entityId, uuidv4());\n\n    if (transaction.subTransactions) {\n      for (const subTransaction of transaction.subTransactions) {\n        entityIdMap.set(subTransaction.entityId, uuidv4());\n      }\n    }\n  }\n\n  const transactionsGrouped = groupBy(data.transactions, 'accountId');\n\n  await Promise.all(\n    [...transactionsGrouped.keys()].map(async accountId => {\n      const transactions = transactionsGrouped.get(accountId);\n\n      const toImport = transactions\n        .map(transaction => {\n          if (transaction.isTombstone) {\n            return null;\n          }\n\n          const id = entityIdMap.get(transaction.entityId);\n\n          function transferProperties(t: YNAB4.SubTransaction) {\n            const transferId = entityIdMap.get(t.transferTransactionId) || null;\n\n            let payee = null;\n            let imported_payee = null;\n            if (transferId) {\n              payee = payees.find(\n                p => p.transfer_acct === entityIdMap.get(t.targetAccountId),\n              ).id;\n            } else {\n              payee = entityIdMap.get(t.payeeId);\n              imported_payee = data.payees.find(\n                p => p.entityId === t.payeeId,\n              )?.name;\n            }\n\n            return {\n              transfer_id: transferId,\n              payee,\n              imported_payee,\n            };\n          }\n\n          const newTransaction = {\n            id,\n            amount: amountToInteger(transaction.amount),\n            category: isOffBudget(entityIdMap.get(accountId))\n              ? null\n              : getCategory(transaction.categoryId),\n            date: transaction.date,\n            notes: transaction.memo || null,\n            cleared:\n              transaction.cleared === 'Cleared' ||\n              transaction.cleared === 'Reconciled',\n            reconciled: transaction.cleared === 'Reconciled',\n            ...transferProperties(transaction),\n\n            subtransactions:\n              transaction.subTransactions &&\n              transaction.subTransactions\n                .filter(st => !st.isTombstone)\n                .map(t => {\n                  return {\n                    id: entityIdMap.get(t.entityId),\n                    amount: amountToInteger(t.amount),\n                    category: getCategory(t.categoryId),\n                    notes: t.memo || null,\n                    ...transferProperties(t),\n                  };\n                }),\n          };\n\n          return newTransaction;\n        })\n        .filter(x => x);\n\n      await actual.addTransactions(entityIdMap.get(accountId), toImport, {\n        learnCategories: true,\n      });\n    }),\n  );\n}\n\nfunction fillInBudgets(\n  data: YNAB4.YFull,\n  categoryBudgets: YNAB4.MonthlySubCategoryBudget[],\n) {\n  // YNAB only contains entries for categories that have been actually\n  // budgeted. That would be fine except that we need to set the\n  // \"carryover\" flag on each month when carrying debt across months.\n  // To make sure our system has a chance to set this flag on each\n  // category, make sure a budget exists for every category of every\n  // month.\n  const budgets: {\n    budgeted: number;\n    categoryId: string;\n    overspendingHandling?: string;\n  }[] = [...categoryBudgets];\n  data.masterCategories.forEach(masterCategory => {\n    if (masterCategory.subCategories) {\n      masterCategory.subCategories.forEach(category => {\n        if (!budgets.find(b => b.categoryId === category.entityId)) {\n          budgets.push({\n            budgeted: 0,\n            categoryId: category.entityId,\n          });\n        }\n      });\n    }\n  });\n  return budgets;\n}\n\nasync function importBudgets(\n  data: YNAB4.YFull,\n  entityIdMap: Map<string, string>,\n) {\n  const budgets = sortByKey(data.monthlyBudgets, 'month');\n\n  await actual.batchBudgetUpdates(async () => {\n    for (const budget of budgets) {\n      const filled = fillInBudgets(\n        data,\n        budget.monthlySubCategoryBudgets.filter(b => !b.isTombstone),\n      );\n\n      await Promise.all(\n        filled.map(async catBudget => {\n          const amount = amountToInteger(catBudget.budgeted);\n          const catId = entityIdMap.get(catBudget.categoryId);\n          const month = monthUtils.monthFromDate(budget.month);\n          if (!catId) {\n            return;\n          }\n\n          await actual.setBudgetAmount(month, catId, amount);\n\n          if (catBudget.overspendingHandling === 'AffectsBuffer') {\n            await actual.setBudgetCarryover(month, catId, false);\n          } else if (catBudget.overspendingHandling === 'Confined') {\n            await actual.setBudgetCarryover(month, catId, true);\n          }\n        }),\n      );\n    }\n  });\n}\n\nfunction estimateRecentness(str: string) {\n  // The \"recentness\" is the total amount of changes that this device\n  // is aware of, which is estimated by summing up all of the version\n  // numbers that its aware of. This works because version numbers are\n  // increasing integers.\n  return str.split(',').reduce((total, version) => {\n    const [_, number] = version.split('-');\n    return total + parseInt(number);\n  }, 0);\n}\n\nfunction findLatestDevice(zipped: AdmZip, entries: AdmZip.IZipEntry[]): string {\n  let devices = entries\n    .map(entry => {\n      const contents = zipped.readFile(entry).toString('utf8');\n\n      let data;\n      try {\n        data = JSON.parse(contents);\n      } catch (e) {\n        return null;\n      }\n\n      if (data.hasFullKnowledge) {\n        return {\n          deviceGUID: data.deviceGUID,\n          shortName: data.shortDeviceId,\n          recentness: estimateRecentness(data.knowledge),\n        };\n      }\n\n      return null;\n    })\n    .filter(x => x);\n\n  devices = sortByKey(devices, 'recentness');\n  return devices[devices.length - 1].deviceGUID;\n}\n\nexport async function doImport(data: YNAB4.YFull) {\n  const entityIdMap = new Map<string, string>();\n\n  console.log('Importing Accounts...');\n  await importAccounts(data, entityIdMap);\n\n  console.log('Importing Categories...');\n  await importCategories(data, entityIdMap);\n\n  console.log('Importing Payees...');\n  await importPayees(data, entityIdMap);\n\n  console.log('Importing Transactions...');\n  await importTransactions(data, entityIdMap);\n\n  console.log('Importing Budgets...');\n  await importBudgets(data, entityIdMap);\n\n  console.log('Setting up...');\n}\n\nexport function getBudgetName(filepath) {\n  let unixFilepath = normalizePathSep(filepath);\n\n  if (!/\\.zip/.test(unixFilepath)) {\n    return null;\n  }\n\n  unixFilepath = unixFilepath.replace(/\\.zip$/, '').replace(/.ynab4$/, '');\n\n  // Most budgets are named like \"Budget~51938D82.ynab4\" but sometimes\n  // they are only \"Budget.ynab4\". We only want to grab the name\n  // before the ~ if it exists.\n  const m = unixFilepath.match(/([^/~]+)[^/]*$/);\n  if (!m) {\n    return null;\n  }\n  return m[1];\n}\n\nfunction getFile(entries: AdmZip.IZipEntry[], path: string) {\n  const files = entries.filter(e => e.entryName === path);\n  if (files.length === 0) {\n    throw new Error('Could not find file: ' + path);\n  }\n  if (files.length >= 2) {\n    throw new Error('File name matches multiple files: ' + path);\n  }\n  return files[0];\n}\n\nfunction join(...paths: string[]): string {\n  return paths.slice(1).reduce(\n    (full, path) => {\n      return full + '/' + path.replace(/^\\//, '');\n    },\n    paths[0].replace(/\\/$/, ''),\n  );\n}\n\nexport function parseFile(buffer: Buffer): YNAB4.YFull {\n  const zipped = new AdmZip(buffer);\n  const entries = zipped.getEntries();\n\n  let root = '';\n  const dirMatch = entries[0].entryName.match(/([^/]*\\.ynab4)/);\n  if (dirMatch) {\n    root = dirMatch[1] + '/';\n  }\n\n  const metaStr = zipped.readFile(getFile(entries, root + 'Budget.ymeta'));\n  const meta = JSON.parse(metaStr.toString('utf8'));\n  const budgetPath = join(root, meta.relativeDataFolderName);\n\n  const deviceFiles = entries.filter(e =>\n    e.entryName.startsWith(join(budgetPath, 'devices')),\n  );\n  const deviceGUID = findLatestDevice(zipped, deviceFiles);\n\n  const yfullPath = join(budgetPath, deviceGUID, 'Budget.yfull');\n  let contents;\n  try {\n    contents = zipped.readFile(getFile(entries, yfullPath)).toString('utf8');\n  } catch (e) {\n    console.log(e);\n    throw new Error('Error reading Budget.yfull file');\n  }\n\n  try {\n    return JSON.parse(contents);\n  } catch (e) {\n    throw new Error('Error parsing Budget.yfull file');\n  }\n}\n","// @ts-strict-ignore\n// This is a special usage of the API because this package is embedded\n// into Actual itself. We only want to pull in the methods in that\n// case and ignore everything else; otherwise we'd be pulling in the\n// entire backend bundle from the API\nimport * as actual from '@actual-app/api/methods';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as monthUtils from '../../shared/months';\nimport { sortByKey, groupBy } from '../../shared/util';\n\nimport * as YNAB5 from './ynab5-types';\n\nfunction amountFromYnab(amount: number) {\n  // ynabs multiplies amount by 1000 and actual by 100\n  // so, this function divides by 10\n  return Math.round(amount / 10);\n}\n\nfunction importAccounts(data: YNAB5.Budget, entityIdMap: Map<string, string>) {\n  return Promise.all(\n    data.accounts.map(async account => {\n      if (!account.deleted) {\n        const id = await actual.createAccount({\n          name: account.name,\n          offbudget: account.on_budget ? false : true,\n          closed: account.closed,\n        });\n        entityIdMap.set(account.id, id);\n      }\n    }),\n  );\n}\n\nasync function importCategories(\n  data: YNAB5.Budget,\n  entityIdMap: Map<string, string>,\n) {\n  // Hidden categories are put in its own group by YNAB,\n  // so it's already handled.\n\n  const categories = await actual.getCategories();\n  const incomeCatId = findIdByName(categories, 'Income');\n  const ynabIncomeCategories = ['To be Budgeted', 'Inflow: Ready to Assign'];\n\n  function checkSpecialCat(cat) {\n    if (\n      cat.category_group_id ===\n      findIdByName(data.category_groups, 'Internal Master Category')\n    ) {\n      if (\n        ynabIncomeCategories.some(ynabIncomeCategory =>\n          equalsIgnoreCase(cat.name, ynabIncomeCategory),\n        )\n      ) {\n        return 'income';\n      } else {\n        return 'internal';\n      }\n    } else if (\n      cat.category_group_id ===\n      findIdByName(data.category_groups, 'Credit Card Payments')\n    ) {\n      return 'creditCard';\n    } else if (\n      cat.category_group_id === findIdByName(data.category_groups, 'Income')\n    ) {\n      return 'income';\n    }\n  }\n  // Can't be done in parallel to have\n  // correct sort order.\n\n  for (const group of data.category_groups) {\n    if (!group.deleted) {\n      let groupId;\n      // Ignores internal category and credit cards\n      if (\n        !equalsIgnoreCase(group.name, 'Internal Master Category') &&\n        !equalsIgnoreCase(group.name, 'Credit Card Payments') &&\n        !equalsIgnoreCase(group.name, 'Hidden Categories') &&\n        !equalsIgnoreCase(group.name, 'Income')\n      ) {\n        let run = true;\n        const MAX_RETRY = 10;\n        let count = 1;\n        const origName = group.name;\n        while (run) {\n          try {\n            groupId = await actual.createCategoryGroup({\n              name: group.name,\n              is_income: false,\n              hidden: group.hidden,\n            });\n            entityIdMap.set(group.id, groupId);\n            run = false;\n          } catch (e) {\n            group.name = origName + '-' + count.toString();\n            count += 1;\n            if (count >= MAX_RETRY) {\n              run = false;\n              throw Error(e.message);\n            }\n          }\n        }\n      }\n\n      if (equalsIgnoreCase(group.name, 'Income')) {\n        groupId = incomeCatId;\n        entityIdMap.set(group.id, groupId);\n      }\n\n      const cats = data.categories.filter(\n        cat => cat.category_group_id === group.id,\n      );\n\n      for (const cat of cats.reverse()) {\n        if (!cat.deleted) {\n          // Handles special categories. Starting balance is a payee\n          // in YNAB so it's handled in importTransactions\n          switch (checkSpecialCat(cat)) {\n            case 'income': {\n              // doesn't create new category, only assigns id\n              const id = incomeCatId;\n              entityIdMap.set(cat.id, id);\n              break;\n            }\n            case 'creditCard': // ignores it\n            case 'internal': // uncategorized is ignored too, handled by actual\n              break;\n            default: {\n              let run = true;\n              const MAX_RETRY = 10;\n              let count = 1;\n              const origName = cat.name;\n              while (run) {\n                try {\n                  const id = await actual.createCategory({\n                    name: cat.name,\n                    group_id: groupId,\n                    hidden: cat.hidden,\n                  });\n                  entityIdMap.set(cat.id, id);\n                  run = false;\n                } catch (e) {\n                  cat.name = origName + '-' + count.toString();\n                  count += 1;\n                  if (count >= MAX_RETRY) {\n                    run = false;\n                    throw Error(e.message);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction importPayees(data: YNAB5.Budget, entityIdMap: Map<string, string>) {\n  return Promise.all(\n    data.payees.map(async payee => {\n      if (!payee.deleted) {\n        const id = await actual.createPayee({\n          name: payee.name,\n        });\n        entityIdMap.set(payee.id, id);\n      }\n    }),\n  );\n}\n\nasync function importTransactions(\n  data: YNAB5.Budget,\n  entityIdMap: Map<string, string>,\n) {\n  const payees = await actual.getPayees();\n  const categories = await actual.getCategories();\n  const incomeCatId = findIdByName(categories, 'Income');\n  const startingBalanceCatId = findIdByName(categories, 'Starting Balances'); //better way to do it?\n\n  const startingPayeeYNAB = findIdByName(data.payees, 'Starting Balance');\n\n  const transactionsGrouped = groupBy(data.transactions, 'account_id');\n  const subtransactionsGrouped = groupBy(\n    data.subtransactions,\n    'transaction_id',\n  );\n\n  const payeesByTransferAcct = payees\n    .filter(payee => payee?.transfer_acct)\n    .map(payee => [payee.transfer_acct, payee] as [string, YNAB5.Payee]);\n  const payeeTransferAcctHashMap = new Map<string, YNAB5.Payee>(\n    payeesByTransferAcct,\n  );\n  const orphanTransferMap = new Map<string, YNAB5.Transaction[]>();\n  const orphanSubtransfer = [] as YNAB5.Subtransaction[];\n  const orphanSubtransferTrxId = [] as string[];\n  const orphanSubtransferAcctIdByTrxIdMap = new Map<string, string>();\n  const orphanSubtransferDateByTrxIdMap = new Map<string, string>();\n\n  // Go ahead and generate ids for all of the transactions so we can\n  // reliably resolve transfers\n  // Also identify orphan transfer transactions and subtransactions.\n  for (const transaction of data.subtransactions) {\n    entityIdMap.set(transaction.id, uuidv4());\n\n    if (transaction.transfer_account_id) {\n      orphanSubtransfer.push(transaction);\n      orphanSubtransferTrxId.push(transaction.transaction_id);\n    }\n  }\n\n  for (const transaction of data.transactions) {\n    entityIdMap.set(transaction.id, uuidv4());\n\n    if (\n      transaction.transfer_account_id &&\n      !transaction.transfer_transaction_id\n    ) {\n      const key =\n        transaction.account_id + '#' + transaction.transfer_account_id;\n      if (!orphanTransferMap.has(key)) {\n        orphanTransferMap.set(key, [transaction]);\n      } else {\n        orphanTransferMap.get(key).push(transaction);\n      }\n    }\n\n    if (orphanSubtransferTrxId.includes(transaction.id)) {\n      orphanSubtransferAcctIdByTrxIdMap.set(\n        transaction.id,\n        transaction.account_id,\n      );\n      orphanSubtransferDateByTrxIdMap.set(transaction.id, transaction.date);\n    }\n  }\n\n  // Compute link between subtransaction transfers and orphaned transaction\n  // transfers. The goal is to match each transfer subtransaction to the related\n  // transfer transaction according to the accounts, date, amount and memo.\n  const orphanSubtransferMap = orphanSubtransfer.reduce(\n    (map, subtransaction) => {\n      const key =\n        subtransaction.transfer_account_id +\n        '#' +\n        orphanSubtransferAcctIdByTrxIdMap.get(subtransaction.transaction_id);\n      if (!map.has(key)) {\n        map.set(key, [subtransaction]);\n      } else {\n        map.get(key).push(subtransaction);\n      }\n      return map;\n    },\n    new Map<string, YNAB5.Subtransaction[]>(),\n  );\n\n  // The comparator will be used to order transfer transactions and their\n  // corresponding tranfer subtransaction in two aligned list. Hopefully\n  // for every list index in the transactions list, the related subtransaction\n  // will be at the same index.\n  const orphanTransferComparator = (\n    a: YNAB5.Transaction | YNAB5.Subtransaction,\n    b: YNAB5.Transaction | YNAB5.Subtransaction,\n  ) => {\n    // a and b can be a YNAB5.Transaction (having a date attribute) or a\n    // YNAB5.Subtransaction (missing that date attribute)\n\n    const date_a =\n      'date' in a\n        ? a.date\n        : orphanSubtransferDateByTrxIdMap.get(a.transaction_id);\n    const date_b =\n      'date' in b\n        ? b.date\n        : orphanSubtransferDateByTrxIdMap.get(b.transaction_id);\n    // A transaction and the related subtransaction have inverted amounts.\n    // To have those in the same order, the subtransaction has to be reversed\n    // to have the same amount.\n    const amount_a = 'date' in a ? a.amount : -a.amount;\n    const amount_b = 'date' in b ? b.amount : -b.amount;\n\n    // Transaction are ordered first by date, then by amount, and lastly by memo\n    if (date_a > date_b) return 1;\n    if (date_a < date_b) return -1;\n    if (amount_a > amount_b) return 1;\n    if (amount_a < amount_b) return -1;\n    if (a.memo > b.memo) return 1;\n    if (a.memo < b.memo) return -1;\n    return 0;\n  };\n\n  const orphanTrxIdSubtrxIdMap = new Map<string, string>();\n  orphanTransferMap.forEach((transactions, key) => {\n    const subtransactions = orphanSubtransferMap.get(key);\n    if (subtransactions) {\n      transactions.sort(orphanTransferComparator);\n      subtransactions.sort(orphanTransferComparator);\n\n      // Iterate on the two sorted lists transactions and subtransactions and\n      // find matching data to identify the related transaction ids.\n      let transactionIdx = 0;\n      let subtransactionIdx = 0;\n      do {\n        switch (\n          orphanTransferComparator(\n            transactions[transactionIdx],\n            subtransactions[subtransactionIdx],\n          )\n        ) {\n          case 0:\n            // The current list indexes are matching: the transaction and\n            // subtransaction are related (same date, amount and memo)\n            orphanTrxIdSubtrxIdMap.set(\n              transactions[transactionIdx].id,\n              entityIdMap.get(subtransactions[subtransactionIdx].id),\n            );\n            orphanTrxIdSubtrxIdMap.set(\n              subtransactions[subtransactionIdx].id,\n              entityIdMap.get(transactions[transactionIdx].id),\n            );\n            transactionIdx++;\n            subtransactionIdx++;\n            break;\n          case -1:\n            // The current list indexes are not matching:\n            // The current transaction is \"smaller\" than the current subtransaction\n            // (earlier date, smaller amount, memo value sorted before)\n            // So we advance to the next transaction and see if it match with\n            // the current subtransaction\n            transactionIdx++;\n            break;\n          case 1:\n            // Inverse of the previous case:\n            // The current subtransaction is \"smaller\" than the current transaction\n            // So we advance to the next subtransaction\n            subtransactionIdx++;\n            break;\n        }\n      } while (\n        transactionIdx < transactions.length &&\n        subtransactionIdx < subtransactions.length\n      );\n    }\n  });\n\n  await Promise.all(\n    [...transactionsGrouped.keys()].map(async accountId => {\n      const transactions = transactionsGrouped.get(accountId);\n\n      const toImport = transactions\n        .map(transaction => {\n          if (transaction.deleted) {\n            return null;\n          }\n\n          const subtransactions = subtransactionsGrouped.get(transaction.id);\n\n          // Add transaction\n          const newTransaction = {\n            id: entityIdMap.get(transaction.id),\n            account: entityIdMap.get(transaction.account_id),\n            date: transaction.date,\n            amount: amountFromYnab(transaction.amount),\n            category: entityIdMap.get(transaction.category_id) || null,\n            cleared: ['cleared', 'reconciled'].includes(transaction.cleared),\n            reconciled: transaction.cleared === 'reconciled',\n            notes: transaction.memo || null,\n            imported_id: transaction.import_id || null,\n            transfer_id:\n              entityIdMap.get(transaction.transfer_transaction_id) ||\n              orphanTrxIdSubtrxIdMap.get(transaction.id) ||\n              null,\n            subtransactions: subtransactions\n              ? subtransactions.map(subtrans => {\n                  return {\n                    id: entityIdMap.get(subtrans.id),\n                    amount: amountFromYnab(subtrans.amount),\n                    category: entityIdMap.get(subtrans.category_id) || null,\n                    notes: subtrans.memo,\n                    transfer_id:\n                      orphanTrxIdSubtrxIdMap.get(subtrans.id) || null,\n                    payee: null,\n                    imported_payee: null,\n                  };\n                })\n              : null,\n            payee: null,\n            imported_payee: null,\n          };\n\n          // Handle transactions and subtransactions payee\n          const transactionPayeeUpdate = (\n            trx: YNAB5.Transaction | YNAB5.Subtransaction,\n            newTrx,\n          ) => {\n            if (trx.transfer_account_id) {\n              const mappedTransferAccountId = entityIdMap.get(\n                trx.transfer_account_id,\n              );\n              newTrx.payee = payeeTransferAcctHashMap.get(\n                mappedTransferAccountId,\n              )?.id;\n            } else {\n              newTrx.payee = entityIdMap.get(trx.payee_id);\n              newTrx.imported_payee = data.payees.find(\n                p => !p.deleted && p.id === trx.payee_id,\n              )?.name;\n            }\n          };\n\n          transactionPayeeUpdate(transaction, newTransaction);\n          if (newTransaction.subtransactions) {\n            subtransactions.forEach(subtrans => {\n              const newSubtransaction = newTransaction.subtransactions.find(\n                newSubtrans => newSubtrans.id === entityIdMap.get(subtrans.id),\n              );\n              transactionPayeeUpdate(subtrans, newSubtransaction);\n            });\n          }\n\n          // Handle starting balances\n          if (\n            transaction.payee_id === startingPayeeYNAB &&\n            entityIdMap.get(transaction.category_id) === incomeCatId\n          ) {\n            newTransaction.category = startingBalanceCatId;\n            newTransaction.payee = null;\n          }\n          return newTransaction;\n        })\n        .filter(x => x);\n\n      await actual.addTransactions(entityIdMap.get(accountId), toImport, {\n        learnCategories: true,\n      });\n    }),\n  );\n}\n\nasync function importBudgets(\n  data: YNAB5.Budget,\n  entityIdMap: Map<string, string>,\n) {\n  // There should be info in the docs to deal with\n  // no credit card category and how YNAB and Actual\n  // handle differently the amount To be Budgeted\n  // i.e. Actual considers the cc debt while YNAB doesn't\n  //\n  // Also, there could be a way to set rollover using\n  // Deferred Income Subcat and Immediate Income Subcat\n\n  const budgets = sortByKey(data.months, 'month');\n\n  const internalCatIdYnab = findIdByName(\n    data.category_groups,\n    'Internal Master Category',\n  );\n  const creditcardCatIdYnab = findIdByName(\n    data.category_groups,\n    'Credit Card Payments',\n  );\n\n  await actual.batchBudgetUpdates(async () => {\n    for (const budget of budgets) {\n      const month = monthUtils.monthFromDate(budget.month);\n\n      await Promise.all(\n        budget.categories.map(async catBudget => {\n          const catId = entityIdMap.get(catBudget.id);\n          const amount = Math.round(catBudget.budgeted / 10);\n\n          if (\n            !catId ||\n            catBudget.category_group_id === internalCatIdYnab ||\n            catBudget.category_group_id === creditcardCatIdYnab\n          ) {\n            return;\n          }\n\n          await actual.setBudgetAmount(month, catId, amount);\n        }),\n      );\n    }\n  });\n}\n\n// Utils\n\nexport async function doImport(data: YNAB5.Budget) {\n  const entityIdMap = new Map<string, string>();\n\n  console.log('Importing Accounts...');\n  await importAccounts(data, entityIdMap);\n\n  console.log('Importing Categories...');\n  await importCategories(data, entityIdMap);\n\n  console.log('Importing Payees...');\n  await importPayees(data, entityIdMap);\n\n  console.log('Importing Transactions...');\n  await importTransactions(data, entityIdMap);\n\n  console.log('Importing Budgets...');\n  await importBudgets(data, entityIdMap);\n\n  console.log('Setting up...');\n}\n\nexport function parseFile(buffer: Buffer): YNAB5.Budget {\n  let data = JSON.parse(buffer.toString());\n  if (data.data) {\n    data = data.data;\n  }\n  if (data.budget) {\n    data = data.budget;\n  }\n\n  return data;\n}\n\nexport function getBudgetName(_filepath: string, data: YNAB5.Budget) {\n  return data.budget_name || data.name;\n}\n\nfunction equalsIgnoreCase(stringa: string, stringb: string): boolean {\n  return (\n    stringa.localeCompare(stringb, undefined, {\n      sensitivity: 'base',\n    }) === 0\n  );\n}\n\nfunction findByNameIgnoreCase<T extends { name: string }>(\n  categories: T[],\n  name: string,\n) {\n  return categories.find(cat => equalsIgnoreCase(cat.name, name));\n}\n\nfunction findIdByName<T extends { id: string; name: string }>(\n  categories: Array<T>,\n  name: string,\n) {\n  return findByNameIgnoreCase<T>(categories, name)?.id;\n}\n","// @ts-strict-ignore\nimport { handlers } from '../main';\n\nimport { importActual } from './actual';\nimport * as YNAB4 from './ynab4';\nimport * as YNAB5 from './ynab5';\n\nexport type ImportableBudgetType = 'ynab4' | 'ynab5' | 'actual';\n\ntype Importer = {\n  parseFile(buffer: Buffer): unknown;\n  getBudgetName(filepath: string, data: unknown): string | null;\n  doImport(data: unknown): Promise<void>;\n};\n\nconst importers: Record<Exclude<ImportableBudgetType, 'actual'>, Importer> = {\n  ynab4: YNAB4,\n  ynab5: YNAB5,\n};\n\nexport async function handleBudgetImport(\n  type: ImportableBudgetType,\n  filepath: string,\n  buffer: Buffer,\n) {\n  if (type === 'actual') {\n    return importActual(filepath, buffer);\n  }\n  const importer = importers[type];\n  try {\n    let data;\n    let budgetName: string;\n    try {\n      data = importer.parseFile(buffer);\n      budgetName = importer.getBudgetName(filepath, data);\n    } catch (e) {\n      console.error('failed to parse file', e);\n    }\n    if (!budgetName) {\n      return { error: 'not-' + type };\n    }\n\n    try {\n      await handlers['api/start-import']({ budgetName });\n    } catch (e) {\n      console.error('failed to start import', e);\n      return { error: 'unknown' };\n    }\n    await importer.doImport(data);\n  } catch (e) {\n    await handlers['api/abort-import']();\n    console.error('failed to run import', e);\n    return { error: 'unknown' };\n  }\n\n  await handlers['api/finish-import']();\n}\n","// @ts-strict-ignore\nimport { Timestamp } from '@actual-app/crdt';\n\nimport { Message, addSyncListener, applyMessages } from './index';\n\nfunction migrateParentIds(_oldValues, newValues) {\n  newValues.forEach((items, table) => {\n    if (table === 'transactions') {\n      const toApply: Message[] = [];\n\n      items.forEach(newValue => {\n        if (\n          newValue.isChild === 1 &&\n          newValue.parent_id == null &&\n          newValue.id.includes('/')\n        ) {\n          const parentId = newValue.id.split('/')[0];\n\n          toApply.push({\n            dataset: 'transactions',\n            row: newValue.id,\n            column: 'parent_id',\n            value: parentId,\n            timestamp: Timestamp.send(),\n          });\n        }\n      });\n\n      if (toApply.length > 0) {\n        applyMessages(toApply);\n      }\n    }\n  });\n}\n\nlet _unlisten = null;\nexport function listen() {\n  unlisten();\n  _unlisten = addSyncListener(migrateParentIds);\n}\n\nexport function unlisten() {\n  if (_unlisten) {\n    _unlisten();\n    _unlisten = null;\n  }\n}\n","export default async function runMigration(db) {\n  function getValue(node) {\n    return node.expr != null ? node.expr : node.cachedValue;\n  }\n\n  db.execQuery(`\nCREATE TABLE zero_budget_months\n  (id TEXT PRIMARY KEY,\n   buffered INTEGER DEFAULT 0);\n\nCREATE TABLE zero_budgets\n  (id TEXT PRIMARY KEY,\n   month INTEGER,\n   category TEXT,\n   amount INTEGER DEFAULT 0,\n   carryover INTEGER DEFAULT 0);\n\nCREATE TABLE reflect_budgets\n  (id TEXT PRIMARY KEY,\n   month INTEGER,\n   category TEXT,\n   amount INTEGER DEFAULT 0,\n   carryover INTEGER DEFAULT 0);\n\nCREATE TABLE notes\n  (id TEXT PRIMARY KEY,\n   note TEXT);\n\nCREATE TABLE kvcache (key TEXT PRIMARY KEY, value TEXT);\nCREATE TABLE kvcache_key (id INTEGER PRIMARY KEY, key REAL);\n`);\n\n  // Migrate budget amounts and carryover\n  const budget = db.runQuery(\n    `SELECT * FROM spreadsheet_cells WHERE name LIKE 'budget%!budget-%'`,\n    [],\n    true,\n  );\n  db.transaction(() => {\n    budget.forEach(monthBudget => {\n      const match = monthBudget.name.match(\n        /^(budget-report|budget)(\\d+)!budget-(.+)$/,\n      );\n      if (match == null) {\n        console.log('Warning: invalid budget month name', monthBudget.name);\n        return;\n      }\n\n      const type = match[1];\n      const month = match[2].slice(0, 4) + '-' + match[2].slice(4);\n      const dbmonth = parseInt(match[2]);\n      const cat = match[3];\n\n      let amount = parseInt(getValue(monthBudget));\n      if (isNaN(amount)) {\n        amount = 0;\n      }\n\n      const sheetName = monthBudget.name.split('!')[0];\n      const carryover = db.runQuery(\n        'SELECT * FROM spreadsheet_cells WHERE name = ?',\n        [`${sheetName}!carryover-${cat}`],\n        true,\n      );\n\n      const table =\n        type === 'budget-report' ? 'reflect_budgets' : 'zero_budgets';\n      db.runQuery(\n        `INSERT INTO ${table} (id, month, category, amount, carryover) VALUES (?, ?, ?, ?, ?)`,\n        [\n          `${month}-${cat}`,\n          dbmonth,\n          cat,\n          amount,\n          carryover.length > 0 && getValue(carryover[0]) === 'true' ? 1 : 0,\n        ],\n      );\n    });\n  });\n\n  // Migrate buffers\n  const buffers = db.runQuery(\n    `SELECT * FROM spreadsheet_cells WHERE name LIKE 'budget%!buffered'`,\n    [],\n    true,\n  );\n  db.transaction(() => {\n    buffers.forEach(buffer => {\n      const match = buffer.name.match(/^budget(\\d+)!buffered$/);\n      if (match) {\n        const month = match[1].slice(0, 4) + '-' + match[1].slice(4);\n        let amount = parseInt(getValue(buffer));\n        if (isNaN(amount)) {\n          amount = 0;\n        }\n\n        db.runQuery(\n          `INSERT INTO zero_budget_months (id, buffered) VALUES (?, ?)`,\n          [month, amount],\n        );\n      }\n    });\n  });\n\n  // Migrate notes\n  const notes = db.runQuery(\n    `SELECT * FROM spreadsheet_cells WHERE name LIKE 'notes!%'`,\n    [],\n    true,\n  );\n\n  const parseNote = str => {\n    try {\n      const value = JSON.parse(str);\n      return value && value !== '' ? value : null;\n    } catch (e) {\n      return null;\n    }\n  };\n\n  db.transaction(() => {\n    notes.forEach(note => {\n      const parsed = parseNote(getValue(note));\n      if (parsed) {\n        const [, id] = note.name.split('!');\n        db.runQuery(`INSERT INTO notes (id, note) VALUES (?, ?)`, [id, parsed]);\n      }\n    });\n  });\n\n  db.execQuery(`\n    DROP TABLE spreadsheet_cells;\n    ANALYZE;\n    VACUUM;\n  `);\n}\n","export default async function runMigration(db) {\n  const categories = await db.runQuery(\n    'SELECT id FROM categories WHERE tombstone = 0',\n    [],\n    true,\n  );\n\n  const customReports = await db.runQuery(\n    'SELECT id, selected_categories, conditions FROM custom_reports WHERE tombstone = 0 AND selected_categories IS NOT NULL',\n    [],\n    true,\n  );\n\n  // Move all `selected_categories` to `conditions` if possible.. otherwise skip\n  for (const report of customReports) {\n    const conditions = report.conditions ? JSON.parse(report.conditions) : [];\n    const selectedCategories = report.selected_categories\n      ? JSON.parse(report.selected_categories)\n      : [];\n    const selectedCategoryIds = selectedCategories.map(({ id }) => id);\n\n    const areAllCategoriesSelected = !categories.find(\n      ({ id }) => !selectedCategoryIds.includes(id),\n    );\n\n    // Do nothing if all categories are selected.. we don't need to add a new condition for that\n    if (areAllCategoriesSelected) {\n      continue;\n    }\n\n    // If `conditions` already has a \"category\" filter - skip the entry\n    if (conditions.find(({ field }) => field === 'category')) {\n      continue;\n    }\n\n    // Append a new condition with the selected category IDs\n    await db.runQuery('UPDATE custom_reports SET conditions = ? WHERE id = ?', [\n      JSON.stringify([\n        ...conditions,\n        {\n          field: 'category',\n          op: 'oneOf',\n          value: selectedCategoryIds,\n          type: 'id',\n        },\n      ]),\n      report.id,\n    ]);\n  }\n\n  // Remove all the `selectedCategories` values - we don't need them anymore\n  await db.runQuery(\n    'UPDATE custom_reports SET selected_categories = NULL WHERE tombstone = 0',\n  );\n}\n","import { v4 as uuidv4 } from 'uuid';\n\n/* eslint-disable actual/typography */\nexport default async function runMigration(db) {\n  db.transaction(() => {\n    db.execQuery(`\n      CREATE TABLE dashboard\n        (id TEXT PRIMARY KEY,\n         type TEXT,\n         width INTEGER,\n         height INTEGER,\n         x INTEGER,\n         y INTEGER,\n         meta TEXT,\n         tombstone INTEGER DEFAULT 0);\n\n      INSERT INTO dashboard (id, type, width, height, x, y)\n      VALUES\n        ('${uuidv4()}','net-worth-card', 8, 2, 0, 0),\n        ('${uuidv4()}', 'cash-flow-card', 4, 2, 8, 0),\n        ('${uuidv4()}', 'spending-card', 4, 2, 0, 2);\n    `);\n\n    // Add custom reports to the dashboard\n    const reports = db.runQuery(\n      'SELECT id FROM custom_reports WHERE tombstone = 0 ORDER BY name COLLATE NOCASE ASC',\n      [],\n      true,\n    );\n    reports.forEach((report, id) => {\n      db.runQuery(\n        `INSERT INTO dashboard (id, type, width, height, x, y, meta) VALUES (?, ?, ?, ?, ?, ?, ?)`,\n        [\n          uuidv4(),\n          'custom-report',\n          4,\n          2,\n          (id * 4) % 12,\n          2 + Math.floor(id / 3) * 2,\n          JSON.stringify({ id: report.id }),\n        ],\n      );\n    });\n  });\n}\n","const SYNCED_PREF_KEYS = [\n  'firstDayOfWeekIdx',\n  'dateFormat',\n  'numberFormat',\n  'hideFraction',\n  'isPrivacyEnabled',\n  /^show-extra-balances-/,\n  /^hide-cleared-/,\n  /^parse-date-/,\n  /^csv-mappings-/,\n  /^csv-delimiter-/,\n  /^csv-has-header-/,\n  /^ofx-fallback-missing-payee-/,\n  /^flip-amount-/,\n  'budgetType',\n  /^flags\\./,\n];\n\nexport default async function runMigration(db, { fs, fileId }) {\n  await db.execQuery(`\n    CREATE TABLE preferences\n       (id TEXT PRIMARY KEY,\n        value TEXT);\n  `);\n\n  try {\n    const budgetDir = fs.getBudgetDir(fileId);\n    const fullpath = fs.join(budgetDir, 'metadata.json');\n\n    const prefs = JSON.parse(await fs.readFile(fullpath));\n\n    if (typeof prefs !== 'object') {\n      return;\n    }\n\n    await Promise.all(\n      Object.keys(prefs).map(async key => {\n        // Check if the current key is of synced-keys type\n        if (\n          !SYNCED_PREF_KEYS.find(keyMatcher =>\n            keyMatcher instanceof RegExp\n              ? keyMatcher.test(key)\n              : keyMatcher === key,\n          )\n        ) {\n          return;\n        }\n\n        // insert the synced prefs in the new table\n        await db.runQuery('INSERT INTO preferences (id, value) VALUES (?, ?)', [\n          key,\n          String(prefs[key]),\n        ]);\n      }),\n    );\n  } catch (e) {\n    // Do nothing\n  }\n}\n","// @ts-strict-ignore\n// We have to bundle in JS migrations manually to avoid having to `eval`\n// them which doesn't play well with CSP. There isn't great, and eventually\n// we can remove this migration.\nimport { Database } from '@jlongster/sql.js';\n\nimport m1632571489012 from '../../../migrations/1632571489012_remove_cache';\nimport m1722717601000 from '../../../migrations/1722717601000_reports_move_selected_categories';\nimport m1722804019000 from '../../../migrations/1722804019000_create_dashboard_table';\nimport m1723665565000 from '../../../migrations/1723665565000_prefs';\nimport * as fs from '../../platform/server/fs';\nimport * as sqlite from '../../platform/server/sqlite';\nimport * as prefs from '../prefs';\n\nlet MIGRATIONS_DIR = fs.migrationsPath;\n\nconst javascriptMigrations = {\n  1632571489012: m1632571489012,\n  1722717601000: m1722717601000,\n  1722804019000: m1722804019000,\n  1723665565000: m1723665565000,\n};\n\nexport async function withMigrationsDir(\n  dir: string,\n  func: () => Promise<void>,\n): Promise<void> {\n  const oldDir = MIGRATIONS_DIR;\n  MIGRATIONS_DIR = dir;\n  await func();\n  MIGRATIONS_DIR = oldDir;\n}\n\nexport function getMigrationsDir(): string {\n  return MIGRATIONS_DIR;\n}\n\nfunction getMigrationId(name: string): number {\n  return parseInt(name.match(/^(\\d)+/)[0]);\n}\n\nexport function getUpMigration(id, names) {\n  for (const m of names) {\n    if (getMigrationId(m) === id) {\n      return m;\n    }\n  }\n}\n\nasync function patchBadMigrations(db: Database) {\n  const badFiltersMigration = 1685375406832;\n  const newFiltersMigration = 1688749527273;\n  const appliedIds = await getAppliedMigrations(db);\n  if (appliedIds.includes(badFiltersMigration)) {\n    await sqlite.runQuery(db, 'DELETE FROM __migrations__ WHERE id = ?', [\n      badFiltersMigration,\n    ]);\n    await sqlite.runQuery(db, 'INSERT INTO __migrations__ (id) VALUES (?)', [\n      newFiltersMigration,\n    ]);\n  }\n}\n\nexport async function getAppliedMigrations(db: Database): Promise<number[]> {\n  const rows = await sqlite.runQuery<{ id: number }>(\n    db,\n    'SELECT * FROM __migrations__ ORDER BY id ASC',\n    [],\n    true,\n  );\n  return rows.map(row => row.id);\n}\n\nexport async function getMigrationList(\n  migrationsDir: string,\n): Promise<string[]> {\n  const files = await fs.listDir(migrationsDir);\n  return files\n    .filter(name => name.match(/(\\.sql|\\.js)$/))\n    .sort((m1, m2) => {\n      const id1 = getMigrationId(m1);\n      const id2 = getMigrationId(m2);\n      if (id1 < id2) {\n        return -1;\n      } else if (id1 > id2) {\n        return 1;\n      }\n      return 0;\n    });\n}\n\nexport function getPending(appliedIds: number[], all: string[]): string[] {\n  return all.filter(name => {\n    const id = getMigrationId(name);\n    return appliedIds.indexOf(id) === -1;\n  });\n}\n\nasync function applyJavaScript(db, id) {\n  const dbInterface = {\n    runQuery: (query, params, fetchAll) =>\n      sqlite.runQuery(db, query, params, fetchAll),\n    execQuery: query => sqlite.execQuery(db, query),\n    transaction: func => sqlite.transaction(db, func),\n  };\n\n  if (javascriptMigrations[id] == null) {\n    throw new Error('Could not find JS migration code to run for ' + id);\n  }\n\n  const run = javascriptMigrations[id];\n  return run(dbInterface, {\n    fs,\n    fileId: prefs.getPrefs()?.id,\n  });\n}\n\nasync function applySql(db, sql) {\n  try {\n    await sqlite.execQuery(db, sql);\n  } catch (e) {\n    console.log('Error applying sql:', sql);\n    throw e;\n  }\n}\n\nexport async function applyMigration(\n  db: Database,\n  name: string,\n  migrationsDir: string,\n): Promise<void> {\n  const code = await fs.readFile(fs.join(migrationsDir, name));\n  if (name.match(/\\.js$/)) {\n    await applyJavaScript(db, getMigrationId(name));\n  } else {\n    await applySql(db, code);\n  }\n  await sqlite.runQuery(db, 'INSERT INTO __migrations__ (id) VALUES (?)', [\n    getMigrationId(name),\n  ]);\n}\n\nfunction checkDatabaseValidity(\n  appliedIds: number[],\n  available: string[],\n): void {\n  for (let i = 0; i < appliedIds.length; i++) {\n    if (\n      i >= available.length ||\n      appliedIds[i] !== getMigrationId(available[i])\n    ) {\n      console.error('Database is out of sync with migrations:', {\n        appliedIds,\n        available,\n      });\n      throw new Error('out-of-sync-migrations');\n    }\n  }\n}\n\nexport async function migrate(db: Database): Promise<string[]> {\n  await patchBadMigrations(db);\n  const appliedIds = await getAppliedMigrations(db);\n  const available = await getMigrationList(MIGRATIONS_DIR);\n\n  checkDatabaseValidity(appliedIds, available);\n\n  const pending = getPending(appliedIds, available);\n\n  for (const migration of pending) {\n    await applyMigration(db, migration, MIGRATIONS_DIR);\n  }\n\n  return pending;\n}\n","// @ts-strict-ignore\nimport md5 from 'md5';\n\nimport { schema, schemaConfig, makeViews } from './aql';\nimport * as db from './db';\nimport * as migrations from './migrate/migrations';\n\n// Managing the init/update process\n\nasync function runMigrations() {\n  await migrations.migrate(db.getDatabase());\n}\n\nasync function updateViews() {\n  const hashKey = 'view-hash';\n  const row = await db.first<{ value: string }>(\n    'SELECT value FROM __meta__ WHERE key = ?',\n    [hashKey],\n  );\n  const { value: hash } = row || {};\n\n  const views = makeViews(schema, schemaConfig);\n  const currentHash = md5(views);\n\n  if (hash !== currentHash) {\n    await db.execQuery(views);\n    await db.runQuery(\n      'INSERT OR REPLACE INTO __meta__ (key, value) VALUES (?, ?)',\n      [hashKey, currentHash],\n    );\n  }\n}\n\nexport async function updateVersion() {\n  await runMigrations();\n  await updateViews();\n}\n","import { v4 as uuidv4 } from 'uuid';\n\nimport * as fs from '../../platform/server/fs';\nimport { handlers } from '../main';\n\nexport async function uniqueBudgetName(\n  initialName: string = 'My Finances',\n): Promise<string> {\n  const budgets = await handlers['get-budgets']();\n  let idx = 1;\n\n  // If there is a conflict, keep appending an index until there is no\n  // conflict and we have a unique name\n  let newName = initialName;\n  while (budgets.find(file => file.name === newName)) {\n    newName = `${initialName} ${idx}`;\n    idx++;\n  }\n\n  return newName;\n}\n\nexport async function validateBudgetName(\n  name: string,\n): Promise<{ valid: boolean; message?: string }> {\n  const trimmedName = name.trim();\n  const uniqueName = await uniqueBudgetName(trimmedName);\n  let message: string | null = null;\n\n  if (trimmedName === '') message = 'Budget name cannot be blank';\n  if (trimmedName.length > 100) {\n    message = 'Budget name is too long (max length 100)';\n  }\n  if (uniqueName !== trimmedName) {\n    message = `“${name}” already exists, try “${uniqueName}” instead`;\n  }\n\n  return message ? { valid: false, message } : { valid: true };\n}\n\nexport async function idFromBudgetName(name: string): Promise<string> {\n  let id = name.replace(/( |[^A-Za-z0-9])/g, '-') + '-' + uuidv4().slice(0, 7);\n\n  // Make sure the id is unique. There's a chance one could already\n  // exist (although very unlikely now that we append unique\n  // characters onto the id)\n  let index = 0;\n\n  let budgetDir = fs.getBudgetDir(id);\n  while (await fs.exists(budgetDir)) {\n    index++;\n    budgetDir = fs.getBudgetDir(id + index.toString());\n  }\n\n  // If a suffix was added, update the id\n  if (index > 0) {\n    id = id + index.toString();\n  }\n\n  return id;\n}\n","// @ts-strict-ignore\nimport * as dateFns from 'date-fns';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as connection from '../../platform/server/connection';\nimport * as fs from '../../platform/server/fs';\nimport * as sqlite from '../../platform/server/sqlite';\nimport * as monthUtils from '../../shared/months';\nimport * as cloudStorage from '../cloud-storage';\nimport * as prefs from '../prefs';\n\n// A special backup that represents the latest version of the db that\n// can be reverted to after loading a backup\nconst LATEST_BACKUP_FILENAME = 'db.latest.sqlite';\nlet serviceInterval = null;\n\nexport type Backup = { id: string; date: string } | LatestBackup;\ntype LatestBackup = { id: string; date: null; isLatest: true };\ntype BackupWithDate = { id: string; date: Date };\n\nasync function getBackups(id: string): Promise<BackupWithDate[]> {\n  const budgetDir = fs.getBudgetDir(id);\n  const backupDir = fs.join(budgetDir, 'backups');\n\n  let paths = [];\n  if (await fs.exists(backupDir)) {\n    paths = await fs.listDir(backupDir);\n    paths = paths.filter(file => file.match(/\\.sqlite$/));\n  }\n\n  const backups = await Promise.all(\n    paths.map(async path => {\n      const mtime = await fs.getModifiedTime(fs.join(backupDir, path));\n      return {\n        id: path,\n        date: new Date(mtime),\n      };\n    }),\n  );\n\n  backups.sort((b1, b2) => {\n    if (b1.date < b2.date) {\n      return 1;\n    } else if (b1.date > b2.date) {\n      return -1;\n    }\n    return 0;\n  });\n\n  return backups;\n}\n\nasync function getLatestBackup(id: string): Promise<LatestBackup | null> {\n  const budgetDir = fs.getBudgetDir(id);\n  if (await fs.exists(fs.join(budgetDir, LATEST_BACKUP_FILENAME))) {\n    return {\n      id: LATEST_BACKUP_FILENAME,\n      date: null,\n      isLatest: true,\n    };\n  }\n  return null;\n}\n\nexport async function getAvailableBackups(id: string): Promise<Backup[]> {\n  const backups = await getBackups(id);\n\n  const latestBackup = await getLatestBackup(id);\n  if (latestBackup) {\n    backups.unshift(latestBackup);\n  }\n\n  return backups.map(backup => ({\n    ...backup,\n    date: backup.date ? dateFns.format(backup.date, 'yyyy-MM-dd H:mm') : null,\n  }));\n}\n\nexport async function updateBackups(backups) {\n  const byDay = backups.reduce((groups, backup) => {\n    const day = dateFns.format(backup.date, 'yyyy-MM-dd');\n    groups[day] = groups[day] || [];\n    groups[day].push(backup);\n    return groups;\n  }, {});\n\n  const removed = [];\n  for (const day of Object.keys(byDay)) {\n    const dayBackups = byDay[day];\n    const isToday = day === monthUtils.currentDay();\n    // Allow 3 backups of the current day (so fine-grained edits are\n    // kept around). Otherwise only keep around one backup per day.\n    // And only keep a total of 10 backups.\n    for (const backup of dayBackups.slice(isToday ? 3 : 1)) {\n      removed.push(backup.id);\n    }\n  }\n\n  // Get the list of remaining backups and only keep the latest 10\n  const currentBackups = backups.filter(backup => !removed.includes(backup.id));\n  return removed.concat(currentBackups.slice(10).map(backup => backup.id));\n}\n\nexport async function makeBackup(id: string) {\n  const budgetDir = fs.getBudgetDir(id);\n\n  // When making a backup, we no longer consider the user to be\n  // viewing any backups. If there exists a \"latest backup\" we should\n  // delete it and consider whatever is current as the latest\n  if (await fs.exists(fs.join(budgetDir, LATEST_BACKUP_FILENAME))) {\n    await fs.removeFile(fs.join(fs.getBudgetDir(id), LATEST_BACKUP_FILENAME));\n  }\n\n  const backupId = `${uuidv4()}.sqlite`;\n  const backupPath = fs.join(budgetDir, 'backups', backupId);\n\n  if (!(await fs.exists(fs.join(budgetDir, 'backups')))) {\n    await fs.mkdir(fs.join(budgetDir, 'backups'));\n  }\n\n  await fs.copyFile(fs.join(budgetDir, 'db.sqlite'), backupPath);\n\n  // Remove all the messages from the backup\n  const db = sqlite.openDatabase(backupPath);\n  await sqlite.runQuery(db, 'DELETE FROM messages_crdt');\n  await sqlite.runQuery(db, 'DELETE FROM messages_clock');\n  sqlite.closeDatabase(db);\n\n  const toRemove = await updateBackups(await getBackups(id));\n  for (const id of toRemove) {\n    await fs.removeFile(fs.join(budgetDir, 'backups', id));\n  }\n\n  connection.send('backups-updated', await getAvailableBackups(id));\n}\n\nexport async function loadBackup(id: string, backupId: string) {\n  const budgetDir = fs.getBudgetDir(id);\n\n  if (!(await fs.exists(fs.join(budgetDir, LATEST_BACKUP_FILENAME)))) {\n    // If this is the first time we're loading a backup, save the\n    // current version so the user can easily revert back to it\n    await fs.copyFile(\n      fs.join(budgetDir, 'db.sqlite'),\n      fs.join(budgetDir, LATEST_BACKUP_FILENAME),\n    );\n\n    await fs.copyFile(\n      fs.join(budgetDir, 'metadata.json'),\n      fs.join(budgetDir, 'metadata.latest.json'),\n    );\n\n    // Restart the backup service to make sure the user has the full\n    // amount of time to figure out which one they want\n    stopBackupService();\n    startBackupService(id);\n\n    await prefs.loadPrefs(id);\n  }\n\n  if (backupId === LATEST_BACKUP_FILENAME) {\n    console.log('Reverting backup');\n\n    // If reverting back to the latest, copy and delete the latest\n    // backup\n    await fs.copyFile(\n      fs.join(budgetDir, LATEST_BACKUP_FILENAME),\n      fs.join(budgetDir, 'db.sqlite'),\n    );\n    await fs.copyFile(\n      fs.join(budgetDir, 'metadata.latest.json'),\n      fs.join(budgetDir, 'metadata.json'),\n    );\n    await fs.removeFile(fs.join(budgetDir, LATEST_BACKUP_FILENAME));\n    await fs.removeFile(fs.join(budgetDir, 'metadata.latest.json'));\n\n    // Re-upload the new file\n    try {\n      await cloudStorage.upload();\n    } catch (e) {}\n    prefs.unloadPrefs();\n  } else {\n    console.log('Loading backup', backupId);\n\n    // This function is only ever called when a budget isn't loaded,\n    // so it's safe to load our prefs in. We need to forget about any\n    // syncing data if we are loading a backup (the current sync data\n    // will be restored if the user reverts to the original version)\n    await prefs.loadPrefs(id);\n    await prefs.savePrefs({\n      groupId: null,\n      lastSyncedTimestamp: null,\n      lastUploaded: null,\n    });\n\n    // Re-upload the new file\n    try {\n      await cloudStorage.upload();\n    } catch (e) {}\n\n    prefs.unloadPrefs();\n\n    await fs.copyFile(\n      fs.join(budgetDir, 'backups', backupId),\n      fs.join(budgetDir, 'db.sqlite'),\n    );\n  }\n}\n\nexport function startBackupService(id: string) {\n  if (serviceInterval) {\n    clearInterval(serviceInterval);\n  }\n\n  // Make a backup every 15 minutes\n  serviceInterval = setInterval(\n    async () => {\n      console.log('Making backup');\n      await makeBackup(id);\n    },\n    1000 * 60 * 15,\n  );\n}\n\nexport function stopBackupService() {\n  clearInterval(serviceInterval);\n  serviceInterval = null;\n}\n","// @ts-strict-ignore\nimport * as CRDT from '@actual-app/crdt';\n\nimport { createTestBudget } from '../../mocks/budget';\nimport { captureException, captureBreadcrumb } from '../../platform/exceptions';\nimport * as asyncStorage from '../../platform/server/asyncStorage';\nimport * as connection from '../../platform/server/connection';\nimport * as fs from '../../platform/server/fs';\nimport { logger } from '../../platform/server/log';\nimport * as Platform from '../../shared/platform';\nimport { Budget } from '../../types/budget';\nimport { createApp } from '../app';\nimport * as budget from '../budget/base';\nimport * as cloudStorage from '../cloud-storage';\nimport * as db from '../db';\nimport * as mappings from '../db/mappings';\nimport { handleBudgetImport, ImportableBudgetType } from '../importers';\nimport { app as mainApp } from '../main-app';\nimport { mutator } from '../mutators';\nimport * as prefs from '../prefs';\nimport { getServer } from '../server-config';\nimport * as sheet from '../sheet';\nimport { setSyncingMode, initialFullSync, clearFullSyncTimeout } from '../sync';\nimport * as syncMigrations from '../sync/migrate';\nimport * as rules from '../transactions/transaction-rules';\nimport { clearUndo } from '../undo';\nimport { updateVersion } from '../update';\nimport {\n  idFromBudgetName,\n  uniqueBudgetName,\n  validateBudgetName,\n} from '../util/budget-name';\n\nimport {\n  getAvailableBackups,\n  makeBackup as _makeBackup,\n  loadBackup as _loadBackup,\n  startBackupService,\n  stopBackupService,\n} from './backups';\n\nconst DEMO_BUDGET_ID = '_demo-budget';\nconst TEST_BUDGET_ID = '_test-budget';\n\nexport type BudgetFileHandlers = {\n  'validate-budget-name': typeof handleValidateBudgetName;\n  'unique-budget-name': typeof handleUniqueBudgetName;\n  'get-budgets': typeof getBudgets;\n  'get-remote-files': typeof getRemoteFiles;\n  'get-user-file-info': typeof getUserFileInfo;\n  'reset-budget-cache': typeof resetBudgetCache;\n  'upload-budget': typeof uploadBudget;\n  'download-budget': typeof downloadBudget;\n  'sync-budget': typeof syncBudget;\n  'load-budget': typeof loadBudget;\n  'create-demo-budget': typeof createDemoBudget;\n  'close-budget': typeof closeBudget;\n  'delete-budget': typeof deleteBudget;\n  'duplicate-budget': typeof duplicateBudget;\n  'create-budget': typeof createBudget;\n  'import-budget': typeof importBudget;\n  'export-budget': typeof exportBudget;\n  'upload-file-web': typeof uploadFileWeb;\n  'backups-get': typeof getBackups;\n  'backup-load': typeof loadBackup;\n  'backup-make': typeof makeBackup;\n  'get-last-opened-backup': typeof getLastOpenedBackup;\n};\n\nexport const app = createApp<BudgetFileHandlers>();\napp.method('validate-budget-name', handleValidateBudgetName);\napp.method('unique-budget-name', handleUniqueBudgetName);\napp.method('get-budgets', getBudgets);\napp.method('get-remote-files', getRemoteFiles);\napp.method('get-user-file-info', getUserFileInfo);\napp.method('reset-budget-cache', mutator(resetBudgetCache));\napp.method('upload-budget', uploadBudget);\napp.method('download-budget', downloadBudget);\napp.method('sync-budget', syncBudget);\napp.method('load-budget', loadBudget);\napp.method('create-demo-budget', createDemoBudget);\napp.method('close-budget', closeBudget);\napp.method('delete-budget', deleteBudget);\napp.method('duplicate-budget', duplicateBudget);\napp.method('create-budget', createBudget);\napp.method('import-budget', importBudget);\napp.method('export-budget', exportBudget);\napp.method('upload-file-web', uploadFileWeb);\napp.method('backups-get', getBackups);\napp.method('backup-load', loadBackup);\napp.method('backup-make', makeBackup);\napp.method('get-last-opened-backup', getLastOpenedBackup);\n\nasync function handleValidateBudgetName({ name }: { name: string }) {\n  return validateBudgetName(name);\n}\n\nasync function handleUniqueBudgetName({ name }: { name: string }) {\n  return uniqueBudgetName(name);\n}\n\nasync function getBudgets() {\n  const paths = await fs.listDir(fs.getDocumentDir());\n  const budgets: (Budget | null)[] = await Promise.all(\n    paths.map(async name => {\n      const prefsPath = fs.join(fs.getDocumentDir(), name, 'metadata.json');\n      if (await fs.exists(prefsPath)) {\n        let prefs;\n        try {\n          prefs = JSON.parse(await fs.readFile(prefsPath));\n        } catch (e) {\n          console.log('Error parsing metadata:', e.stack);\n          return null;\n        }\n\n        // We treat the directory name as the canonical id so that if\n        // the user moves it around/renames/etc, nothing breaks. The\n        // id is stored in prefs just for convenience (and the prefs\n        // will always update to the latest given id)\n        if (name !== DEMO_BUDGET_ID) {\n          return {\n            id: name,\n            ...(prefs.cloudFileId ? { cloudFileId: prefs.cloudFileId } : {}),\n            ...(prefs.encryptKeyId ? { encryptKeyId: prefs.encryptKeyId } : {}),\n            ...(prefs.groupId ? { groupId: prefs.groupId } : {}),\n            ...(prefs.owner ? { owner: prefs.owner } : {}),\n            name: prefs.budgetName || '(no name)',\n          } satisfies Budget;\n        }\n      }\n\n      return null;\n    }),\n  );\n\n  return budgets.filter(Boolean) as Budget[];\n}\n\nasync function getRemoteFiles() {\n  return cloudStorage.listRemoteFiles();\n}\n\nasync function getUserFileInfo(fileId: string) {\n  return cloudStorage.getRemoteFile(fileId);\n}\n\nasync function resetBudgetCache() {\n  // Recomputing everything will update the cache\n  await sheet.loadUserBudgets(db);\n  sheet.get().recomputeAll();\n  await sheet.waitOnSpreadsheet();\n}\n\nasync function uploadBudget({ id }: { id?: Budget['id'] } = {}): Promise<{\n  error?: { reason: string };\n}> {\n  if (id) {\n    if (prefs.getPrefs()) {\n      throw new Error('upload-budget: id given but prefs already loaded');\n    }\n\n    await prefs.loadPrefs(id);\n  }\n\n  try {\n    await cloudStorage.upload();\n  } catch (e) {\n    console.log(e);\n    if (e.type === 'FileUploadError') {\n      return { error: e };\n    }\n    captureException(e);\n    return { error: { reason: 'internal' } };\n  } finally {\n    if (id) {\n      prefs.unloadPrefs();\n    }\n  }\n\n  return {};\n}\n\nasync function downloadBudget({\n  cloudFileId,\n}: {\n  cloudFileId: Budget['cloudFileId'];\n}): Promise<{ id?: Budget['id']; error?: { reason: string; meta?: unknown } }> {\n  let result;\n  try {\n    result = await cloudStorage.download(cloudFileId);\n  } catch (e) {\n    if (e.type === 'FileDownloadError') {\n      if (e.reason === 'file-exists' && e.meta.id) {\n        await prefs.loadPrefs(e.meta.id);\n        const name = prefs.getPrefs().budgetName;\n        prefs.unloadPrefs();\n\n        e.meta = { ...e.meta, name };\n      }\n\n      return { error: e };\n    } else {\n      captureException(e);\n      return { error: { reason: 'internal' } };\n    }\n  }\n\n  const id = result.id;\n  await loadBudget({ id });\n  result = await syncBudget();\n\n  if (result.error) {\n    return result;\n  }\n  return { id };\n}\n\n// open and sync, but don’t close\nasync function syncBudget() {\n  setSyncingMode('enabled');\n  const result = await initialFullSync();\n\n  return result;\n}\n\nasync function loadBudget({ id }: { id: Budget['id'] }) {\n  const currentPrefs = prefs.getPrefs();\n\n  if (currentPrefs) {\n    if (currentPrefs.id === id) {\n      // If it's already loaded, do nothing\n      return {};\n    } else {\n      // Otherwise, close the currently loaded budget\n      await closeBudget();\n    }\n  }\n\n  const res = await _loadBudget(id);\n\n  return res;\n}\n\nasync function createDemoBudget() {\n  // Make sure the read only flag isn't leftover (normally it's\n  // reset when signing in, but you don't have to sign in for the\n  // demo budget)\n  await asyncStorage.setItem('readOnly', '');\n\n  return createBudget({\n    budgetName: 'Demo Budget',\n    testMode: true,\n    testBudgetId: DEMO_BUDGET_ID,\n  });\n}\n\nasync function closeBudget() {\n  captureBreadcrumb({ message: 'Closing budget' });\n\n  // The spreadsheet may be running, wait for it to complete\n  await sheet.waitOnSpreadsheet();\n  sheet.unloadSpreadsheet();\n\n  clearFullSyncTimeout();\n  await app.stopServices();\n\n  await db.closeDatabase();\n\n  try {\n    await asyncStorage.setItem('lastBudget', '');\n  } catch (e) {\n    // This might fail if we are shutting down after failing to load a\n    // budget. We want to unload whatever has already been loaded but\n    // be resilient to anything failing\n  }\n\n  prefs.unloadPrefs();\n  await stopBackupService();\n  return 'ok';\n}\n\nasync function deleteBudget({\n  id,\n  cloudFileId,\n}: {\n  id?: Budget['id'];\n  cloudFileId?: Budget['cloudFileId'];\n}) {\n  // If it's a cloud file, you can delete it from the server by\n  // passing its cloud id\n  if (cloudFileId) {\n    await cloudStorage.removeFile(cloudFileId).catch(() => {});\n  }\n\n  // If a local file exists, you can delete it by passing its local id\n  if (id) {\n    // opening and then closing the database is a hack to be able to delete\n    // the budget file if it hasn't been opened yet.  This needs a better\n    // way, but works for now.\n    try {\n      await db.openDatabase(id);\n      await db.closeDatabase();\n      const budgetDir = fs.getBudgetDir(id);\n      await fs.removeDirRecursively(budgetDir);\n    } catch (e) {\n      return 'fail';\n    }\n  }\n\n  return 'ok';\n}\n\nasync function duplicateBudget({\n  id,\n  newName,\n  cloudSync,\n  open,\n}: {\n  id: Budget['id'];\n  newName: Budget['name'];\n  cloudSync: boolean;\n  open: 'none' | 'original' | 'copy';\n}): Promise<Budget['id']> {\n  const { valid, message } = await validateBudgetName(newName);\n  if (!valid) throw new Error(message);\n\n  const budgetDir = fs.getBudgetDir(id);\n\n  const newId = await idFromBudgetName(newName);\n\n  // copy metadata from current budget\n  // replace id with new budget id and budgetName with new budget name\n  const metadataText = await fs.readFile(fs.join(budgetDir, 'metadata.json'));\n  const metadata = JSON.parse(metadataText);\n  metadata.id = newId;\n  metadata.budgetName = newName;\n  [\n    'cloudFileId',\n    'groupId',\n    'lastUploaded',\n    'encryptKeyId',\n    'lastSyncedTimestamp',\n  ].forEach(item => {\n    if (metadata[item]) delete metadata[item];\n  });\n\n  try {\n    const newBudgetDir = fs.getBudgetDir(newId);\n    await fs.mkdir(newBudgetDir);\n\n    // write metadata for new budget\n    await fs.writeFile(\n      fs.join(newBudgetDir, 'metadata.json'),\n      JSON.stringify(metadata),\n    );\n\n    await fs.copyFile(\n      fs.join(budgetDir, 'db.sqlite'),\n      fs.join(newBudgetDir, 'db.sqlite'),\n    );\n  } catch (error) {\n    // Clean up any partially created files\n    try {\n      const newBudgetDir = fs.getBudgetDir(newId);\n      if (await fs.exists(newBudgetDir)) {\n        await fs.removeDirRecursively(newBudgetDir);\n      }\n    } catch {} // Ignore cleanup errors\n    throw new Error(`Failed to duplicate budget file: ${error.message}`);\n  }\n\n  // load in and validate\n  const { error } = await _loadBudget(newId);\n  if (error) {\n    console.log('Error duplicating budget: ' + error);\n    return error;\n  }\n\n  if (cloudSync) {\n    try {\n      await cloudStorage.upload();\n    } catch (error) {\n      console.warn('Failed to sync duplicated budget to cloud:', error);\n      // Ignore any errors uploading. If they are offline they should\n      // still be able to create files.\n    }\n  }\n\n  await closeBudget();\n  if (open === 'original') await _loadBudget(id);\n  if (open === 'copy') await _loadBudget(newId);\n\n  return newId;\n}\n\nasync function createBudget({\n  budgetName,\n  avoidUpload,\n  testMode,\n  testBudgetId,\n}: {\n  budgetName?: Budget['name'];\n  avoidUpload?: boolean;\n  testMode?: boolean;\n  testBudgetId?: Budget['name'];\n} = {}) {\n  let id;\n  if (testMode) {\n    budgetName = budgetName || 'Test Budget';\n    id = testBudgetId || TEST_BUDGET_ID;\n\n    if (await fs.exists(fs.getBudgetDir(id))) {\n      await fs.removeDirRecursively(fs.getBudgetDir(id));\n    }\n  } else {\n    // Generate budget name if not given\n    if (!budgetName) {\n      budgetName = await uniqueBudgetName();\n    }\n\n    id = await idFromBudgetName(budgetName);\n  }\n\n  const budgetDir = fs.getBudgetDir(id);\n  await fs.mkdir(budgetDir);\n\n  // Create the initial database\n  await fs.copyFile(fs.bundledDatabasePath, fs.join(budgetDir, 'db.sqlite'));\n\n  // Create the initial prefs file\n  await fs.writeFile(\n    fs.join(budgetDir, 'metadata.json'),\n    JSON.stringify(prefs.getDefaultPrefs(id, budgetName)),\n  );\n\n  // Load it in\n  const { error } = await _loadBudget(id);\n  if (error) {\n    console.log('Error creating budget: ' + error);\n    return { error };\n  }\n\n  if (!avoidUpload && !testMode) {\n    try {\n      await cloudStorage.upload();\n    } catch (e) {\n      // Ignore any errors uploading. If they are offline they should\n      // still be able to create files.\n    }\n  }\n\n  if (testMode) {\n    await createTestBudget(mainApp.handlers);\n  }\n\n  return {};\n}\n\nasync function importBudget({\n  filepath,\n  type,\n}: {\n  filepath: string;\n  type: ImportableBudgetType;\n}): Promise<{ error?: string }> {\n  try {\n    if (!(await fs.exists(filepath))) {\n      throw new Error(`File not found at the provided path: ${filepath}`);\n    }\n\n    const buffer = Buffer.from(await fs.readFile(filepath, 'binary'));\n    const results = await handleBudgetImport(type, filepath, buffer);\n    return results || {};\n  } catch (err) {\n    err.message = 'Error importing budget: ' + err.message;\n    captureException(err);\n    return { error: 'internal-error' };\n  }\n}\n\nasync function exportBudget() {\n  try {\n    return {\n      data: await cloudStorage.exportBuffer(),\n    };\n  } catch (err) {\n    err.message = 'Error exporting budget: ' + err.message;\n    captureException(err);\n    return { error: 'internal-error' };\n  }\n}\n\nfunction onSheetChange({ names }: { names: string[] }) {\n  const nodes = names.map(name => {\n    const node = sheet.get()._getNode(name);\n    return { name: node.name, value: node.value };\n  });\n  connection.send('cells-changed', nodes);\n}\n\nasync function _loadBudget(id: Budget['id']): Promise<{\n  error?:\n    | 'budget-not-found'\n    | 'loading-budget'\n    | 'out-of-sync-migrations'\n    | 'out-of-sync-data'\n    | 'opening-budget';\n}> {\n  let dir: string;\n  try {\n    dir = fs.getBudgetDir(id);\n  } catch (e) {\n    captureException(\n      new Error('`getBudgetDir` failed in `loadBudget`: ' + e.message),\n    );\n    return { error: 'budget-not-found' };\n  }\n\n  captureBreadcrumb({ message: 'Loading budget ' + dir });\n\n  if (!(await fs.exists(dir))) {\n    captureException(new Error('budget directory does not exist'));\n    return { error: 'budget-not-found' };\n  }\n\n  try {\n    await prefs.loadPrefs(id);\n    await db.openDatabase(id);\n  } catch (e) {\n    captureBreadcrumb({ message: 'Error loading budget ' + id });\n    captureException(e);\n    await closeBudget();\n    return { error: 'opening-budget' };\n  }\n\n  // Older versions didn't tag the file with the current user, so do\n  // so now\n  if (!prefs.getPrefs().userId) {\n    const userId = await asyncStorage.getItem('user-token');\n    await prefs.savePrefs({ userId });\n  }\n\n  try {\n    await updateVersion();\n  } catch (e) {\n    console.warn('Error updating', e);\n    let result;\n    if (e.message.includes('out-of-sync-migrations')) {\n      result = { error: 'out-of-sync-migrations' };\n    } else if (e.message.includes('out-of-sync-data')) {\n      result = { error: 'out-of-sync-data' };\n    } else {\n      captureException(e);\n      logger.info('Error updating budget ' + id, e);\n      console.log('Error updating budget', e);\n      result = { error: 'loading-budget' };\n    }\n\n    await closeBudget();\n    return result;\n  }\n\n  await db.loadClock();\n\n  if (prefs.getPrefs().resetClock) {\n    // If we need to generate a fresh clock, we need to generate a new\n    // client id. This happens when the database is transferred to a\n    // new device.\n    //\n    // TODO: The client id should be stored elsewhere. It shouldn't\n    // work this way, but it's fine for now.\n    CRDT.getClock().timestamp.setNode(CRDT.makeClientId());\n    await db.runQuery(\n      'INSERT OR REPLACE INTO messages_clock (id, clock) VALUES (1, ?)',\n      [CRDT.serializeClock(CRDT.getClock())],\n    );\n\n    await prefs.savePrefs({ resetClock: false });\n  }\n\n  if (!Platform.isBrowser && process.env.NODE_ENV !== 'test') {\n    await startBackupService(id);\n  }\n\n  try {\n    await sheet.loadSpreadsheet(db, onSheetChange);\n  } catch (e) {\n    captureException(e);\n    await closeBudget();\n    return { error: 'opening-budget' };\n  }\n\n  // This is a bit leaky, but we need to set the initial budget type\n  const { value: budgetType = 'envelope' } =\n    (await db.first<Pick<db.DbPreference, 'value'>>(\n      'SELECT value from preferences WHERE id = ?',\n      ['budgetType'],\n    )) ?? {};\n  sheet.get().meta().budgetType = budgetType as prefs.BudgetType;\n  await budget.createAllBudgets();\n\n  // Load all the in-memory state\n  await mappings.loadMappings();\n  await rules.loadRules();\n  await syncMigrations.listen();\n  await mainApp.startServices();\n\n  clearUndo();\n\n  // Ensure that syncing is enabled\n  if (process.env.NODE_ENV !== 'test') {\n    if (id === DEMO_BUDGET_ID) {\n      setSyncingMode('disabled');\n    } else {\n      if (getServer()) {\n        setSyncingMode('enabled');\n      } else {\n        setSyncingMode('disabled');\n      }\n\n      await asyncStorage.setItem('lastBudget', id);\n\n      await cloudStorage.possiblyUpload();\n    }\n  }\n\n  app.events.emit('load-budget', { id });\n\n  return {};\n}\n\nasync function uploadFileWeb({\n  filename,\n  contents,\n}: {\n  filename: string;\n  contents: ArrayBuffer;\n}) {\n  if (!Platform.isBrowser) {\n    return null;\n  }\n\n  await fs.writeFile('/uploads/' + filename, contents);\n  return {};\n}\n\nasync function getBackups({ id }) {\n  return getAvailableBackups(id);\n}\n\nasync function loadBackup({ id, backupId }) {\n  await _loadBackup(id, backupId);\n}\n\nasync function makeBackup({ id }) {\n  await _makeBackup(id);\n}\n\nasync function getLastOpenedBackup() {\n  const id = await asyncStorage.getItem('lastBudget');\n  if (id && id !== '') {\n    const budgetDir = fs.getBudgetDir(id);\n\n    // We never want to give back a budget that does not exist on the\n    // filesystem anymore, so first check that it exists\n    if (await fs.exists(budgetDir)) {\n      return id;\n    }\n  }\n  return null;\n}\n","import { type NewWidget } from '../types/models';\n\nexport const DEFAULT_DASHBOARD_STATE: NewWidget[] = [\n  {\n    type: 'net-worth-card',\n    width: 8,\n    height: 2,\n    x: 0,\n    y: 0,\n    meta: null,\n  },\n  {\n    type: 'cash-flow-card',\n    width: 4,\n    height: 2,\n    x: 8,\n    y: 0,\n    meta: null,\n  },\n  {\n    type: 'spending-card',\n    width: 4,\n    height: 2,\n    x: 0,\n    y: 2,\n    meta: null,\n  },\n];\n","import { v4 as uuidv4 } from 'uuid';\n\nimport {\n  type CustomReportData,\n  type CustomReportEntity,\n} from '../../types/models';\nimport { createApp } from '../app';\nimport * as db from '../db';\nimport { ValidationError } from '../errors';\nimport { requiredFields } from '../models';\nimport { mutator } from '../mutators';\nimport { undoable } from '../undo';\n\nexport const reportModel = {\n  validate(\n    report: Omit<CustomReportEntity, 'tombstone'>,\n    { update }: { update?: boolean } = {},\n  ) {\n    requiredFields('Report', report, ['conditionsOp'], update);\n\n    if (!update || 'conditionsOp' in report) {\n      if (!['and', 'or'].includes(report.conditionsOp)) {\n        throw new ValidationError(\n          'Invalid filter conditionsOp: ' + report.conditionsOp,\n        );\n      }\n    }\n\n    return report;\n  },\n\n  toJS(row: CustomReportData) {\n    return {\n      id: row.id,\n      name: row.name,\n      startDate: row.start_date,\n      endDate: row.end_date,\n      isDateStatic: row.date_static === 1,\n      dateRange: row.date_range,\n      mode: row.mode,\n      groupBy: row.group_by,\n      sortBy: row.sort_by,\n      interval: row.interval,\n      balanceType: row.balance_type,\n      showEmpty: row.show_empty === 1,\n      showOffBudget: row.show_offbudget === 1,\n      showHiddenCategories: row.show_hidden === 1,\n      showUncategorized: row.show_uncategorized === 1,\n      includeCurrentInterval: row.include_current === 1,\n      graphType: row.graph_type,\n      conditions: row.conditions,\n      conditionsOp: row.conditions_op,\n    };\n  },\n\n  fromJS(report: CustomReportEntity) {\n    return {\n      id: report.id,\n      name: report.name,\n      start_date: report.startDate,\n      end_date: report.endDate,\n      date_static: report.isDateStatic ? 1 : 0,\n      date_range: report.dateRange,\n      mode: report.mode,\n      group_by: report.groupBy,\n      sort_by: report.sortBy,\n      interval: report.interval,\n      balance_type: report.balanceType,\n      show_empty: report.showEmpty ? 1 : 0,\n      show_offbudget: report.showOffBudget ? 1 : 0,\n      show_hidden: report.showHiddenCategories ? 1 : 0,\n      show_uncategorized: report.showUncategorized ? 1 : 0,\n      include_current: report.includeCurrentInterval ? 1 : 0,\n      graph_type: report.graphType,\n      conditions: report.conditions,\n      conditions_op: report.conditionsOp,\n    };\n  },\n};\n\nasync function reportNameExists(\n  name: string,\n  reportId: string,\n  newItem: boolean,\n) {\n  const idForName = await db.first<Pick<db.DbCustomReport, 'id'>>(\n    'SELECT id from custom_reports WHERE tombstone = 0 AND name = ?',\n    [name],\n  );\n\n  //no existing name found\n  if (idForName === null) {\n    return false;\n  }\n\n  //for update/rename\n  if (!newItem) {\n    /*\n    -if the found item is the same as the existing item\n    then no name change was made.\n    -if they are not the same then there is another\n    item with that name already.\n    */\n    return idForName.id !== reportId;\n  }\n\n  //default return: item was found but does not match current name\n  return true;\n}\n\nasync function createReport(report: CustomReportEntity) {\n  const reportId = uuidv4();\n  const item: CustomReportEntity = {\n    ...report,\n    id: reportId,\n  };\n  if (!item.name) {\n    throw new Error('Report name is required');\n  }\n\n  const nameExists = await reportNameExists(item.name, item.id ?? '', true);\n  if (nameExists) {\n    throw new Error('There is already a report named ' + item.name);\n  }\n\n  // Create the report here based on the info\n  await db.insertWithSchema('custom_reports', reportModel.fromJS(item));\n\n  return reportId;\n}\n\nasync function updateReport(item: CustomReportEntity) {\n  if (!item.name) {\n    throw new Error('Report name is required');\n  }\n\n  if (!item.id) {\n    throw new Error('Report recall error');\n  }\n\n  const nameExists = await reportNameExists(item.name, item.id, false);\n  if (nameExists) {\n    throw new Error('There is already a report named ' + item.name);\n  }\n\n  await db.updateWithSchema('custom_reports', reportModel.fromJS(item));\n}\n\nasync function deleteReport(id: CustomReportEntity['id']) {\n  await db.delete_('custom_reports', id);\n}\n\nexport type ReportsHandlers = {\n  'report/create': typeof createReport;\n  'report/update': typeof updateReport;\n  'report/delete': typeof deleteReport;\n};\n\n// Expose functions to the client\nexport const app = createApp<ReportsHandlers>();\n\napp.method('report/create', mutator(undoable(createReport)));\napp.method('report/update', mutator(undoable(updateReport)));\napp.method('report/delete', mutator(undoable(deleteReport)));\n","import isMatch from 'lodash/isMatch';\n\nimport { captureException } from '../../platform/exceptions';\nimport * as fs from '../../platform/server/fs';\nimport { DEFAULT_DASHBOARD_STATE } from '../../shared/dashboard';\nimport { q } from '../../shared/query';\nimport {\n  type ExportImportDashboard,\n  type ExportImportDashboardWidget,\n  type ExportImportCustomReportWidget,\n  type Widget,\n} from '../../types/models';\nimport { type EverythingButIdOptional } from '../../types/util';\nimport { createApp } from '../app';\nimport { aqlQuery } from '../aql';\nimport * as db from '../db';\nimport { ValidationError } from '../errors';\nimport { requiredFields } from '../models';\nimport { mutator } from '../mutators';\nimport { reportModel } from '../reports/app';\nimport { batchMessages } from '../sync';\nimport { undoable } from '../undo';\n\nfunction isExportedCustomReportWidget(\n  widget: ExportImportDashboardWidget,\n): widget is ExportImportCustomReportWidget {\n  return widget.type === 'custom-report';\n}\n\nconst exportModel = {\n  validate(dashboard: ExportImportDashboard) {\n    requiredFields('Dashboard', dashboard, ['version', 'widgets']);\n\n    if (!Array.isArray(dashboard.widgets)) {\n      throw new ValidationError(\n        'Invalid dashboard.widgets data type: it must be an array of widgets.',\n      );\n    }\n\n    dashboard.widgets.forEach((widget, idx) => {\n      requiredFields(`Dashboard widget #${idx}`, widget, [\n        'type',\n        'x',\n        'y',\n        'width',\n        'height',\n        ...(isExportedCustomReportWidget(widget) ? ['meta' as const] : []),\n      ]);\n\n      if (!Number.isInteger(widget.x)) {\n        throw new ValidationError(\n          `Invalid widget.${idx}.x data-type for value ${widget.x}.`,\n        );\n      }\n\n      if (!Number.isInteger(widget.y)) {\n        throw new ValidationError(\n          `Invalid widget.${idx}.y data-type for value ${widget.y}.`,\n        );\n      }\n\n      if (!Number.isInteger(widget.width)) {\n        throw new ValidationError(\n          `Invalid widget.${idx}.width data-type for value ${widget.width}.`,\n        );\n      }\n\n      if (!Number.isInteger(widget.height)) {\n        throw new ValidationError(\n          `Invalid widget.${idx}.height data-type for value ${widget.height}.`,\n        );\n      }\n\n      if (\n        ![\n          'net-worth-card',\n          'cash-flow-card',\n          'spending-card',\n          'custom-report',\n          'markdown-card',\n          'summary-card',\n          'calendar-card',\n        ].includes(widget.type)\n      ) {\n        throw new ValidationError(\n          `Invalid widget.${idx}.type value ${widget.type}.`,\n        );\n      }\n\n      if (isExportedCustomReportWidget(widget)) {\n        reportModel.validate(widget.meta);\n      }\n    });\n  },\n};\n\nasync function updateDashboard(\n  widgets: EverythingButIdOptional<Omit<Widget, 'tombstone'>>[],\n) {\n  const { data: dbWidgets } = await aqlQuery(\n    q('dashboard')\n      .filter({ id: { $oneof: widgets.map(({ id }) => id) } })\n      .select('*'),\n  );\n  const dbWidgetMap = new Map(\n    (dbWidgets as Widget[]).map(widget => [widget.id, widget]),\n  );\n\n  await Promise.all(\n    widgets\n      // Perform an update query only if the widget actually has changes\n      .filter(widget => !isMatch(dbWidgetMap.get(widget.id) ?? {}, widget))\n      .map(widget => db.update('dashboard', widget)),\n  );\n}\n\nasync function updateDashboardWidget(\n  widget: EverythingButIdOptional<Omit<Widget, 'tombstone'>>,\n) {\n  await db.updateWithSchema('dashboard', widget);\n}\n\nasync function resetDashboard() {\n  await batchMessages(async () => {\n    await Promise.all([\n      // Delete all widgets\n      db.deleteAll('dashboard'),\n\n      // Insert the default state\n      ...DEFAULT_DASHBOARD_STATE.map(widget =>\n        db.insertWithSchema('dashboard', widget),\n      ),\n    ]);\n  });\n}\n\nasync function addDashboardWidget(\n  widget: Omit<Widget, 'id' | 'x' | 'y' | 'tombstone'> &\n    Partial<Pick<Widget, 'x' | 'y'>>,\n) {\n  // If no x & y was provided - calculate it dynamically\n  // The new widget should be the very last one in the list of all widgets\n  if (!('x' in widget) && !('y' in widget)) {\n    const data = await db.first<\n      Pick<db.DbDashboard, 'x' | 'y' | 'width' | 'height'>\n    >(\n      'SELECT x, y, width, height FROM dashboard WHERE tombstone = 0 ORDER BY y DESC, x DESC',\n    );\n\n    if (!data) {\n      widget.x = 0;\n      widget.y = 0;\n    } else {\n      const xBoundaryCheck = data.x + data.width + widget.width;\n      widget.x = xBoundaryCheck > 12 ? 0 : data.x + data.width;\n      widget.y = data.y + (xBoundaryCheck > 12 ? data.height : 0);\n    }\n  }\n\n  await db.insertWithSchema('dashboard', widget);\n}\n\nasync function removeDashboardWidget(widgetId: string) {\n  await db.delete_('dashboard', widgetId);\n}\n\nasync function importDashboard({ filepath }: { filepath: string }) {\n  try {\n    if (!(await fs.exists(filepath))) {\n      throw new Error(`File not found at the provided path: ${filepath}`);\n    }\n\n    const content = await fs.readFile(filepath);\n    const parsedContent: ExportImportDashboard = JSON.parse(content);\n\n    exportModel.validate(parsedContent);\n\n    const customReportIds = await db.all<Pick<db.DbCustomReport, 'id'>>(\n      'SELECT id from custom_reports',\n    );\n    const customReportIdSet = new Set(customReportIds.map(({ id }) => id));\n\n    await batchMessages(async () => {\n      await Promise.all([\n        // Delete all widgets\n        db.deleteAll('dashboard'),\n\n        // Insert new widgets\n        ...parsedContent.widgets.map(widget =>\n          db.insertWithSchema('dashboard', {\n            type: widget.type,\n            width: widget.width,\n            height: widget.height,\n            x: widget.x,\n            y: widget.y,\n            meta: isExportedCustomReportWidget(widget)\n              ? { id: widget.meta.id }\n              : widget.meta,\n          }),\n        ),\n\n        // Insert new custom reports\n        ...parsedContent.widgets\n          .filter(isExportedCustomReportWidget)\n          .filter(({ meta }) => !customReportIdSet.has(meta.id))\n          .map(({ meta }) =>\n            db.insertWithSchema('custom_reports', reportModel.fromJS(meta)),\n          ),\n\n        // Update existing reports\n        ...parsedContent.widgets\n          .filter(isExportedCustomReportWidget)\n          .filter(({ meta }) => customReportIdSet.has(meta.id))\n          .map(({ meta }) =>\n            db.updateWithSchema('custom_reports', {\n              // Replace `undefined` values with `null`\n              // (null clears the value in DB; undefined breaks the operation)\n              ...Object.fromEntries(\n                Object.entries(reportModel.fromJS(meta)).map(([key, value]) => [\n                  key,\n                  value ?? null,\n                ]),\n              ),\n              tombstone: false,\n            }),\n          ),\n      ]);\n    });\n\n    return { status: 'ok' as const };\n  } catch (err: unknown) {\n    if (err instanceof Error) {\n      err.message = 'Error importing file: ' + err.message;\n      captureException(err);\n    }\n    if (err instanceof SyntaxError) {\n      return { error: 'json-parse-error' as const };\n    }\n    if (err instanceof ValidationError) {\n      return { error: 'validation-error' as const, message: err.message };\n    }\n    return { error: 'internal-error' as const };\n  }\n}\n\nexport type DashboardHandlers = {\n  'dashboard-update': typeof updateDashboard;\n  'dashboard-update-widget': typeof updateDashboardWidget;\n  'dashboard-reset': typeof resetDashboard;\n  'dashboard-add-widget': typeof addDashboardWidget;\n  'dashboard-remove-widget': typeof removeDashboardWidget;\n  'dashboard-import': typeof importDashboard;\n};\n\nexport const app = createApp<DashboardHandlers>();\n\napp.method('dashboard-update', mutator(undoable(updateDashboard)));\napp.method('dashboard-update-widget', mutator(undoable(updateDashboardWidget)));\napp.method('dashboard-reset', mutator(undoable(resetDashboard)));\napp.method('dashboard-add-widget', mutator(undoable(addDashboardWidget)));\napp.method('dashboard-remove-widget', mutator(undoable(removeDashboardWidget)));\napp.method('dashboard-import', mutator(undoable(importDashboard)));\n","import { v4 as uuidv4 } from 'uuid';\n\nimport * as asyncStorage from '../../platform/server/asyncStorage';\nimport { Budget } from '../../types/budget';\nimport { createApp } from '../app';\nimport { post } from '../post';\nimport * as prefs from '../prefs';\nimport { getServer } from '../server-config';\nimport { makeTestMessage, resetSync } from '../sync';\n\nimport * as encryption from '.';\n\nexport type EncryptionHandlers = {\n  'key-make': typeof keyMake;\n  'key-test': typeof keyTest;\n};\n\nexport const app = createApp<EncryptionHandlers>();\napp.method('key-make', keyMake);\napp.method('key-test', keyTest);\n\n// A user can only enable/change their key with the file loaded. This\n// will change in the future: during onboarding the user should be\n// able to enable encryption. (Imagine if they are importing data from\n// another source, they should be able to encrypt first)\nasync function keyMake({ password }: { password: string }) {\n  if (!prefs.getPrefs()) {\n    throw new Error('key-make must be called with file loaded');\n  }\n\n  const salt = encryption.randomBytes(32).toString('base64');\n  const id = uuidv4();\n  const key = await encryption.createKey({ id, password, salt });\n\n  // Load the key\n  await encryption.loadKey(key);\n\n  // Make some test data to use if the key is valid or not\n  const testContent = await makeTestMessage(key.getId());\n\n  // Changing your key necessitates a sync reset as well. This will\n  // clear all existing encrypted data from the server so you won't\n  // have a mix of data encrypted with different keys.\n  return await resetSync({\n    key,\n    salt,\n    testContent: JSON.stringify({\n      ...testContent,\n      value: testContent.value.toString('base64'),\n    }),\n  });\n}\n\n// This can be called both while a file is already loaded or not. This\n// will see if a key is valid and if so save it off.\nasync function keyTest({\n  cloudFileId,\n  password,\n}: {\n  cloudFileId?: Budget['cloudFileId'];\n  password: string;\n}) {\n  const userToken = await asyncStorage.getItem('user-token');\n\n  if (cloudFileId == null) {\n    cloudFileId = prefs.getPrefs().cloudFileId;\n  }\n\n  let validCloudFileId: NonNullable<Budget['cloudFileId']>;\n  let res: {\n    id: string;\n    salt: string;\n    test: string | null;\n  };\n  try {\n    const serverConfig = getServer();\n    if (!serverConfig) {\n      throw new Error('No sync server configured.');\n    }\n    res = await post(serverConfig.SYNC_SERVER + '/user-get-key', {\n      token: userToken,\n      fileId: cloudFileId,\n    });\n    validCloudFileId = cloudFileId!;\n  } catch (e) {\n    console.log(e);\n    return { error: { reason: 'network' } };\n  }\n\n  const { id, salt, test: originalTest } = res;\n\n  if (!originalTest) {\n    return { error: { reason: 'old-key-style' } };\n  }\n\n  const test: {\n    value: string;\n    meta: {\n      keyId: string;\n      algorithm: string;\n      iv: string;\n      authTag: string;\n    };\n  } = JSON.parse(originalTest);\n\n  const key = await encryption.createKey({ id, password, salt });\n  encryption.loadKey(key);\n\n  try {\n    await encryption.decrypt(Buffer.from(test.value, 'base64'), test.meta);\n  } catch (e) {\n    console.log(e);\n\n    // Unload the key, it's invalid\n    encryption.unloadKey(key);\n    return { error: { reason: 'decrypt-failure' } };\n  }\n\n  // Persist key in async storage\n  const keys = JSON.parse((await asyncStorage.getItem(`encrypt-keys`)) || '{}');\n  keys[validCloudFileId] = key.serialize();\n  await asyncStorage.setItem('encrypt-keys', JSON.stringify(keys));\n\n  // Save the key id in prefs if the are loaded. If they aren't, we\n  // are testing a key to download a file and when the file is\n  // actually downloaded it will update the prefs with the latest key id\n  if (prefs.getPrefs()) {\n    await prefs.savePrefs({ encryptKeyId: key.getId() });\n  }\n\n  return {};\n}\n","// @ts-strict-ignore\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { TransactionFilterEntity } from '../../types/models';\nimport { createApp } from '../app';\nimport * as db from '../db';\nimport { requiredFields } from '../models';\nimport { mutator } from '../mutators';\nimport { parseConditionsOrActions } from '../transactions/transaction-rules';\nimport { undoable } from '../undo';\n\nconst filterModel = {\n  validate(filter, { update }: { update?: boolean } = {}) {\n    requiredFields('transaction_filters', filter, ['conditions'], update);\n\n    if (!update || 'conditionsOp' in filter) {\n      if (!['and', 'or'].includes(filter.conditionsOp)) {\n        throw new Error('Invalid filter conditionsOp: ' + filter.conditionsOp);\n      }\n    }\n\n    return filter;\n  },\n\n  toJS(row) {\n    const { conditions, conditions_op, ...fields } = row;\n    return {\n      ...fields,\n      conditionsOp: conditions_op,\n      conditions: parseConditionsOrActions(conditions),\n    };\n  },\n\n  fromJS(filter) {\n    const { conditionsOp, ...row } = filter;\n    if (conditionsOp) {\n      row.conditions_op = conditionsOp;\n    }\n    return row;\n  },\n};\n\nasync function filterNameExists(name, filterId, newItem) {\n  const idForName = await db.first<Pick<db.DbTransactionFilter, 'id'>>(\n    'SELECT id from transaction_filters WHERE tombstone = 0 AND name = ?',\n    [name],\n  );\n\n  if (idForName === null) {\n    return false;\n  }\n  if (!newItem) {\n    return idForName.id !== filterId;\n  }\n  return true;\n}\n\nfunction conditionExists(item, filters, newItem) {\n  const { conditions, conditionsOp } = item;\n  let fConditionFound = null;\n\n  filters.some(filter => {\n    if (\n      (conditions.length === 1 || filter.conditionsOp === conditionsOp) &&\n      !filter.tombstone &&\n      filter.conditions.length === conditions.length\n    ) {\n      const allConditionsMatch = !conditions.some(\n        cond =>\n          !filter.conditions.some(\n            fcond =>\n              cond.value === fcond.value &&\n              cond.op === fcond.op &&\n              cond.field === fcond.field &&\n              filterOptionsMatch(cond.options, fcond.options),\n          ),\n      );\n\n      if (allConditionsMatch) {\n        fConditionFound = filter;\n        return true;\n      }\n    }\n    return false;\n  });\n\n  if (!newItem) {\n    return fConditionFound\n      ? fConditionFound.id !== item.id\n        ? fConditionFound.name\n        : false\n      : false;\n  }\n\n  return fConditionFound ? fConditionFound.name : false;\n}\n\nfunction filterOptionsMatch(options1, options2) {\n  const opt1 = options1 ?? {};\n  const opt2 = options2 ?? {};\n\n  const keys1 = Object.keys(opt1);\n  const keys2 = Object.keys(opt2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  return keys1.every(key => opt1[key] === opt2[key]);\n}\n\nasync function createFilter(filter): Promise<TransactionFilterEntity['id']> {\n  const filterId = uuidv4();\n  const item = {\n    id: filterId,\n    conditions: filter.state.conditions,\n    conditionsOp: filter.state.conditionsOp,\n    name: filter.state.name,\n  };\n\n  if (item.name) {\n    if (await filterNameExists(item.name, item.id, true)) {\n      throw new Error('There is already a filter named ' + item.name);\n    }\n  } else {\n    throw new Error('Filter name is required');\n  }\n\n  if (item.conditions.length > 0) {\n    const condExists = conditionExists(item, filter.filters, true);\n    if (condExists) {\n      throw new Error(\n        'Duplicate filter warning: conditions already exist. Filter name: ' +\n          condExists,\n      );\n    }\n  } else {\n    throw new Error('Conditions are required');\n  }\n\n  // Create the filter here based on the info\n  await db.insertWithSchema('transaction_filters', filterModel.fromJS(item));\n\n  return filterId;\n}\n\nasync function updateFilter(filter) {\n  const item = {\n    id: filter.state.id,\n    conditions: filter.state.conditions,\n    conditionsOp: filter.state.conditionsOp,\n    name: filter.state.name,\n  };\n  if (item.name) {\n    if (await filterNameExists(item.name, item.id, false)) {\n      throw new Error('There is already a filter named ' + item.name);\n    }\n  } else {\n    throw new Error('Filter name is required');\n  }\n\n  if (item.conditions.length > 0) {\n    const condExists = conditionExists(item, filter.filters, false);\n    if (condExists) {\n      throw new Error(\n        'Duplicate filter warning: conditions already exist. Filter name: ' +\n          condExists,\n      );\n    }\n  } else {\n    throw new Error('Conditions are required');\n  }\n\n  await db.updateWithSchema('transaction_filters', filterModel.fromJS(item));\n}\n\nasync function deleteFilter(id: TransactionFilterEntity['id']) {\n  await db.delete_('transaction_filters', id);\n}\n\nexport type FiltersHandlers = {\n  'filter-create': typeof createFilter;\n  'filter-update': typeof updateFilter;\n  'filter-delete': typeof deleteFilter;\n};\n\nexport const app = createApp<FiltersHandlers>();\n\napp.method('filter-create', mutator(createFilter));\napp.method('filter-update', mutator(updateFilter));\napp.method('filter-delete', mutator(undoable(deleteFilter)));\n","import { NoteEntity } from '../../types/models';\nimport { createApp } from '../app';\nimport * as db from '../db';\n\nexport type NotesHandlers = {\n  'notes-save': typeof updateNotes;\n};\n\nexport const app = createApp<NotesHandlers>();\napp.method('notes-save', updateNotes);\n\nasync function updateNotes({ id, note }: NoteEntity) {\n  await db.update('notes', { id, note });\n}\n","import { Diff } from '../../shared/util';\nimport { PayeeEntity, RuleEntity } from '../../types/models';\nimport { createApp } from '../app';\nimport * as db from '../db';\nimport { payeeModel } from '../models';\nimport { mutator } from '../mutators';\nimport { batchMessages } from '../sync';\nimport * as rules from '../transactions/transaction-rules';\nimport { undoable } from '../undo';\n\nexport type PayeesHandlers = {\n  'payee-create': typeof createPayee;\n  'common-payees-get': typeof getCommonPayees;\n  'payees-get': typeof getPayees;\n  'payees-get-orphaned': typeof getOrphanedPayees;\n  'payees-get-rule-counts': typeof getPayeeRuleCounts;\n  'payees-merge': typeof mergePayees;\n  'payees-batch-change': typeof batchChangePayees;\n  'payees-check-orphaned': typeof checkOrphanedPayees;\n  'payees-get-rules': typeof getPayeeRules;\n};\n\nexport const app = createApp<PayeesHandlers>();\napp.method('payee-create', mutator(undoable(createPayee)));\napp.method('common-payees-get', getCommonPayees);\napp.method('payees-get', getPayees);\napp.method('payees-get-orphaned', getOrphanedPayees);\napp.method('payees-get-rule-counts', getPayeeRuleCounts);\napp.method(\n  'payees-merge',\n  mutator(\n    undoable(mergePayees, args => ({\n      mergeIds: args.mergeIds,\n      targetId: args.targetId,\n    })),\n  ),\n);\napp.method('payees-batch-change', mutator(undoable(batchChangePayees)));\napp.method('payees-check-orphaned', checkOrphanedPayees);\napp.method('payees-get-rules', getPayeeRules);\n\nasync function createPayee({ name }: { name: PayeeEntity['name'] }) {\n  return db.insertPayee({ name });\n}\n\nasync function getCommonPayees(): Promise<PayeeEntity[]> {\n  // TODO: Update to an AQL query. Server must return AQL entities not the raw DB data.\n  return (await db.getCommonPayees()).map(payeeModel.fromDb);\n}\n\nasync function getPayees(): Promise<PayeeEntity[]> {\n  // TODO: Update to an AQL query. Server must return AQL entities not the raw DB data.\n  return (await db.getPayees()).map(payeeModel.fromDb);\n}\n\nasync function getOrphanedPayees(): Promise<Array<Pick<PayeeEntity, 'id'>>> {\n  return await db.syncGetOrphanedPayees();\n}\n\nasync function getPayeeRuleCounts() {\n  const payeeCounts: Record<PayeeEntity['id'], number> = {};\n\n  rules.iterateIds(rules.getRules(), 'payee', (rule, id) => {\n    if (payeeCounts[id] == null) {\n      payeeCounts[id] = 0;\n    }\n    payeeCounts[id]++;\n  });\n\n  return payeeCounts;\n}\n\nasync function mergePayees({\n  targetId,\n  mergeIds,\n}: {\n  targetId: PayeeEntity['id'];\n  mergeIds: Array<PayeeEntity['id']>;\n}) {\n  await db.mergePayees(targetId, mergeIds);\n}\n\nasync function batchChangePayees({\n  added,\n  deleted,\n  updated,\n}: Partial<Diff<PayeeEntity>>): Promise<void> {\n  await batchMessages(async () => {\n    if (deleted) {\n      await Promise.all(\n        deleted.map(p => ({ id: p.id })).map(p => db.deletePayee(p)),\n      );\n    }\n\n    if (added) {\n      await Promise.all(\n        added.map(p => payeeModel.toDb(p)).map(p => db.insertPayee(p)),\n      );\n    }\n\n    if (updated) {\n      await Promise.all(\n        updated\n          .map(p => payeeModel.toDb(p as PayeeEntity, { update: true }))\n          .map(p => db.updatePayee(p)),\n      );\n    }\n  });\n}\n\nasync function checkOrphanedPayees({\n  ids,\n}: {\n  ids: Array<PayeeEntity['id']>;\n}): Promise<Array<PayeeEntity['id']>> {\n  const orphaned = new Set(await db.getOrphanedPayees());\n  return ids.filter(id => orphaned.has(id));\n}\n\nasync function getPayeeRules({\n  id,\n}: {\n  id: PayeeEntity['id'];\n}): Promise<RuleEntity[]> {\n  return rules.getRulesForPayee(id).map(rule => rule.serialize());\n}\n","import * as asyncStorage from '../../platform/server/asyncStorage';\nimport * as fs from '../../platform/server/fs';\nimport { stringToInteger } from '../../shared/util';\nimport {\n  GlobalPrefs,\n  MetadataPrefs,\n  type SyncedPrefs,\n} from '../../types/prefs';\nimport { createApp } from '../app';\nimport * as db from '../db';\nimport { getDefaultDocumentDir } from '../main';\nimport { mutator } from '../mutators';\nimport { post } from '../post';\nimport {\n  getPrefs as _getMetadataPrefs,\n  savePrefs as _saveMetadataPrefs,\n} from '../prefs';\nimport { getServer } from '../server-config';\nimport { undoable } from '../undo';\n\nexport interface PreferencesHandlers {\n  'preferences/save': typeof saveSyncedPrefs;\n  'preferences/get': typeof getSyncedPrefs;\n  'save-global-prefs': typeof saveGlobalPrefs;\n  'load-global-prefs': typeof loadGlobalPrefs;\n  'save-prefs': typeof saveMetadataPrefs;\n  'load-prefs': typeof loadMetadataPrefs;\n}\n\nexport const app = createApp<PreferencesHandlers>();\n\napp.method('preferences/save', mutator(undoable(saveSyncedPrefs)));\napp.method('preferences/get', getSyncedPrefs);\napp.method('save-global-prefs', saveGlobalPrefs);\napp.method('load-global-prefs', loadGlobalPrefs);\napp.method('save-prefs', saveMetadataPrefs);\napp.method('load-prefs', loadMetadataPrefs);\n\nasync function saveSyncedPrefs({\n  id,\n  value,\n}: {\n  id: keyof SyncedPrefs;\n  value: string | undefined;\n}) {\n  if (!id) {\n    return;\n  }\n\n  await db.update('preferences', { id, value });\n}\n\nasync function getSyncedPrefs(): Promise<SyncedPrefs> {\n  const prefs = await db.all<Pick<db.DbPreference, 'id' | 'value'>>(\n    'SELECT id, value FROM preferences',\n  );\n\n  return prefs.reduce<SyncedPrefs>((carry, { value, id }) => {\n    carry[id as keyof SyncedPrefs] = value;\n    return carry;\n  }, {});\n}\n\nasync function saveGlobalPrefs(prefs: GlobalPrefs) {\n  if (!prefs) {\n    return 'ok';\n  }\n\n  if (prefs.maxMonths !== undefined) {\n    await asyncStorage.setItem('max-months', '' + prefs.maxMonths);\n  }\n  if (prefs.categoryExpandedState !== undefined) {\n    await asyncStorage.setItem(\n      'category-expanded-state',\n      '' + prefs.categoryExpandedState,\n    );\n  }\n  if (prefs.documentDir !== undefined && (await fs.exists(prefs.documentDir))) {\n    await asyncStorage.setItem('document-dir', prefs.documentDir);\n  }\n  if (prefs.floatingSidebar !== undefined) {\n    await asyncStorage.setItem('floating-sidebar', '' + prefs.floatingSidebar);\n  }\n  if (prefs.language !== undefined) {\n    await asyncStorage.setItem('language', prefs.language);\n  }\n  if (prefs.theme !== undefined) {\n    await asyncStorage.setItem('theme', prefs.theme);\n  }\n  if (prefs.preferredDarkTheme !== undefined) {\n    await asyncStorage.setItem(\n      'preferred-dark-theme',\n      prefs.preferredDarkTheme,\n    );\n  }\n  if (prefs.serverSelfSignedCert !== undefined) {\n    await asyncStorage.setItem(\n      'server-self-signed-cert',\n      prefs.serverSelfSignedCert,\n    );\n  }\n  if (prefs.syncServerConfig !== undefined) {\n    await asyncStorage.setItem('syncServerConfig', prefs.syncServerConfig);\n  }\n  return 'ok';\n}\n\nasync function loadGlobalPrefs(): Promise<GlobalPrefs> {\n  const {\n    'floating-sidebar': floatingSidebar,\n    'category-expanded-state': categoryExpandedState,\n    'max-months': maxMonths,\n    'document-dir': documentDir,\n    'encrypt-key': encryptKey,\n    language,\n    theme,\n    'preferred-dark-theme': preferredDarkTheme,\n    'server-self-signed-cert': serverSelfSignedCert,\n    syncServerConfig,\n  } = await asyncStorage.multiGet([\n    'floating-sidebar',\n    'category-expanded-state',\n    'max-months',\n    'document-dir',\n    'encrypt-key',\n    'language',\n    'theme',\n    'preferred-dark-theme',\n    'server-self-signed-cert',\n    'syncServerConfig',\n  ] as const);\n  return {\n    floatingSidebar: floatingSidebar === 'true',\n    categoryExpandedState: stringToInteger(categoryExpandedState || '') || 0,\n    maxMonths: stringToInteger(maxMonths || '') || 1,\n    documentDir: documentDir || getDefaultDocumentDir(),\n    keyId: encryptKey && JSON.parse(encryptKey).id,\n    language,\n    theme:\n      theme === 'light' ||\n      theme === 'dark' ||\n      theme === 'auto' ||\n      theme === 'development' ||\n      theme === 'midnight'\n        ? theme\n        : 'auto',\n    preferredDarkTheme:\n      preferredDarkTheme === 'dark' || preferredDarkTheme === 'midnight'\n        ? preferredDarkTheme\n        : 'dark',\n    serverSelfSignedCert: serverSelfSignedCert || undefined,\n    syncServerConfig: syncServerConfig || undefined,\n  };\n}\n\nasync function saveMetadataPrefs(prefsToSet: MetadataPrefs) {\n  if (!prefsToSet) {\n    return 'ok';\n  }\n\n  const { cloudFileId } = _getMetadataPrefs();\n\n  // Need to sync the budget name on the server as well\n  if (prefsToSet.budgetName && cloudFileId) {\n    const userToken = await asyncStorage.getItem('user-token');\n\n    const syncServer = getServer()?.SYNC_SERVER;\n    if (!syncServer) {\n      throw new Error('No sync server set');\n    }\n\n    await post(syncServer + '/update-user-filename', {\n      token: userToken,\n      fileId: cloudFileId,\n      name: prefsToSet.budgetName,\n    });\n  }\n\n  await _saveMetadataPrefs(prefsToSet);\n  return 'ok';\n}\n\nasync function loadMetadataPrefs(): Promise<MetadataPrefs> {\n  return _getMetadataPrefs();\n}\n","// @ts-strict-ignore\nimport {\n  RuleActionEntity,\n  TransactionEntity,\n  type RuleEntity,\n} from '../../types/models';\nimport { createApp } from '../app';\nimport { RuleError } from '../errors';\nimport { mutator } from '../mutators';\nimport { batchMessages } from '../sync';\nimport * as rules from '../transactions/transaction-rules';\nimport { undoable } from '../undo';\n\nimport { Condition, Action, rankRules } from '.';\n\nfunction validateRule(rule: Partial<RuleEntity>) {\n  // Returns an array of errors, the array is the same link as the\n  // passed-in `array`, or null if there are no errors\n  function runValidation<T>(array: T[], validate: (item: T) => unknown) {\n    const result = array.map(item => {\n      try {\n        validate(item);\n      } catch (e) {\n        if (e instanceof RuleError) {\n          console.warn('Invalid rule', e);\n          return e.type;\n        }\n        throw e;\n      }\n      return null;\n    });\n\n    return result.filter((res): res is string => typeof res === 'string').length\n      ? result\n      : null;\n  }\n\n  const conditionErrors = runValidation(\n    rule.conditions,\n    cond => new Condition(cond.op, cond.field, cond.value, cond.options),\n  );\n\n  const actionErrors = runValidation(rule.actions, action =>\n    action.op === 'set-split-amount'\n      ? new Action(action.op, null, action.value, action.options)\n      : action.op === 'link-schedule'\n        ? new Action(action.op, null, action.value, null)\n        : action.op === 'prepend-notes' || action.op === 'append-notes'\n          ? new Action(action.op, null, action.value, null)\n          : new Action(action.op, action.field, action.value, action.options),\n  );\n\n  if (conditionErrors || actionErrors) {\n    return {\n      conditionErrors,\n      actionErrors,\n    };\n  }\n\n  return null;\n}\n\ntype ValidationError = {\n  conditionErrors: string[];\n  actionErrors: string[];\n};\n\nexport type RulesHandlers = {\n  'rule-validate': typeof ruleValidate;\n  'rule-add': typeof addRule;\n  'rule-update': typeof updateRule;\n  'rule-delete': typeof deleteRule;\n  'rule-delete-all': typeof deleteAllRules;\n  'rule-apply-actions': typeof applyRuleActions;\n  'rule-add-payee-rename': typeof addRulePayeeRename;\n  'rules-get': typeof getRules;\n  'rule-get': typeof getRule;\n  'rules-run': typeof runRules;\n};\n\n// Expose functions to the client\nexport const app = createApp<RulesHandlers>();\n\napp.method('rule-validate', ruleValidate);\napp.method('rule-add', mutator(addRule));\napp.method('rule-update', mutator(updateRule));\napp.method('rule-delete', mutator(deleteRule));\napp.method('rule-delete-all', mutator(deleteAllRules));\napp.method('rule-apply-actions', mutator(undoable(applyRuleActions)));\napp.method('rule-add-payee-rename', mutator(addRulePayeeRename));\napp.method('rules-get', getRules);\napp.method('rule-get', getRule);\napp.method('rules-run', runRules);\n\nasync function ruleValidate(\n  rule: Partial<RuleEntity>,\n): Promise<{ error: ValidationError | null }> {\n  const error = validateRule(rule);\n  return { error };\n}\n\nasync function addRule(\n  rule: Omit<RuleEntity, 'id'>,\n): Promise<{ error: ValidationError } | RuleEntity> {\n  const error = validateRule(rule);\n  if (error) {\n    return { error };\n  }\n\n  const id = await rules.insertRule(rule);\n  return { id, ...rule };\n}\n\nasync function updateRule<\n  PartialRule extends Partial<Omit<RuleEntity, 'id'>> & Pick<RuleEntity, 'id'>,\n>(rule: PartialRule): Promise<{ error: ValidationError } | PartialRule> {\n  const error = validateRule(rule);\n  if (error) {\n    return { error };\n  }\n\n  await rules.updateRule(rule);\n  return rule;\n}\n\nasync function deleteRule(id: RuleEntity['id']) {\n  return rules.deleteRule(id);\n}\n\nasync function deleteAllRules(\n  ids: Array<RuleEntity['id']>,\n): Promise<{ someDeletionsFailed: boolean }> {\n  let someDeletionsFailed = false;\n\n  await batchMessages(async () => {\n    for (const id of ids) {\n      const res = await rules.deleteRule(id);\n      if (res === false) {\n        someDeletionsFailed = true;\n      }\n    }\n  });\n\n  return { someDeletionsFailed };\n}\n\nasync function applyRuleActions({\n  transactions,\n  actions,\n}: {\n  transactions: TransactionEntity[];\n  actions: Array<Action | RuleActionEntity>;\n}): Promise<null | { added: TransactionEntity[]; updated: unknown[] }> {\n  return rules.applyActions(transactions, actions);\n}\n\nasync function addRulePayeeRename({\n  fromNames,\n  to,\n}: {\n  fromNames: string[];\n  to: string;\n}): Promise<string> {\n  return rules.updatePayeeRenameRule(fromNames, to);\n}\n\nasync function getRule({\n  id,\n}: {\n  id: RuleEntity['id'];\n}): Promise<RuleEntity | null> {\n  const rule = rules.getRules().find(rule => rule.id === id);\n  return rule ? rule.serialize() : null;\n}\n\nasync function getRules() {\n  return rankRules(rules.getRules()).map(rule => rule.serialize());\n}\n\nasync function runRules({\n  transaction,\n}: {\n  transaction: TransactionEntity;\n}): Promise<TransactionEntity> {\n  return rules.runRules(transaction);\n}\n","import { QueryState } from '../../shared/query';\nimport { createApp } from '../app';\nimport * as sheet from '../sheet';\n\nimport { resolveName, unresolveName } from './util';\n\nexport type SpreadsheetHandlers = {\n  'get-cell': typeof getCell;\n  'get-cell-names': typeof getCellNames;\n  'create-query': typeof createQuery;\n};\n\n// Expose functions to the client\nexport const app = createApp<SpreadsheetHandlers>();\napp.method('get-cell', getCell);\napp.method('get-cell-names', getCellNames);\napp.method('create-query', createQuery);\n\nasync function getCell({\n  sheetName,\n  name,\n}: {\n  sheetName: string;\n  name: string;\n}) {\n  const node = sheet.get()._getNode(resolveName(sheetName, name));\n  return { name: node.name, value: node.value };\n}\n\nasync function getCellNames({ sheetName }: { sheetName: string }) {\n  const names = [];\n  for (const name of sheet.get().getNodes().keys()) {\n    const { sheet: nodeSheet, name: nodeName } = unresolveName(name);\n    if (nodeSheet === sheetName) {\n      names.push(nodeName);\n    }\n  }\n  return names;\n}\n\nasync function createQuery({\n  sheetName,\n  name,\n  query,\n}: {\n  sheetName: string;\n  name: string;\n  query: QueryState;\n}) {\n  // Always run it regardless of cache. We don't know anything has changed\n  // between the cache value being saved and now\n  sheet.get().createQuery(sheetName, name, query);\n  return 'ok';\n}\n","import { createApp } from '../app';\n\nimport { repairSync as _repairSync } from './repair';\nimport { resetSync as _resetSync } from './reset';\n\nimport { fullSync } from '.';\n\nexport type SyncHandlers = {\n  sync: typeof sync;\n  'sync-reset': typeof resetSync;\n  'sync-repair': typeof repairSync;\n};\n\nexport const app = createApp<SyncHandlers>();\napp.method('sync', sync);\napp.method('sync-reset', resetSync);\napp.method('sync-repair', repairSync);\n\nasync function sync() {\n  return await fullSync();\n}\n\nasync function resetSync() {\n  return await _resetSync();\n}\n\nasync function repairSync() {\n  await _repairSync();\n}\n","import { Tag } from '../../types/models';\nimport { createApp } from '../app';\nimport * as db from '../db';\nimport { mutator } from '../mutators';\nimport { batchMessages } from '../sync';\nimport { undoable } from '../undo';\n\nexport type TagsHandlers = {\n  'tags-get': typeof getTags;\n  'tags-create': typeof createTag;\n  'tags-delete': typeof deleteTag;\n  'tags-delete-all': typeof deleteAllTags;\n  'tags-update': typeof updateTag;\n};\n\nexport const app = createApp<TagsHandlers>();\napp.method('tags-get', getTags);\napp.method('tags-create', mutator(undoable(createTag)));\napp.method('tags-delete', mutator(undoable(deleteTag)));\napp.method('tags-delete-all', mutator(deleteAllTags));\napp.method('tags-update', mutator(undoable(updateTag)));\n\nasync function getTags(): Promise<Tag[]> {\n  return await db.getTags();\n}\n\nasync function createTag({\n  tag,\n  color,\n  description = null,\n}: Omit<Tag, 'id'>): Promise<Tag> {\n  const id = await db.insertTag({\n    tag: tag.trim(),\n    color: color.trim(),\n    description,\n  });\n\n  return { id, tag, color, description };\n}\n\nasync function deleteTag(tag: Tag): Promise<Tag['id']> {\n  await db.deleteTag(tag);\n  return tag.id;\n}\n\nasync function deleteAllTags(ids: Array<Tag['id']>): Promise<Array<Tag['id']>> {\n  await batchMessages(async () => {\n    for (const id of ids) {\n      await db.deleteTag({ id });\n    }\n  });\n  return ids;\n}\n\nasync function updateTag(tag: Tag): Promise<Tag> {\n  await db.updateTag(tag);\n  return tag;\n}\n","// @ts-strict-ignore\nimport { q } from '../../shared/query';\nimport { TransactionEntity } from '../../types/models';\nimport { createApp } from '../app';\nimport { aqlQuery } from '../aql';\nimport * as db from '../db';\nimport { runMutator } from '../mutators';\nimport { batchUpdateTransactions } from '../transactions';\n\nexport type ToolsHandlers = {\n  'tools/fix-split-transactions': typeof fixSplitTransactions;\n};\n\nexport const app = createApp<ToolsHandlers>();\n\napp.method('tools/fix-split-transactions', fixSplitTransactions);\n\nasync function fixSplitTransactions(): Promise<{\n  numBlankPayees: number;\n  numCleared: number;\n  numDeleted: number;\n  numTransfersFixed: number;\n  numNonParentErrorsFixed: number;\n  numParentTransactionsWithCategoryFixed: number;\n  mismatchedSplits: TransactionEntity[];\n}> {\n  // 1. Check for child transactions that have a blank payee, and set\n  //    the payee to whatever the parent has\n  const blankPayeeRows = await db.all<\n    db.DbViewTransactionInternal & {\n      parentPayee: db.DbViewTransactionInternal['payee'];\n    }\n  >(`\n    SELECT t.*, p.payee AS parentPayee FROM v_transactions_internal t\n    LEFT JOIN v_transactions_internal p ON t.parent_id = p.id\n    WHERE t.is_child = 1 AND t.payee IS NULL AND p.payee IS NOT NULL\n  `);\n\n  await runMutator(async () => {\n    const updated = blankPayeeRows.map(row => ({\n      id: row.id,\n      payee: row.parentPayee,\n    }));\n    await batchUpdateTransactions({ updated });\n  });\n\n  // 2. Make sure the \"cleared\" flag is synced up with the parent\n  // transactions\n  const clearedRows = await db.all<\n    Pick<db.DbViewTransactionInternal, 'id'> &\n      Pick<db.DbViewTransactionInternal, 'cleared'>\n  >(`\n    SELECT t.id, p.cleared FROM v_transactions_internal t\n    LEFT JOIN v_transactions_internal p ON t.parent_id = p.id\n    WHERE t.is_child = 1 AND t.cleared != p.cleared\n  `);\n\n  await runMutator(async () => {\n    const updated = clearedRows.map(row => ({\n      id: row.id,\n      cleared: row.cleared === 1,\n    }));\n    await batchUpdateTransactions({ updated });\n  });\n\n  // 3. Mark the `tombstone` field as true on any child transactions\n  //    that have a dead parent\n  const deletedRows = await db.all<db.DbViewTransactionInternal>(`\n    SELECT t.* FROM v_transactions_internal t\n    LEFT JOIN v_transactions_internal p ON t.parent_id = p.id\n    WHERE t.is_child = 1 AND t.tombstone = 0 AND (p.tombstone = 1 OR p.id IS NULL)\n  `);\n\n  await runMutator(async () => {\n    const updated = deletedRows.map(row => ({ id: row.id, tombstone: true }));\n    await batchUpdateTransactions({ updated });\n  });\n\n  const splitTransactions = (\n    await aqlQuery(\n      q('transactions')\n        .options({ splits: 'grouped' })\n        .filter({\n          is_parent: true,\n        })\n        .select('*'),\n    )\n  ).data;\n\n  const mismatchedSplits = splitTransactions.filter(t => {\n    const subValue = t.subtransactions.reduce((acc, st) => acc + st.amount, 0);\n\n    return subValue !== t.amount;\n  });\n\n  // 5. Fix transfers that should not have categories\n  const brokenTransfers = await db.all<\n    Pick<db.DbViewTransactionInternal, 'id'>\n  >(`\n    SELECT t1.id\n    FROM v_transactions_internal t1\n           JOIN accounts a1 ON t1.account = a1.id\n           JOIN v_transactions_internal t2 ON t1.transfer_id = t2.id\n           JOIN accounts a2 ON t2.account = a2.id\n    WHERE a1.offbudget = a2.offbudget\n      AND t1.category IS NOT NULL\n  `);\n\n  await runMutator(async () => {\n    const updated = brokenTransfers.map(row => ({\n      id: row.id,\n      category: null,\n    }));\n    await batchUpdateTransactions({ updated });\n  });\n\n  // 6. Remove transaction errors from non-parent transactions\n  const errorRows = await db.all<Pick<db.DbViewTransactionInternal, 'id'>>(`\n    SELECT id FROM v_transactions_internal WHERE error IS NOT NULL AND is_parent = 0\n  `);\n\n  await runMutator(async () => {\n    const updated = errorRows.map(({ id }) => ({ id, error: null }));\n    await batchUpdateTransactions({ updated });\n  });\n\n  // 7. Clear categories of parent transactions\n  const parentTransactionsWithCategory = await db.all<\n    Pick<db.DbViewTransactionInternal, 'id'>\n  >(`\n    SELECT id FROM transactions WHERE isParent = 1 AND category IS NOT NULL\n  `);\n\n  await runMutator(async () => {\n    const updated = parentTransactionsWithCategory.map(({ id }) => ({\n      id,\n      category: null,\n    }));\n    await batchUpdateTransactions({ updated });\n  });\n\n  return {\n    numBlankPayees: blankPayeeRows.length,\n    numCleared: clearedRows.length,\n    numDeleted: deletedRows.length,\n    numTransfersFixed: brokenTransfers.length,\n    numNonParentErrorsFixed: errorRows.length,\n    numParentTransactionsWithCategoryFixed:\n      parentTransactionsWithCategory.length,\n    mismatchedSplits,\n  };\n}\n","// @ts-strict-ignore\nimport { stringify as csvStringify } from 'csv-stringify/sync';\n\nimport { integerToAmount } from '../../../shared/util';\nimport { aqlQuery } from '../../aql';\n\nexport async function exportToCSV(\n  transactions,\n  accounts,\n  categoryGroups,\n  payees,\n) {\n  const accountNamesById = accounts.reduce((reduced, { id, name }) => {\n    reduced[id] = name;\n    return reduced;\n  }, {});\n\n  const categoryNamesById = categoryGroups.reduce(\n    (reduced, { name, categories: subCategories }) => {\n      subCategories.forEach(\n        subCategory =>\n          (reduced[subCategory.id] = `${name}: ${subCategory.name}`),\n      );\n      return reduced;\n    },\n    {},\n  );\n\n  const payeeNamesById = payees.reduce((reduced, { id, name }) => {\n    reduced[id] = name;\n    return reduced;\n  }, {});\n\n  const transactionsForExport = transactions.map(\n    ({\n      account,\n      date,\n      payee,\n      notes,\n      category,\n      amount,\n      cleared,\n      reconciled,\n    }) => ({\n      Account: accountNamesById[account],\n      Date: date,\n      Payee: payeeNamesById[payee],\n      Notes: notes,\n      Category: categoryNamesById[category],\n      Amount: amount == null ? 0 : integerToAmount(amount),\n      Cleared: cleared,\n      Reconciled: reconciled,\n    }),\n  );\n\n  return csvStringify(transactionsForExport, { header: true });\n}\n\nexport async function exportQueryToCSV(query) {\n  const { data: transactions } = await aqlQuery(\n    query\n      .select([\n        { Id: 'id' },\n        { Account: 'account.name' },\n        { Date: 'date' },\n        { Payee: 'payee.name' },\n        { ParentId: 'parent_id' },\n        { IsParent: 'is_parent' },\n        { IsChild: 'is_child' },\n        { SortOrder: 'sort_order' },\n        { Notes: 'notes' },\n        { Category: 'category.name' },\n        { Amount: 'amount' },\n        { Cleared: 'cleared' },\n        { Reconciled: 'reconciled' },\n      ])\n      .options({ splits: 'all' }),\n  );\n\n  // initialize a map to allow splits to have correct number of split from\n  const parentsChildCount: Map<number, number> = new Map();\n  const childSplitOrder: Map<number, number> = new Map();\n\n  // find children, their order, and total # siblings\n  for (const trans of transactions) {\n    if (trans.IsChild) {\n      let childNumber = parentsChildCount.get(trans.ParentId) || 0;\n      childNumber++;\n      childSplitOrder.set(trans.Id, childNumber);\n      parentsChildCount.set(trans.ParentId, childNumber);\n    }\n  }\n\n  // map final properties for export and grab the child count for splits from their parent transaction\n  const transactionsForExport = transactions.map(trans => {\n    return {\n      Account: trans.Account,\n      Date: trans.Date,\n      Payee: trans.Payee,\n      Notes: trans.IsParent\n        ? '(SPLIT INTO ' +\n          parentsChildCount.get(trans.Id) +\n          ') ' +\n          (trans.Notes || '')\n        : trans.IsChild\n          ? '(SPLIT ' +\n            childSplitOrder.get(trans.Id) +\n            ' OF ' +\n            parentsChildCount.get(trans.ParentId) +\n            ') ' +\n            (trans.Notes || '')\n          : trans.Notes,\n      Category: trans.Category,\n      Amount: trans.IsParent\n        ? 0\n        : trans.Amount == null\n          ? 0\n          : integerToAmount(trans.Amount),\n      Split_Amount: trans.IsParent ? integerToAmount(trans.Amount) : 0,\n      Cleared:\n        trans.Reconciled === true\n          ? 'Reconciled'\n          : trans.Cleared === true\n            ? 'Cleared'\n            : 'Not cleared',\n    };\n  });\n\n  return csvStringify(transactionsForExport, { header: true });\n}\n","// @ts-strict-ignore\nimport { parseStringPromise } from 'xml2js';\n\nimport { dayFromDate } from '../../../shared/months';\n\ntype OFXTransaction = {\n  amount: string;\n  fitId: string;\n  name: string;\n  date: string;\n  memo: string;\n  type: string;\n};\n\ntype OFXParseResult = {\n  headers: Record<string, unknown>;\n  transactions: OFXTransaction[];\n};\n\nfunction sgml2Xml(sgml) {\n  return sgml\n    .replace(/&/g, '&#038;') // Replace ampersands\n    .replace(/&amp;/g, '&#038;')\n    .replace(/>\\s+</g, '><') // remove whitespace inbetween tag close/open\n    .replace(/\\s+</g, '<') // remove whitespace before a close tag\n    .replace(/>\\s+/g, '>') // remove whitespace after a close tag\n    .replace(/\\.(?=[^<>]*>)/g, '') // Remove dots in tag names\n    .replace(/<(\\w+?)>([^<]+)/g, '<$1>$2</<added>$1>') // Add a new end-tags for the ofx elements\n    .replace(/<\\/<added>(\\w+?)>(<\\/\\1>)?/g, '</$1>'); // Remove duplicate end-tags\n}\n\nexport function html2Plain(value) {\n  return value\n    ?.replace(/&lt;/g, '<') // lessthan\n    .replace(/&gt;/g, '>') // greaterthan\n    .replace(/&#39;/g, \"'\") // eslint-disable-line actual/typography\n    .replace(/&quot;/g, '\"') // eslint-disable-line actual/typography\n    .replace(/(&amp;|&#038;)/g, '&'); // ampersands\n}\n\nasync function parseXml(content) {\n  return await parseStringPromise(content, {\n    explicitArray: false,\n    trim: true,\n  });\n}\n\nfunction getStmtTrn(data) {\n  const ofx = data?.['OFX'];\n  if (ofx?.['CREDITCARDMSGSRSV1'] != null) {\n    return getCcStmtTrn(ofx);\n  } else if (ofx?.['INVSTMTMSGSRSV1'] != null) {\n    return getInvStmtTrn(ofx);\n  } else {\n    return getBankStmtTrn(ofx);\n  }\n}\n\nfunction getBankStmtTrn(ofx) {\n  // Somes values could be an array or a single object.\n  // xml2js serializes single item to an object and multiple to an array.\n  const msg = ofx?.['BANKMSGSRSV1'];\n  const stmtTrnRs = getAsArray(msg?.['STMTTRNRS']);\n  const result = stmtTrnRs.flatMap(s => {\n    const stmtRs = s?.['STMTRS'];\n    const tranList = stmtRs?.['BANKTRANLIST'];\n    const stmtTrn = tranList?.['STMTTRN'];\n    return getAsArray(stmtTrn);\n  });\n  return result;\n}\n\nfunction getCcStmtTrn(ofx) {\n  // Some values could be an array or a single object.\n  // xml2js serializes single item to an object and multiple to an array.\n  const msg = ofx?.['CREDITCARDMSGSRSV1'];\n  const stmtTrnRs = getAsArray(msg?.['CCSTMTTRNRS']);\n  const result = stmtTrnRs.flatMap(s => {\n    const stmtRs = s?.['CCSTMTRS'];\n    const tranList = stmtRs?.['BANKTRANLIST'];\n    const stmtTrn = tranList?.['STMTTRN'];\n    return getAsArray(stmtTrn);\n  });\n  return result;\n}\n\nfunction getInvStmtTrn(ofx) {\n  // Somes values could be an array or a single object.\n  // xml2js serializes single item to an object and multiple to an array.\n  const msg = ofx?.['INVSTMTMSGSRSV1'];\n  const stmtTrnRs = getAsArray(msg?.['INVSTMTTRNRS']);\n  const result = stmtTrnRs.flatMap(s => {\n    const stmtRs = s?.['INVSTMTRS'];\n    const tranList = stmtRs?.['INVTRANLIST'];\n    const stmtTrn = tranList?.['INVBANKTRAN']?.flatMap(t => t?.['STMTTRN']);\n    return getAsArray(stmtTrn);\n  });\n  return result;\n}\n\nfunction getAsArray(value) {\n  return Array.isArray(value) ? value : value === undefined ? [] : [value];\n}\n\nfunction mapOfxTransaction(stmtTrn): OFXTransaction {\n  // YYYYMMDDHHMMSS format. We just need the date.\n  const dtPosted = stmtTrn['DTPOSTED'];\n  const transactionDate = dtPosted\n    ? new Date(\n        Number(dtPosted.substring(0, 4)), // year\n        Number(dtPosted.substring(4, 6)) - 1, // month (zero-based index)\n        Number(dtPosted.substring(6, 8)), // date\n      )\n    : null;\n\n  return {\n    amount: stmtTrn['TRNAMT'],\n    type: stmtTrn['TRNTYPE'],\n    fitId: stmtTrn['FITID'],\n    date: dayFromDate(transactionDate),\n    name: html2Plain(stmtTrn['NAME']),\n    memo: html2Plain(stmtTrn['MEMO']),\n  };\n}\n\nexport async function ofx2json(ofx: string): Promise<OFXParseResult> {\n  // firstly, split into the header attributes and the footer sgml\n  const contents = ofx.split(/<OFX\\s?>/, 2);\n\n  // firstly, parse the headers\n  const headerString = contents[0].split(/\\r?\\n/);\n  const headers = {};\n  headerString.forEach(attrs => {\n    if (attrs) {\n      const headAttr = attrs.split(/:/, 2);\n      headers[headAttr[0]] = headAttr[1];\n    }\n  });\n\n  // make the SGML and the XML\n  const content = `<OFX>${contents[1]}`;\n\n  // Parse the XML/SGML portion of the file into an object\n  // Try as XML first, and if that fails do the SGML->XML mangling\n  let dataParsed = null;\n  try {\n    dataParsed = await parseXml(content);\n  } catch (e) {\n    const sanitized = sgml2Xml(content);\n    dataParsed = await parseXml(sanitized);\n  }\n\n  return {\n    headers,\n    transactions: getStmtTrn(dataParsed).map(mapOfxTransaction),\n  };\n}\n","// @ts-strict-ignore\ntype Division = {\n  category?: string;\n  subcategory?: string;\n  description?: string;\n  amount?: number;\n};\n\ntype QIFTransaction = {\n  date?: string;\n  amount?: string;\n  number?: string;\n  memo?: string;\n  address?: string[];\n  clearedStatus?: string;\n  category?: string;\n  subcategory?: string;\n  payee?: string;\n  division?: Division[];\n};\n\nexport function qif2json(qif, options: { dateFormat?: string } = {}) {\n  const lines = qif.split('\\n').filter(Boolean);\n  let line = lines.shift();\n  const type = /!Type:([^$]*)$/.exec(line.trim());\n  const data: {\n    dateFormat: string | undefined;\n    type?;\n    transactions: QIFTransaction[];\n  } = {\n    dateFormat: options.dateFormat,\n    transactions: [],\n  };\n  const transactions = data.transactions;\n  let transaction: QIFTransaction = {};\n\n  if (!type || !type.length) {\n    throw new Error('File does not appear to be a valid qif file: ' + line);\n  }\n  data.type = type[1];\n\n  let division: Division = {};\n\n  while ((line = lines.shift())) {\n    line = line.trim();\n    if (line === '^') {\n      transactions.push(transaction);\n      transaction = {};\n      continue;\n    }\n    switch (line[0]) {\n      case 'D':\n        transaction.date = line.substring(1);\n        break;\n      case 'T':\n        transaction.amount = line.substring(1);\n        break;\n      case 'N':\n        transaction.number = line.substring(1);\n        break;\n      case 'M':\n        transaction.memo = line.substring(1);\n        break;\n      case 'A':\n        transaction.address = (transaction.address || []).concat(\n          line.substring(1),\n        );\n        break;\n      case 'P':\n        transaction.payee = line.substring(1).replace(/&amp;/g, '&');\n        break;\n      case 'L':\n        const lArray = line.substring(1).split(':');\n        transaction.category = lArray[0];\n        if (lArray[1] !== undefined) {\n          transaction.subcategory = lArray[1];\n        }\n        break;\n      case 'C':\n        transaction.clearedStatus = line.substring(1);\n        break;\n      case 'S':\n        const sArray = line.substring(1).split(':');\n        division.category = sArray[0];\n        if (sArray[1] !== undefined) {\n          division.subcategory = sArray[1];\n        }\n        break;\n      case 'E':\n        division.description = line.substring(1);\n        break;\n      case '$':\n        division.amount = parseFloat(line.substring(1));\n        if (!(transaction.division instanceof Array)) {\n          transaction.division = [];\n        }\n        transaction.division.push(division);\n        division = {};\n        break;\n\n      default:\n        throw new Error('Unknown Detail Code: ' + line[0]);\n    }\n  }\n\n  if (Object.keys(transaction).length) {\n    transactions.push(transaction);\n  }\n  return data;\n}\n","// @ts-strict-ignore\nimport { parseStringPromise } from 'xml2js';\n\ntype DateRef = { DtTm: string } | { Dt: string };\ntype Amt = { _: string };\n\ninterface Ntry {\n  AcctSvcrRef?: string;\n  Amt?: Amt;\n  CdtDbtInd: 'CRDT' | 'DBIT';\n  ValDt?: DateRef;\n  BookgDt?: DateRef;\n  NtryDtls?: NtryDtls;\n  AddtlNtryInf?: string;\n  NtryRef?: string;\n}\n\ninterface NtryDtls {\n  TxDtls: TxDtls | TxDtls[];\n}\n\ninterface TxDtls {\n  RltdPties?: {\n    Cdtr: {\n      Nm: string;\n    };\n    Dbtr: {\n      Nm: string;\n    };\n  };\n  RmtInf?: {\n    Ustrd: string | string[];\n  };\n}\n\ninterface TransactionCAMT {\n  amount: number;\n  date: string;\n  payee_name: string | null;\n  imported_payee: string | null;\n  notes: string | null;\n  imported_id?: string;\n}\n\nfunction findKeys(obj: object, key: string): unknown[] {\n  let result = [];\n  for (const i in obj) {\n    if (!obj.hasOwnProperty(i)) continue;\n    if (i === key) {\n      if (Array.isArray(obj[i])) {\n        result = result.concat(obj[i]);\n      } else {\n        result.push(obj[i]);\n      }\n    }\n    if (typeof obj[i] === 'object') {\n      result = result.concat(findKeys(obj[i], key));\n    }\n  }\n  return result;\n}\n\nfunction getPayeeNameFromTxDtls(\n  TxDtls: TxDtls,\n  isDebit: boolean,\n): string | null {\n  if (TxDtls?.RltdPties) {\n    const key = isDebit ? TxDtls.RltdPties.Cdtr : TxDtls.RltdPties.Dbtr;\n    const Nm = findKeys(key, 'Nm');\n    return Nm.length > 0 ? (Nm[0] as string) : null;\n  }\n  return null;\n}\n\nfunction getNotesFromTxDtls(TxDtls: TxDtls): string | null {\n  if (TxDtls?.RmtInf) {\n    const Ustrd = TxDtls.RmtInf.Ustrd;\n    return Array.isArray(Ustrd) ? Ustrd.join(' ') : Ustrd;\n  }\n  return null;\n}\n\nfunction convertToNumberOrNull(value: string): number | null {\n  const number = Number(value);\n  return isNaN(number) ? null : number;\n}\n\nfunction getDtOrDtTm(Date: DateRef | null): string | null {\n  if (!Date) {\n    return null;\n  }\n  if ('DtTm' in Date) {\n    return Date.DtTm.slice(0, 10);\n  }\n  return Date?.Dt;\n}\n\nexport async function xmlCAMT2json(\n  content: string,\n): Promise<TransactionCAMT[]> {\n  const data = await parseStringPromise(content, { explicitArray: false });\n  const entries = findKeys(data, 'Ntry') as Ntry[];\n\n  const transactions: TransactionCAMT[] = [];\n\n  for (const entry of entries) {\n    /*\n      For (camt.052/054) could filter on entry.Sts= BOOK or PDNG, currently importing all entries\n    */\n\n    const id = entry.AcctSvcrRef;\n\n    const amount = convertToNumberOrNull(entry.Amt?._);\n    const isDebit = entry.CdtDbtInd === 'DBIT';\n\n    const date = getDtOrDtTm(entry.ValDt) || getDtOrDtTm(entry.BookgDt);\n\n    if (Array.isArray(entry.NtryDtls?.TxDtls)) {\n      // we add subtransactions as normal transactions as importing split with subtransactions is not supported\n      // amount, and payee_name are not processed correctly for subtransaction.\n      entry.NtryDtls.TxDtls.forEach((TxDtls: TxDtls) => {\n        const subPayee = getPayeeNameFromTxDtls(TxDtls, isDebit);\n        const subNotes = getNotesFromTxDtls(TxDtls);\n        const Amt = findKeys(TxDtls, 'Amt') as Amt[];\n        const amount = Amt.length > 0 ? convertToNumberOrNull(Amt[0]._) : null;\n        transactions.push({\n          amount: isDebit ? -amount : amount,\n          date,\n          payee_name: subPayee,\n          imported_payee: subPayee,\n          notes: subNotes,\n        });\n      });\n    } else {\n      let payee_name: string | null;\n      let notes: string | null;\n      payee_name = getPayeeNameFromTxDtls(entry.NtryDtls?.TxDtls, isDebit);\n      if (!payee_name && entry.AddtlNtryInf) {\n        payee_name = entry.AddtlNtryInf;\n      }\n      notes = getNotesFromTxDtls(entry.NtryDtls?.TxDtls);\n      if (!notes && entry.AddtlNtryInf && entry.AddtlNtryInf !== payee_name) {\n        notes = entry.AddtlNtryInf;\n      }\n      if (!payee_name && !notes && entry.NtryRef) {\n        notes = entry.NtryRef;\n      }\n      if (payee_name && notes && payee_name.includes(notes)) {\n        notes = null;\n      }\n\n      const transaction: TransactionCAMT = {\n        amount: isDebit ? -amount : amount,\n        date,\n        payee_name,\n        imported_payee: payee_name,\n        notes,\n      };\n      if (id) {\n        transaction.imported_id = id;\n      }\n      transactions.push(transaction);\n    }\n  }\n  return transactions.filter(\n    trans => trans.date != null && trans.amount != null,\n  );\n}\n","// @ts-strict-ignore\nimport { parse as csv2json } from 'csv-parse/sync';\n\nimport * as fs from '../../../platform/server/fs';\nimport { looselyParseAmount } from '../../../shared/util';\n\nimport { ofx2json } from './ofx2json';\nimport { qif2json } from './qif2json';\nimport { xmlCAMT2json } from './xmlcamt2json';\n\ntype ParseError = { message: string; internal: string };\nexport type ParseFileResult = {\n  errors?: ParseError[];\n  transactions?: unknown[];\n};\n\nexport type ParseFileOptions = {\n  hasHeaderRow?: boolean;\n  delimiter?: string;\n  fallbackMissingPayeeToMemo?: boolean;\n  skipLines?: number;\n  importNotes?: boolean;\n};\n\nexport async function parseFile(\n  filepath: string,\n  options: ParseFileOptions = {},\n): Promise<ParseFileResult> {\n  const errors = Array<ParseError>();\n  const m = filepath.match(/\\.[^.]*$/);\n\n  if (m) {\n    const ext = m[0];\n\n    switch (ext.toLowerCase()) {\n      case '.qif':\n        return parseQIF(filepath, options);\n      case '.csv':\n      case '.tsv':\n        return parseCSV(filepath, options);\n      case '.ofx':\n      case '.qfx':\n        return parseOFX(filepath, options);\n      case '.xml':\n        return parseCAMT(filepath, options);\n      default:\n    }\n  }\n\n  errors.push({\n    message: 'Invalid file type',\n    internal: '',\n  });\n  return { errors, transactions: [] };\n}\n\nasync function parseCSV(\n  filepath: string,\n  options: ParseFileOptions,\n): Promise<ParseFileResult> {\n  const errors = Array<ParseError>();\n  let contents = await fs.readFile(filepath);\n\n  if (options.skipLines > 0) {\n    const lines = contents.split(/\\r?\\n/);\n    contents = lines.slice(options.skipLines).join('\\r\\n');\n  }\n\n  let data;\n  try {\n    data = csv2json(contents, {\n      columns: options?.hasHeaderRow,\n      bom: true,\n      delimiter: options?.delimiter || ',',\n      // eslint-disable-next-line actual/typography\n      quote: '\"',\n      trim: true,\n      relax_column_count: true,\n      skip_empty_lines: true,\n    });\n  } catch (err) {\n    errors.push({\n      message: 'Failed parsing: ' + err.message,\n      internal: err.message,\n    });\n    return { errors, transactions: [] };\n  }\n\n  return { errors, transactions: data };\n}\n\nasync function parseQIF(\n  filepath: string,\n  options: ParseFileOptions = {},\n): Promise<ParseFileResult> {\n  const errors = Array<ParseError>();\n  const contents = await fs.readFile(filepath);\n\n  let data;\n  try {\n    data = qif2json(contents);\n  } catch (err) {\n    errors.push({\n      message: 'Failed parsing: doesn’t look like a valid QIF file.',\n      internal: err.stack,\n    });\n    return { errors, transactions: [] };\n  }\n\n  return {\n    errors: [],\n    transactions: data.transactions\n      .map(trans => ({\n        amount: trans.amount != null ? looselyParseAmount(trans.amount) : null,\n        date: trans.date,\n        payee_name: trans.payee,\n        imported_payee: trans.payee,\n        notes: options.importNotes ? trans.memo || null : null,\n      }))\n      .filter(trans => trans.date != null && trans.amount != null),\n  };\n}\n\nasync function parseOFX(\n  filepath: string,\n  options: ParseFileOptions,\n): Promise<ParseFileResult> {\n  const errors = Array<ParseError>();\n  const contents = await fs.readFile(filepath);\n\n  let data;\n  try {\n    data = await ofx2json(contents);\n  } catch (err) {\n    errors.push({\n      message: 'Failed importing file',\n      internal: err.stack,\n    });\n    return { errors };\n  }\n\n  // Banks don't always implement the OFX standard properly\n  // If no payee is available try and fallback to memo\n  const useMemoFallback = options.fallbackMissingPayeeToMemo;\n\n  return {\n    errors,\n    transactions: data.transactions.map(trans => {\n      return {\n        amount: trans.amount,\n        imported_id: trans.fitId,\n        date: trans.date,\n        payee_name: trans.name || (useMemoFallback ? trans.memo : null),\n        imported_payee: trans.name || (useMemoFallback ? trans.memo : null),\n        notes: options.importNotes ? trans.memo || null : null, //memo used for payee\n      };\n    }),\n  };\n}\n\nasync function parseCAMT(\n  filepath: string,\n  options: ParseFileOptions = {},\n): Promise<ParseFileResult> {\n  const errors = Array<ParseError>();\n  const contents = await fs.readFile(filepath);\n\n  let data;\n  try {\n    data = await xmlCAMT2json(contents);\n  } catch (err) {\n    console.error(err);\n    errors.push({\n      message: 'Failed importing file',\n      internal: err.stack,\n    });\n    return { errors };\n  }\n\n  return {\n    errors,\n    transactions: data.map(trans => ({\n      ...trans,\n      notes: options.importNotes ? trans.notes : null,\n    })),\n  };\n}\n","import { type TransactionEntity } from '../../types/models';\nimport * as db from '../db';\n\nexport async function mergeTransactions(\n  transactions: Pick<TransactionEntity, 'id'>[],\n): Promise<TransactionEntity['id']> {\n  // make sure all values have ids\n  const txIds = transactions?.map(x => x?.id).filter(Boolean) || [];\n  if (txIds.length !== 2) {\n    throw new Error(\n      'Merging is only possible with 2 transactions, but found ' +\n        JSON.stringify(transactions),\n    );\n  }\n\n  // get most recent transactions\n  const [a, b]: TransactionEntity[] = await Promise.all(\n    txIds.map(db.getTransaction),\n  );\n  if (!a || !b) {\n    throw new Error('One of the provided transactions does not exist');\n  } else if (a.amount !== b.amount) {\n    throw new Error('Transaction amounts must match for merge');\n  }\n  const { keep, drop } = determineKeepDrop(a, b);\n\n  await Promise.all([\n    db.updateTransaction({\n      id: keep.id,\n      payee: keep.payee || drop.payee,\n      category: keep.category || drop.category,\n      notes: keep.notes || drop.notes,\n      cleared: keep.cleared || drop.cleared,\n      reconciled: keep.reconciled || drop.reconciled,\n    } as TransactionEntity),\n    db.deleteTransaction(drop),\n  ]);\n  return keep.id;\n}\n\nfunction determineKeepDrop(\n  a: TransactionEntity,\n  b: TransactionEntity,\n): { keep: TransactionEntity; drop: TransactionEntity } {\n  // if one is imported through bank sync and the other is manual,\n  // keep the imported transaction\n  if (b.imported_id && !a.imported_id) {\n    return { keep: b, drop: a };\n  } else if (a.imported_id && !b.imported_id) {\n    return { keep: a, drop: b };\n  }\n\n  // same logic but for imported transactions\n  if (b.imported_payee && !a.imported_payee) {\n    return { keep: b, drop: a };\n  } else if (a.imported_payee && !b.imported_payee) {\n    return { keep: a, drop: b };\n  }\n\n  // keep the earlier transaction\n  if (a.date.localeCompare(b.date) < 0) {\n    return { keep: a, drop: b };\n  } else {\n    return { keep: b, drop: a };\n  }\n}\n","import { q, Query, QueryState } from '../../shared/query';\nimport {\n  AccountEntity,\n  CategoryGroupEntity,\n  PayeeEntity,\n  TransactionEntity,\n} from '../../types/models';\nimport { createApp } from '../app';\nimport { aqlQuery } from '../aql';\nimport { mutator } from '../mutators';\nimport { undoable } from '../undo';\n\nimport { exportQueryToCSV, exportToCSV } from './export/export-to-csv';\nimport { parseFile, ParseFileOptions } from './import/parse-file';\nimport { mergeTransactions } from './merge';\n\nimport { batchUpdateTransactions } from '.';\n\nexport type TransactionHandlers = {\n  'transactions-batch-update': typeof handleBatchUpdateTransactions;\n  'transaction-add': typeof addTransaction;\n  'transaction-update': typeof updateTransaction;\n  'transaction-delete': typeof deleteTransaction;\n  'transactions-parse-file': typeof parseTransactionsFile;\n  'transactions-export': typeof exportTransactions;\n  'transactions-export-query': typeof exportTransactionsQuery;\n  'transactions-merge': typeof mergeTransactions;\n  'get-earliest-transaction': typeof getEarliestTransaction;\n};\n\nasync function handleBatchUpdateTransactions({\n  added,\n  deleted,\n  updated,\n  learnCategories,\n}: Parameters<typeof batchUpdateTransactions>[0]) {\n  const result = await batchUpdateTransactions({\n    added,\n    updated,\n    deleted,\n    learnCategories,\n  });\n\n  return result;\n}\n\nasync function addTransaction(transaction: TransactionEntity) {\n  await handleBatchUpdateTransactions({ added: [transaction] });\n  return {};\n}\n\nasync function updateTransaction(transaction: TransactionEntity) {\n  await handleBatchUpdateTransactions({ updated: [transaction] });\n  return {};\n}\n\nasync function deleteTransaction(transaction: Pick<TransactionEntity, 'id'>) {\n  await handleBatchUpdateTransactions({ deleted: [transaction] });\n  return {};\n}\n\nasync function parseTransactionsFile({\n  filepath,\n  options,\n}: {\n  filepath: string;\n  options: ParseFileOptions;\n}) {\n  return parseFile(filepath, options);\n}\n\nasync function exportTransactions({\n  transactions,\n  accounts,\n  categoryGroups,\n  payees,\n}: {\n  transactions: TransactionEntity[];\n  accounts: AccountEntity[];\n  categoryGroups: CategoryGroupEntity[];\n  payees: PayeeEntity[];\n}) {\n  return exportToCSV(transactions, accounts, categoryGroups, payees);\n}\n\nasync function exportTransactionsQuery({\n  query: queryState,\n}: {\n  query: QueryState;\n}) {\n  return exportQueryToCSV(new Query(queryState));\n}\n\nasync function getEarliestTransaction() {\n  const { data } = await aqlQuery(\n    q('transactions')\n      .options({ splits: 'none' })\n      .orderBy({ date: 'asc' })\n      .select('*')\n      .limit(1),\n  );\n  return data[0] || null;\n}\n\nexport const app = createApp<TransactionHandlers>();\n\napp.method(\n  'transactions-batch-update',\n  mutator(undoable(handleBatchUpdateTransactions)),\n);\napp.method('transactions-merge', mutator(undoable(mergeTransactions)));\n\napp.method('transaction-add', mutator(addTransaction));\napp.method('transaction-update', mutator(updateTransaction));\napp.method('transaction-delete', mutator(deleteTransaction));\napp.method('transactions-parse-file', mutator(parseTransactionsFile));\napp.method('transactions-export', mutator(exportTransactions));\napp.method('transactions-export-query', mutator(exportTransactionsQuery));\napp.method('get-earliest-transaction', getEarliestTransaction);\n","// @ts-strict-ignore\nimport './polyfills';\n\nimport * as injectAPI from '@actual-app/api/injected';\n\nimport * as asyncStorage from '../platform/server/asyncStorage';\nimport * as connection from '../platform/server/connection';\nimport * as fs from '../platform/server/fs';\nimport * as sqlite from '../platform/server/sqlite';\nimport { q } from '../shared/query';\nimport { Handlers } from '../types/handlers';\n\nimport { app as accountsApp } from './accounts/app';\nimport { app as adminApp } from './admin/app';\nimport { installAPI } from './api';\nimport { aqlQuery } from './aql';\nimport { app as authApp } from './auth/app';\nimport { app as budgetApp } from './budget/app';\nimport { app as budgetFilesApp } from './budgetfiles/app';\nimport { app as dashboardApp } from './dashboard/app';\nimport * as db from './db';\nimport * as encryption from './encryption';\nimport { app as encryptionApp } from './encryption/app';\nimport { app as filtersApp } from './filters/app';\nimport { app } from './main-app';\nimport { mutator, runHandler } from './mutators';\nimport { app as notesApp } from './notes/app';\nimport { app as payeesApp } from './payees/app';\nimport { get } from './post';\nimport { app as preferencesApp } from './preferences/app';\nimport * as prefs from './prefs';\nimport { app as reportsApp } from './reports/app';\nimport { app as rulesApp } from './rules/app';\nimport { app as schedulesApp } from './schedules/app';\nimport { getServer, setServer } from './server-config';\nimport { app as spreadsheetApp } from './spreadsheet/app';\nimport { fullSync, setSyncingMode } from './sync';\nimport { app as syncApp } from './sync/app';\nimport { app as tagsApp } from './tags/app';\nimport { app as toolsApp } from './tools/app';\nimport { app as transactionsApp } from './transactions/app';\nimport * as rules from './transactions/transaction-rules';\nimport { undo, redo } from './undo';\n\n// handlers\n\n// need to work around the type system here because the object\n// is /currently/ empty but we promise to fill it in later\nexport let handlers = {} as unknown as Handlers;\n\nhandlers['undo'] = mutator(async function () {\n  return undo();\n});\n\nhandlers['redo'] = mutator(function () {\n  return redo();\n});\n\nhandlers['make-filters-from-conditions'] = async function ({\n  conditions,\n  applySpecialCases,\n}) {\n  return rules.conditionsToAQL(conditions, { applySpecialCases });\n};\n\nhandlers['query'] = async function (query) {\n  if (query['table'] == null) {\n    throw new Error('query has no table, did you forgot to call `.serialize`?');\n  }\n\n  return aqlQuery(query);\n};\n\nhandlers['get-server-version'] = async function () {\n  if (!getServer()) {\n    return { error: 'no-server' };\n  }\n\n  let version;\n  try {\n    const res = await get(getServer().BASE_SERVER + '/info');\n\n    const info = JSON.parse(res);\n    version = info.build.version;\n  } catch (err) {\n    return { error: 'network-failure' };\n  }\n\n  return { version };\n};\n\nhandlers['get-server-url'] = async function () {\n  return getServer() && getServer().BASE_SERVER;\n};\n\nhandlers['set-server-url'] = async function ({ url, validate = true }) {\n  if (url == null) {\n    await asyncStorage.removeItem('user-token');\n  } else {\n    url = url.replace(/\\/+$/, '');\n\n    if (validate) {\n      // Validate the server is running\n      const result = await runHandler(handlers['subscribe-needs-bootstrap'], {\n        url,\n      });\n      if ('error' in result) {\n        return { error: result.error };\n      }\n    }\n  }\n\n  await asyncStorage.setItem('server-url', url);\n  await asyncStorage.setItem('did-bootstrap', true);\n  setServer(url);\n  return {};\n};\n\nhandlers['app-focused'] = async function () {\n  if (prefs.getPrefs() && prefs.getPrefs().id) {\n    // First we sync\n    fullSync();\n  }\n};\n\nhandlers = installAPI(handlers) as Handlers;\n\ninjectAPI.override((name, args) => runHandler(app.handlers[name], args));\n\n// A hack for now until we clean up everything\napp.handlers = handlers;\napp.combine(\n  authApp,\n  schedulesApp,\n  budgetApp,\n  dashboardApp,\n  notesApp,\n  preferencesApp,\n  toolsApp,\n  filtersApp,\n  reportsApp,\n  rulesApp,\n  adminApp,\n  transactionsApp,\n  accountsApp,\n  payeesApp,\n  spreadsheetApp,\n  syncApp,\n  budgetFilesApp,\n  encryptionApp,\n  tagsApp,\n);\n\nexport function getDefaultDocumentDir() {\n  return fs.join(process.env.ACTUAL_DOCUMENT_DIR, 'Actual');\n}\n\nasync function setupDocumentsDir() {\n  async function ensureExists(dir) {\n    // Make sure the document folder exists\n    if (!(await fs.exists(dir))) {\n      await fs.mkdir(dir);\n    }\n  }\n\n  let documentDir = await asyncStorage.getItem('document-dir');\n\n  // Test the existing documents directory to make sure it's a valid\n  // path that exists, and if it errors fallback to the default one\n  if (documentDir) {\n    try {\n      await ensureExists(documentDir);\n    } catch (e) {\n      documentDir = null;\n    }\n  }\n\n  if (!documentDir) {\n    documentDir = getDefaultDocumentDir();\n  }\n\n  await ensureExists(documentDir);\n  fs._setDocumentDir(documentDir);\n}\n\nexport async function initApp(isDev, socketName) {\n  await sqlite.init();\n  await Promise.all([asyncStorage.init(), fs.init()]);\n  await setupDocumentsDir();\n\n  const keysStr = await asyncStorage.getItem('encrypt-keys');\n  if (keysStr) {\n    try {\n      const keys = JSON.parse(keysStr);\n\n      // Load all the keys\n      await Promise.all(\n        Object.keys(keys).map(fileId => {\n          return encryption.loadKey(keys[fileId]);\n        }),\n      );\n    } catch (e) {\n      console.log('Error loading key', e);\n      throw new Error('load-key-error');\n    }\n  }\n\n  const url = await asyncStorage.getItem('server-url');\n\n  if (!url) {\n    await asyncStorage.removeItem('user-token');\n  }\n  setServer(url);\n\n  connection.init(socketName, app.handlers);\n\n  // Allow running DB queries locally\n  global.$query = aqlQuery;\n  global.$q = q;\n\n  if (isDev) {\n    global.$send = (name, args) => runHandler(app.handlers[name], args);\n    global.$db = db;\n    global.$setSyncingMode = setSyncingMode;\n  }\n}\n\nexport type InitConfig = {\n  dataDir?: string;\n  serverURL?: string;\n  password?: string;\n};\n\nexport async function init(config: InitConfig) {\n  // Get from build\n\n  let dataDir, serverURL;\n  if (config) {\n    dataDir = config.dataDir;\n    serverURL = config.serverURL;\n  } else {\n    dataDir = process.env.ACTUAL_DATA_DIR;\n    serverURL = process.env.ACTUAL_SERVER_URL;\n  }\n\n  await sqlite.init();\n  await Promise.all([asyncStorage.init({ persist: false }), fs.init()]);\n  fs._setDocumentDir(dataDir || process.cwd());\n\n  if (serverURL) {\n    setServer(serverURL);\n\n    if (config.password) {\n      await runHandler(handlers['subscribe-sign-in'], {\n        password: config.password,\n      });\n    }\n  } else {\n    // This turns off all server URLs. In this mode we don't want any\n    // access to the server, we are doing things locally\n    setServer(null);\n\n    app.events.on('load-budget', () => {\n      setSyncingMode('offline');\n    });\n  }\n\n  return lib;\n}\n\n// Export a few things required for the platform\n\nexport const lib = {\n  getDataDir: fs.getDataDir,\n  sendMessage: (msg, args) => connection.send(msg, args),\n  send: async <K extends keyof Handlers, T extends Handlers[K]>(\n    name: K,\n    args?: Parameters<T>[0],\n  ): Promise<Awaited<ReturnType<T>>> => {\n    const res = await runHandler(app.handlers[name], args);\n    return res;\n  },\n  on: (name, func) => app.events.on(name, func),\n  q,\n  db,\n};\n"],"names":["send","join","path","init","fs","removeFile","lootFs.getDataDir","keys","LRUCache","val","db","runQuery","fetchAll","execQuery","transaction","asyncTransaction","regex","openDatabase","closeDatabase","uuidv4","num","parseDate","d","Platform.isPlaywright","format","diff","amountToInteger","safeNumber","app","unlisten","global","f","insert","clock","config","schema","tableName","arg1","select","compiled","groupBy","schemaConfig","queryState","update","number","accountModel","categoryModel","categoryGroupModel","payeeModel","db.all","internalFields","publicFields","run","setCacheStatus","exists","get","sqlite.transaction","sqlite.runQuery","rows","onSheetChange","sqlite.openDatabase","sqlite.execQuery","sqlite.closeDatabase","getCell","locales","sheet.getCell","db.firstSync","sheet.get","monthUtils.rangeInclusive","db.update","db.insert","prevMonth","monthUtils.prevMonth","monthUtils.sheetForMonth","db.first","asyncStorage.getItem","monthUtils.format","monthUtils.currentDate","db.getCategories","createCategory","createCategoryGroup","createSummary","createBudget","handleCategoryChange","monthUtils.bounds","createCategoryFromBase","handleCategoryGroupChange","db.runQuery","monthUtils.getMonth","monthUtils.subMonths","monthUtils.addMonths","envelopeBudget.createCategory","report.createCategory","monthUtils.monthFromDate","db.fromDateRepr","sheet.startTransaction","envelopeBudget.handleCategoryChange","report.handleCategoryChange","envelopeBudget.handleCategoryGroupChange","report.handleCategoryGroupChange","sheet.endTransaction","budgetActions.getBudget","budgetActions.setBudget","envelopeBudget.createBudget","envelopeBudget.createCategoryGroup","report.createCategoryGroup","envelopeBudget.createSummary","report.createSummary","sheet.waitOnSpreadsheet","currentMonth","monthUtils.currentMonth","range","db.transaction","sheet.loadUserBudgets","bounds","fetch","Platform.isBrowser","fs.join","fs.getBudgetDir","fs.readFile","fs.writeFile","randomBytes","encrypt","decrypt","createKey","internals.createKey","internals.importKey","internals.encrypt","internals.decrypt","internals.randomBytes","prefs.getPrefs","encryption.encrypt","encryption.decrypt","merkle.emptyTrie","merkle.insert","repairSync","db.cache","encryption.randomBytes","asyncStorage.removeItem","encryption.hasKey","sqlite.exportDatabase","monthUtils.currentDay","fs.exists","fs.removeFile","fs.mkdir","prefs.savePrefs","monthUtils.addDays","currentDay","resetSync","error","cloudStorage.checkKey","cloudStorage.resetSyncState","db.execQuery","db.loadClock","asyncStorage.setItem","cloudStorage.upload","undo.appendMessages","setBudgetType","merkle.prune","encoder.encode","encoder.decode","merkle.diff","sqlite.prepare","sqlite.asyncTransaction","getCategories","whereIn","updateCategoryGroup","moveCategoryGroup","deleteCategoryGroup","deleteCategory","updateCategory","moveCategory","getPayee","mergePayees","getPayees","getCommonPayees","monthUtils.subWeeks","getOrphanedPayees","getAccounts","updateAccount","moveAccount","getTransactions","updateTransaction","deleteTransaction","getTags","deleteTag","updateTag","db.insertWithUUID","createPayee","db.insertPayee","unlistenSync","onApplySync","monthUtils.subDays","monthUtils.parseDate","monthUtils.dayFromDate","monthUtils.getDay","monthUtils.getMonthEnd","monthUtils.differenceInCalendarDays","monthUtils.nextMonth","monthUtils.addYears","apply","regexp","addMonths","subMonths","addWeeks","subWeeks","addYears","subYears","Handlebars","RSchedule","dateFns","data","cond","post","getRules","updateRule","deleteRule","db.delete_","runRules","db.getAccounts","value","field","op","high","low","transactions","winner","db.updateTransaction","db.insertTransaction","db.getTransaction","db.deleteTransaction","db.selectWithSchema","transfer.onInsert","transfer.onUpdate","transfer.onDelete","rules.updateCategoryRules","db.getOrphanedPayees","specials","BankSyncError","makeChildTransaction","all","db.getPayeeByName","db.getPayee","db.toDateRepr","addTransactions","download","currentBalance","db.select","simpleFinBatchSync","res","link.findOrCreateBank","bankSync.syncAccount","t","connection.send","createAccount","db.insertAccount","db.deleteAccount","db.deleteTransferPayee","mainApp","db.moveAccount","asyncStorage.multiGet","bankSync.simpleFinBatchSync","importTransactions","bankSync.reconcileTransactions","db.updateAccount","models.accountModel","models.categoryModel","models.categoryGroupModel","models.payeeModel","monthUtils.range","db.asyncTransaction","result","errors","simpleFinAccounts","encryption.unloadAllKeys","asyncStorage.multiRemove","peg$subclass","peg$SyntaxError","peg$padEnd","last","expected","found","peg$parse","budgetAvailable","TEMPLATE_PREFIX","parse","schedules","r","db.updateWithSchema","db.insertWithSchema","monthUtils._parse","monthUtils.differenceInCalendarMonths","nextMonth","currentDate","monthly","text","db.run","monthUtils.addWeeks","date","numPeriods","m","actions.setBudget","actions.copyPreviousMonth","actions.copySinglePreviousMonth","actions.setZero","actions.set3MonthAvg","actions.set6MonthAvg","actions.set12MonthAvg","actions.setNMonthAvg","goalActions.runCheckTemplates","goalActions.applyTemplate","goalActions.applyMultipleCategoryTemplates","goalActions.overwriteTemplate","goalActions.applySingleCategoryTemplate","cleanupActions.cleanupTemplate","actions.holdForNextMonth","actions.resetHold","actions.coverOverspending","actions.transferAvailable","actions.coverOverbudgeted","actions.transferCategory","actions.setCategoryCarryover","actions.resetIncomeCarryover","budget.createAllBudgets","db.getCategoriesGrouped","sheet.getCellValue","db.insertCategory","db.updateCategory","db.moveCategory","budget.doTransfer","db.deleteCategory","db.insertCategoryGroup","db.updateCategoryGroup","db.moveCategoryGroup","db.deleteCategoryGroup","handlers","monthUtils.isBefore","setBudget","category","sheetName","toBudget","budgetActions.setBuffer","sheet.reloadSpreadsheet","cloudStorage.importBuffer","injected.send","importAccounts","actual.createAccount","importCategories","actual.createCategoryGroup","id","actual.createCategory","importPayees","actual.createPayee","actual.getCategories","actual.getAccounts","actual.getPayees","acct","actual.addTransactions","importBudgets","actual.batchBudgetUpdates","actual.setBudgetAmount","actual.setBudgetCarryover","doImport","getBudgetName","parseFile","runMigration","prefs","fs.migrationsPath","m1632571489012","m1722717601000","m1722804019000","m1723665565000","fs.listDir","migrations.migrate","db.getDatabase","getBackups","fs.getModifiedTime","makeBackup","fs.copyFile","loadBackup","prefs.loadPrefs","prefs.unloadPrefs","fs.getDocumentDir","cloudStorage.listRemoteFiles","cloudStorage.getRemoteFile","cloudStorage.download","sheet.unloadSpreadsheet","db.closeDatabase","cloudStorage.removeFile","db.openDatabase","fs.removeDirRecursively","fs.bundledDatabasePath","prefs.getDefaultPrefs","cloudStorage.exportBuffer","CRDT.getClock","CRDT.makeClientId","CRDT.serializeClock","sheet.loadSpreadsheet","mappings.loadMappings","rules.loadRules","syncMigrations.listen","cloudStorage.possiblyUpload","_loadBackup","_makeBackup","db.deleteAll","encryption.createKey","encryption.loadKey","encryption.unloadKey","db.getCommonPayees","db.getPayees","db.syncGetOrphanedPayees","rules.iterateIds","rules.getRules","db.mergePayees","db.deletePayee","db.updatePayee","rules.getRulesForPayee","documentDir","_getMetadataPrefs","_saveMetadataPrefs","rules.insertRule","rules.updateRule","rules.deleteRule","rules.applyActions","rules.updatePayeeRenameRule","rule","rules.runRules","_resetSync","_repairSync","db.getTags","db.insertTag","db.deleteTag","db.updateTag","csvStringify","parseStringPromise","Date","amount","csv2json","rules.conditionsToAQL","injectAPI.override","authApp","schedulesApp","budgetApp","dashboardApp","notesApp","preferencesApp","toolsApp","filtersApp","reportsApp","rulesApp","adminApp","transactionsApp","accountsApp","payeesApp","spreadsheetApp","syncApp","budgetFilesApp","encryptionApp","tagsApp","fs._setDocumentDir","sqlite.init","asyncStorage.init","fs.init","connection.init"],"mappings":"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"}